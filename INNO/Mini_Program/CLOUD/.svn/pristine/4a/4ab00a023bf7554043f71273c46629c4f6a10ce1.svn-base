//pages/component/micro-page/micro-mix/box/box.js
import {BoxChildNodes} from '../../help/child-nodes.js';
import mcBehavior from '../../help/mc-behavior.js'
const app = getApp(); 
Component(app.BTAB({
  options: {
    multipleSlots: true
  },
  behaviors: [mcBehavior],
  // relations:BoxChildNodes,
  properties: { 
    _pageModelList:{
      type:Object,
      value:{},
      observer:function(n,o){
        // if(!this.isAttached)return
        n && this.init(n);
      }
    },
    isLogin: {
      type: Boolean,
      value: false
    },
    tabIndex: {
      type: Number,
      value: 0
    },
    autoShow: {
      type: Boolean,
      value: false
    },
    // actData: {
    //   type: Object,
    //   value: ""
    // },
    // showSalesVolume: {
    //   type: Boolean,
    //   value: false
    // },
    // autoShow: {
    //   type: Boolean,
    //   value: false
    // },
    // customTab: {
    //   type: Boolean,
    //   value: false
    // },
    // isCustomNav: {
    //   type: Boolean,
    //   value: false
    // },
    // sysConf: {
    //   type: Object,
    //   value: {}
    // },
    // extraSumH:{
    //   type: Number,
    //   value:0,
    // },
    // extraH:{
    //   type: Number,
    //   value:0,
    // },
  },
  data: {
  }, 
  attached() {
    this.isAttached = true;
    this.screenH = app.SIH.screenHeight;
    this.reset();
  },
  ready(){ 
  },
  methods: {
    init(data){
      this.setData({
        pageModelList:data
      })
      this.getAllQuery();
    },
    queryRefresh(e){
      this.getAllQuery();
    },
    getAllQuery(){
      this.throttle(1000,'refreshKey',()=>{
        this.mcGetQuery(`.cItem${this.data.tabIndex||0}`,'all').then(res=>{
          this.nodeInfo = res;
          console.log('getAllQuery',this.data.tabIndex,JSON.parse(JSON.stringify(this.nodeInfo)));
          if(!this.isInitData){
            this.initData();
          }else{
            this.scroll(this.curTop||0);
          }
        })
      },!this.isInitData);
    },
    initData(){
      this.isInitData = true;
      let arr = this.nodeInfo[0],sclInfo = this.nodeInfo[1];
      arr.every((item,i)=>{
        if(this.data.autoShow || (((item.top+sclInfo.scrollTop) <= this.screenH) && !this.nodeLoad[i+''])){
          this.nodeLoad[i+''] = true;
          this.cItem[i+''] = this.cItem[i+''] || this.selectComponent(`#cItem${i}`)
          console.log('初始化',i,JSON.parse(JSON.stringify(arr))) 
          this.cItem[i+''].loadData();
          return true
        }
      }) 
    },
    scroll(top){
      this.curTop = top;
      // console.log(top);
      let arr = this.nodeInfo[0] || [],sclInfo = this.nodeInfo[1] || {};
      arr.every((item,i)=>{
        if((this.curTop >= (item.top+sclInfo.scrollTop))){
        // if((this.curTop >= (item.top+sclInfo.scrollTop)) && !this.nodeLoad[i+'']){
          if(!this.nodeLoad[i+'']){
            this.nodeLoad[i+''] = true;
            this.cItem[i+''] = this.cItem[i+''] || this.selectComponent(`#cItem${i}`)
            console.log('加载',i,this.curTop,item.top+sclInfo.scrollTop) 
            this.cItem[i+''].loadData();
          }
          return true
        }
      })
    },
    reset(id){
      if(this.currentId && this.currentId == id){
        console.log('骨架不需重置',id)
        return false
      }
      this.currentId = id;
      this.curTop = 0;
      this.isInitData = false;
      this.nodeInfo = {};
      this.nodeLoad = {};
      this.cItem = {};
      return true
    }
    // queryAllRefresh(e){
    //   this.getAllQueryInfo({});
    // },
    // queryRefresh(){
    //   if(this.refreshKeyId){
    //     clearTimeout(this.refreshKeyId);
    //     delete this.refreshKeyId;
    //   }
    //   this.refreshKeyId = setTimeout(()=>{
    //     this.trimQuery()
    //   },1000)
    // },
    // trimQuery(){
    //   console.log('刷新',this.queryArr);
    //   if(!this.isInitData){
    //     this.isInitData = true;
    //     if(!this.queryArr){ //null 重新执行
    //       setTimeout(() => {
    //         this.queryRefresh()
    //        }, 1000);
    //       return
    //     }else{
    //       setTimeout(() => {
    //         this.initData();
    //       }, 300);
    //     }
    //   }
    // },
    // initData(){
    //   let scH = app.SIH.screenHeight;
    //   this.queryArr && this.queryArr.some((item,index)=>{
    //     let itemQyInfo = item.queryInfo || {};
    //     item.isLoaded = true;
    //     item.loadData && item.loadData();
    //     console.log('初始化',index,item,scH,itemQyInfo.top,JSON.parse(JSON.stringify(itemQyInfo)))
    //     if(itemQyInfo.top >= scH){
    //       return true
    //     }
    //   }) 
    // },
    // scroll(top){
    //   // console.log(top);
    //   this.queryArr && this.queryArr.some((item,index)=>{
    //     let itemQyInfo = item.queryInfo || {};
    //     if(top>=itemQyInfo.top && !item.isLoaded){
    //       item.isLoaded = true;

    //       console.log('加载',index,item.data._data.code,item.data._data.moduleId,JSON.parse(JSON.stringify(this.curQueryArr)))
    //       item.loadData && item.loadData();
    //       return true
    //     }
    //   })
    // },
    // reset(){ 
    //   this.isInitData = false;
    // }
  }, 
  pageLifetimes: {
  },
   
}))
 