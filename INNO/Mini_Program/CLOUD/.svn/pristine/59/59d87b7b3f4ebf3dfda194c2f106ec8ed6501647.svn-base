// pages/micro_mall/distribution_center/distribution_service/guest_follows/guest_follows.js
import MyDate from "../../../../../support/utils/date-util.js"
const app = getApp();

Page(app.BP({
    data: {
        filter: false,
        leftWidth: 0,
        list: [[],[]],
        binding_staffs:0,
        develop_mum:0,
        current: 0,
        tabs: [
          {
            id:0,
            txt: '邀请好友'
          },
          {
            id: 1,
            txt: '发展会员'
          }
        ], 
        tabShow: [{
            id: 0,
            txt: '邀请好友'
            }
        ],
        none: [],
        cur_sort:0,
        cur_text:"",
        timeBoxShow:false,
        timeBox:[
            {"sort":1,"name":"今天"},
            {"sort":2,"name":"本周"},
            {"sort":3,"name":"本月"},
            {"sort":4,"name":"所有"},
        ],
        
    }, 
    timeData:[0,0],
    onLoad: function(options) {
        this.leftWidth = (750 / this.data.tabs.length).toFixed(2);
        let l_bg_color = app.getColor(this.data.brand_info.style.bg_color, 50, 132, 105, 1);
        this.setData({
            l_bg_color: 'background:#efefef;'
        })
        reset.call(this);
        loadData.call(this).then( e=>{
          loadDataList.call(this);
        });
    },
    handleTab(e) {
        if(this.data.tabShow.length==1){  //需求改成只要一个tab
            return
        }
        let type = e.currentTarget.dataset.type || 0;
        this.setData({
            current: type,
            leftWidth: this.leftWidth * type + 'rpx'
        })
        loadDataList.call(this);
    },
    handleScroll(e) {
        console.log('scroll');
        this.reflash[this.data.current] = true;
        loadDataList.call(this)
    },
    showDetail(e) {
        let dataset = e.currentTarget.dataset || {};
        let type = dataset.type || ''; 
        this.setData({
            filter: !this.data.filter
        })
        if (type != 'show') {
            return;
        } 
        this.setData({
            name: dataset.name || '',
            rank: dataset.rank || '',
            joinTime: (dataset.joinTime[0] +  ' ' + dataset.joinTime[1]) || '',
            // mobile_phone: dataset.mobile_phone || '',
            card_num: dataset.card_num || ''

            // commAmount: dataset.commAmount || 0,
            // last: dataset.last || '',
        }) 
    },
    onTap(e){
        let dataset = e.currentTarget.dataset || {};
        let type = dataset.type || ''; 
        if(type=="time_show"){
            setTimeBox.call(this,true);
        }else if(type == "time_cancel"){
            setTimeBox.call(this,false);
        }else if(type == "time_sel"){
            let current = this.data.current; 
            if(this.isLoading[current])return
            let cur_sort = dataset.sort||0;
            let cur_text = dataset.name||"";
            setTimeBox.call(this,false);
            setTimeout(()=>{
                this.setData({
                    cur_sort,
                    cur_text
                });
                timeClick.call(this,this.data.cur_sort);
            },100)
        }
    }
}))


function loadData() {
    return app.DistrApi.getMyDevelopmentTeamInfo({
        params: {
            brandCode: app.Conf.BRAND_CODE,
            userToken: app.LM.userKey
        },
        extraData: {
            isShowLoad: false
        }
    }).then(res => {
        if (res.code == 1) {
            const data = res.data || {}; 
            let type = 0;
            let staff_code = '' 
            if (data.isStaff != 0){
              type = 1;
              staff_code = data.staff_code || '';
            }
            let tabs = this.data.tabs[type] ; 
            let current = tabs.id;
            this.setData({
                develop_mum: data.developmentUsers || 0,
                binding_staffs: data.bindingStaffUsers || 0,
                tabShow: [tabs] ,
                current: current,
                staff_code: staff_code
            })
          return Promise.resolve(res);
        }
      return Promise.reject(res);
    })
}

function loadDataList() {
    let type = this.data.current;
  console.log('loadData', type, this.hasMore[type] , this.isLoading[type] , this.reflash[type]);
    if (this.hasMore[type] && !this.isLoading[type] && this.reflash[type]){
        this.isLoading[type] = true;
        this.reflash[type] = false;
        let n_time = new Date();
        let s_time = encodeURIComponent((this.timeData && this.timeData[0]) || '2018-1-1 00:00:00');
        let e_time = encodeURIComponent((this.timeData && this.timeData[1]) || (n_time.getFullYear() + '-' + (n_time.getMonth() + 1) + '-' + n_time.getDate() + ' 23:59:59'));
        return app.DistrApi.getMyDevelopmentTeamList({
            params: {
                searchStr: '',
                pageIndex: this.page[type],
                pageSize: app.Conf.PAGE_SIZE,
                type: type + 1,
                beginDate:s_time,
                endDate:e_time,
                brandCode: app.Conf.BRAND_CODE,
                userToken: app.LM.userKey
            },
            extraData: {
                isShowLoad: true
            }
        }).then(res => {
            if (res.code == 1) {
                const data = res.data || {};
                let data_list = data.dataList || [];
                data_list.forEach((item, index) => {
                    data_list[index]['reg_time'] = item['reg_time'].split(' ') || [];
                })
                if (this.page[type] > 1){
                  let list = this.data.list;
                  data_list = list[type].concat(data_list);
                }
                this.setData({
                  [`list[${type}]`]: data_list,
                    [`none[${type}]`]: data.totalCount == 0
                })
                this.hasMore[type] = parseInt(this.page[type]) * parseFloat(app.Conf.PAGE_SIZE) < data.totalCount;
                this.page[type] += 1;
            }
        }).finally(()=>{
            this.isLoading[type] = false;
        })
    }
}


function reset(type = "") {
    let arrLen = this.data.tabs.length;
    this.isLoading = [];
    this.hasMore = [];
    this.page = [];
    this.dataList = [];
    this.none = [];
    this.reflash = [];
    for (let i = 0, len = arrLen; i < len; i++) {
        this.isLoading.push(false);
        this.hasMore.push(true);
        this.reflash.push(true);
        this.page.push(1);
        this.dataList.push([]);
        this.none.push(false)
    }
    this.data.list = this.dataList;
    this.setData({
        none: this.none
    })
}

function setTimeBox(bool=false){
    this.setData({
        timeBoxShow:bool||false
    })
}

  
function timeClick(sort=0){
    sort = sort || 0;
    switch(sort){
        case 1:
            todayClick.call(this);
            break; 
        case 2:
            weekClick.call(this);
            break; 
        case 3:
            monthClick.call(this);
            break; 
        case 4:
            this.timeData[0] = 0;
            this.timeData[1] = 0;
            break; 
        default:
            break;
    }
    reset.call(this);
    loadDataList.call(this);
}

// 今日 按钮
function todayClick(goLoad = false) {
    let myDate = new Date();
    let ifromTime = myDate.toLocaleDateString().replace(/\//g, '-') + ' 00:00:00';
    let itoTime = myDate.toLocaleDateString().replace(/\//g, '-') + ' 23:59:59';
    this.timeData[0] = ifromTime;
    this.timeData[1] = itoTime;
}
// 本周按钮
function weekClick(goLoad = false) {
    let myDate = new Date();
    let ifromTime = MyDate.getWeekFirstDay(myDate) + ' 00:00:00'; ;
    // getWeekFirstDay.call(this) + ' 00:00:00';
    let itoTime = myDate.toLocaleDateString().replace(/\//g, '-') + ' 23:59:59';
    this.timeData[0] = ifromTime;
    this.timeData[1] = itoTime;
}
// 本月 按钮
function monthClick(goLoad = false) {
    let myDate = new Date(); 
    let ifromTime = MyDate.getMonthFirstDay(myDate) + ' 00:00:00'; 
    let itoTime = myDate.toLocaleDateString().replace(/\//g, '-') + ' 23:59:59';
    this.timeData[0] = ifromTime;
    this.timeData[1] = itoTime;
} 