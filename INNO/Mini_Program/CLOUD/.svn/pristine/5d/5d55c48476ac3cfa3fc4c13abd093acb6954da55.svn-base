import {
  CL_BrandApi,
  CL_UserApi
} from "../manager/http-manager.js"
import StorageH from "../handle/storageHandle.js";
import SHP from "../handle/scanHandleParams.js";
import AS from "../manager/authorize-set";
/**
 * 规则说明
 * 1，rule_parameter_store  客户优先进入带参的门店
 * 2，rule_binding_store  客户优先进入绑定的门店
 * 3，rule_lately_store  客户优先进入最近访问的门店
 * 4，rule_partition_store  客户优先进入隔离门店
 * 5，rule_area_recommend  客户优先进入地区指定推荐
 * 6，rule_lbs_recommend  客户优先进入LBS定位推荐
 * 7，rule_no_result_jump  无门店推荐结果，直接进入指定页：value=0(门店列表) / value=门店ID（指定门店）
 * 0，rule_change_store  是否允许用户切换门店
*/
const STORE_KEY = "STORE_STORAGE";
class storeManager {
  static getInstance() {
    if (!storeManager.instance) {
      storeManager.instance = new storeManager();
    }
    return storeManager.instance;
  }
  constructor() {
    let storeInfo = StorageH.get(STORE_KEY);
    if(storeInfo){
      this._storeInfo = storeInfo;
    }
  }
  getVisitStore(...arg){
    return getVisitStore.call(this, ...arg);
  }
  getVisitStoreRule(ops){
    return getVisitStoreRule.call(this, ops);
  }
  storeRuleHandle(ops){
    let query = ops.query || {};
    if(query.barCodeId || query.scene){ //rule_parameter_store 不可取消
     return SHP.getParams(["storeCode"]).then(params=>{
       return getVisitStore.call(this, storeCode);
      })
    } else { // 带定位请求
      AS.checkAuthorize("scope.userLocation", (e)=>{
        if(e){
          // return getVisitStore.call(this);
        }
      },(e)=>{
        // return getVisitStore.call(this);
      })
    }
  }
  get storeInfo(){
    return this._storeInfo || {};
  }
  get storeId(){
    return (this._storeInfo && this._storeInfo.storeId) || 0
  }
}
export default storeManager.getInstance();
//
function getVisitStoreRule(ops){
  // return CL_BrandApi.getVisitStoreRule({
  //   params: {},
  //   other: {isShowLoad: true}
  // }).then(e=>{
  //   if(e.code == 1){
  //     let data = e.data || {};
  //     let ruleKeys = {};
  //     for(let i = 0; i < data.length; i++){
  //       let ruleKey = data[i].ruleKey || "";
  //       if(ruleKey){
  //         ruleKeys[ruleKey] = data[i] || {};
  //       }
  //     }
  //     this.storeRuleHandle(ruleKeys, ops);
  //   }
  // })
  return this.storeRuleHandle(ops);
}
//
function getVisitStore(storeCode, isShowLoad){
  return CL_UserApi.getVisitStore({
    data: {
      storeCode: storeCode || ""
    },
    other: {
      isShowLoad: isShowLoad
    }
  }).then(e=>{
    if(e.code == 1){
      let data = e.data || {}
      this._storeInfo = data;
      StorageH.set(STORE_KEY, data);
      return Promise.resolve(data);
    }
    return Promise.reject();
  })
}