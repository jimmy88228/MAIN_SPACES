import RunApi from "./apiPackage.js";
import  { TabKeys }  from "./log-map.js";
import Conf from "../../conf.js";
import CDateH from "../../helper/handle/cacheDateHandle.js";
const time = 5; //缓存（分钟）
class getTabList {
    static getInstance() {
        if (!getTabList.instance) {
            getTabList.instance = new getTabList();
        }
        return getTabList.instance;
    }
    constructor() {
      this._list = [];
    }
    getList(){
      if(this._getListAsyncHold){
        return this._getListAsyncHold;
      }
      this._getListAsyncHold = CDateH.setCatchDate("GET_TAB_LIST", time).then(() => {
        return getMenuList().then(rList=>{
          let _list = rList && rList.length>0 ? rList : (Conf.tabbar_list || []); //接口 || 打版ext.json
          if(rList && rList.length>0){ //接口有数据的情况
            for(let i = 0,len=_list.length;i<len;i++){
              let itm = _list[i];
              itemTrans(itm);
              let dt = {
                id:TabKeys[itm.url]||"",
                type:itm.type||"",
                is_enable:itm.is_enable||"",
                pagePath:itm.url||"",
                iconPath:itm.icon||"",
                selectedIconPath:itm.selected_icon||"",
                text:itm.name||"",
              }
              _list[i] = dt;
            }
          }
          this._list = JSON.parse(JSON.stringify(_list));
          this._getListAsyncHold && delete this._getListAsyncHold;
          return this._list;
        })
      }).catch(() => { //缓存中
        // console.log('菜单 缓存中');
        this._getListAsyncHold && delete this._getListAsyncHold;
        return this._list
      })
       
      
      return this._getListAsyncHold;
       
    }
    get list(){
      return this._list;
    }
}

function getMenuList(){ //接口 已处理catch
  let params = {
    // brandCode:Conf.BRAND_CODE
  }
  return RunApi.go('CL_BrandApi','getBottomMenuList',params,{diy:true}).then(res=>{
    if(res.code == "1"){
      let list = res && res.data || [];
      list = Array.isArray(list) && list || [];
      return list
    }else{
      return []
    }
  }).catch(()=>{
    return Promise.resolve([]);
  })
} 

function itemTrans(item){
  switch(item.type){
    case "home":
      item.url = 'pages/micro_mall/index/index'
      break;
    case "category":
      item.url = 'pages/micro_mall/classify/classify_page'
      break;
    case "shopping_cart":
      item.url = 'pages/micro_mall/shopping/shopping_cart'
      break;
    case "user_center":
      item.url = 'pages/micro_mall/user/user'
      break;
    case "other_define":
      item.url = 'pages/micro_mall/tab_define/tab_define'
      break;
    default:
      break;
  }
}

export default getTabList.getInstance();