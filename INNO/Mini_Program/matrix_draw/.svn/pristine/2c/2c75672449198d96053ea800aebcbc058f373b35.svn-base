import EasyHttp from "../support/libs/easy-http.min";
import Conf from "../../conf";
import Smm from "../helper/show-msg-helper";
import SIH from "../helper/sys-infos-helper.js"; 
import LM from "./login-manager";
import { RegApis,GoodsApis,LotteryApis,UserApis } from "./http-api";
import Wxp from "../support/tools/wx-api-promise";

const LOG_TAG = "http-manager";
const ApiDomain = Conf.api_domain || {};

Promise.prototype.netData = function (...args) {
    return this.then(res => {
        if (res && res.code == 1) {
            return res.data;
        }
        if (args && args.length > 0)
            return args[0];
        return Promise.reject(res);
    });
};

/******************************  全局配置 ***********************************/
EasyHttp.setRequestHandler(req => {
    console.debug(LOG_TAG, "Request:", req.url, "\n", { req });
    return Wxp.request({
        url: req.url,
        data: req.data || {},
        method: req.method,
        header: req.headers,
    }).then(resp => {
        console.debug(LOG_TAG, "Response:", req.url, "\n", { req, resp });
        return resp;
    })
})
    //默认Action
    .setDefaultMethod("GET")
    //默认请求头
    .setHeaders({ 
        "Content-Type": "application/json", 
        "cookieId": SIH.cookieId,
        "platformSrc": Conf.PLATFORM.TYPE,
        "brandCode": Conf.BRAND_CODE, 
        "userToken": LM && LM.userToken || ""
    })
    //LOG拦截器
    .addInterceptor((req, proceed) => {
        if (LM.isLogin) { 
            req.headers["userToken"] = LM.userToken;
        } 
        return proceed(req).catch(err => {
            console.warn(LOG_TAG, "Error:", req.url, "\n", { req, err });
            return Promise.reject(err);
        });
    })
    //session，token自动更新拦截器
    .addInterceptor((req, proceed) => {
        return proceed(req).then(resp => {
            let data = resp;
            let extra = req.extraData;
            if (data.code == 1001 && (!extra || !extra.noReLogin)) {//token失效自动刷新
                console.log('token过期',data);
                return LM.relogin(false).ignore(() => {
                    if (LM.isLogin && req.headers["userToken"] != LM.userToken) {
                        console.log('过期重发',data,req.headers["userToken"],LM.userToken)
                        req.headers["userToken"] = LM.userToken;
                        return proceed(req); //重发
                    }
                    return Promise.reject({ code: 1001, msg: "登录授权已过期，请刷新重试", tag: LOG_TAG });
                });
            } else if (data.code == 10000 && (!extra || !extra.noReSessionKey)) {//sessionKey失效自动刷新
                console.log('sessionKey失效自动刷新',data)
                return LM.createWxSession(false).ignore(() => {
                    if (LM.sessionKey) {
                        return Promise.reject({ code: 10000, msg: "会话已更新，请刷新页面", tag: LOG_TAG });
                    } else {
                        return Promise.reject({ code: 10000, msg: "会话已过期", tag: LOG_TAG });
                    }
                }).catch(e=>{
                    Smm.showToast({
                        title: e && e.msg || "会话已过期"
                    })
                });
            }
            return data;
        });
    })
    //数据预处理拦截器
    .addInterceptor((req, proceed) => {
        return proceed(req)
            .then(resp => {
                if (resp.statusCode != 200) {
                    return Promise.reject(resp);
                }
                let data = resp.data;
                try {
                    //兼容字符串code
                    data.code = parseInt(data.code);
                } catch (e) { }
                return data;
            }).catch(err => {
                if (err) {
                    const msg = !err.networkType || err.networkType == "none" ? "网络连接已断开，请检查网络" : "网络出错或服务器异常，请先检查网络";
                    return Promise.reject({ msg: msg, error: err, tag: LOG_TAG });
                } else {
                    return Promise.reject({ msg: "网络请求失败", tag: LOG_TAG });
                }
            });
    })
    //loading对话框拦截器
    .addInterceptor((req, proceed) => {
        let extra = req.extraData;
        let showLoading = true;
        if (extra && typeof(extra.showLoading) == 'boolean' && !extra.showLoading) {
            showLoading = false;
        }
        showLoading && Smm.showLoading();
        return proceed(req).finally(() => {
            showLoading && Smm.hideLoading();
        });
    });


export const GoodsApi = new EasyHttp().setBaseUrl(ApiDomain.GOODS_DOMIN).addRequests(GoodsApis);
export const RegApi = new EasyHttp().setBaseUrl(ApiDomain.REG_DOMIN).addRequests(RegApis);
export const LotteryApi = new EasyHttp().setBaseUrl(ApiDomain.LOTTERY_DOMIN).addRequests(LotteryApis);
export const UserApi = new EasyHttp().setBaseUrl(ApiDomain.USER_DOMIN).addRequests(UserApis);





