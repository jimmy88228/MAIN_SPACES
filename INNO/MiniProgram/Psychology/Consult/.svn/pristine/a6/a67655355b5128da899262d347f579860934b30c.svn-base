<template>
  <view class="audio-detail-page" :style="{'background-color':backgroundColor}">
    <page-nav :bgStyle="'background:transparent'" full="false" isClose="true"></page-nav>
    <image v-if="audioDetail.audioBgPic" class="audio-detail-background" :src="audioDetail.audioBgPic"
      @error="backgroundError" mode="widthFix" />
    <view class="cover-background" :style="{ 'background-image': `url(${audioDetail.audioCoverPic})` }"
      v-if="!audioDetail.audioBgPic"></view>
    <view class="audio-detail-title clamp2" :class="audioDetail.audioBgPic ? 'C_fff' : 'C_33'" :style="titleStyle">
      {{ audioDetail.audioTitle ? audioDetail.audioTitle : "" }}</view>
    <image v-if="!audioDetail.audioBgPic" class="audio-detail-cover" :src="audioDetail.audioCoverPic"
      @error="coverError" mode="scaleToFill" />
    <image class="audio-status" :src="audioIcon" mode="scaleToFill" @click="changeStatus" />
    <view class="audio-detail-progress">
      <view class="font-22" :class="audioDetail.audioBgPic ? 'C_fff' : 'C_B2'">{{ time }}</view>
      <slider :value="playJd" :disabled="sliderDisable" @change="sliderChange" :activeColor="activeColor"
        backgroundColor="rgba(216, 216, 216, 0.5)" :max="sliderMax" />
      <view class="font-22" :class="audioDetail.audioBgPic ? 'C_fff' : 'C_B2'">{{ audioDetail.duration_str }}</view>
    </view>
  </view>
</template>

<script>
  import SMH from "@/common/helper/show-msg-handler";
  import UniApi from "@/common/support/tools/uni-api-promise.js";

  const app = getApp();
  const pageOption = Page.BasePage({
    data() {
      return {
        audioPlayIcon: require("@/static/play-white.png"),
        audioStopIcon: require("@/static/stop-white.png"),
        audioPlayIconGrey: require("@/static/play-grey.png"),
        audioStopIconGrey: require("@/static/stop-grey.png"),
        options: {},
        audioDetail: {},
        sliderDisable: true,
        value: "0",
        sliderMax: "100",
        // 播放器实例
        innerAudioContext: {},
        // 切换（播放/停止）按钮   true
        audioStatus: true,
        // 播放总时长
        duration: "00:00",
        // 当前已播放时长
        time: "00:00",
        // 当前播放进度
        playJd: 0,
        // 背景是否正常显示
        backgroundShow: true,
        // 封面是否正常显示
        coverShow: true,
      };
    },
    onLoad(options) {
      this.options = options;
    },
    onReady() {
      this.getAudioDetail();
    },
    computed: {
      // 根据是否有背景换播放主题
      audioIcon() {
        let backgroundImage = this.audioDetail.audioBgPic;
        let audioPlayIcon = backgroundImage ?
          this.audioPlayIcon :
          this.audioPlayIconGrey;
        let audioStopIcon = backgroundImage ?
          this.audioStopIcon :
          this.audioStopIconGrey;
        return this.audioStatus ? audioPlayIcon : audioStopIcon;
      },
      titleStyle() {
        let backgroundImage = this.audioDetail.audioBgPic;
        let textShadow = backgroundImage ?
          "0px 2rpx 4rpx rgba(0, 0, 0, 0.5)" :
          "";
        let style = `text-shadow: ${textShadow}`;
        return style;
      },
      activeColor() {
        let backgroundImage = this.audioDetail.audioBgPic;
        let color = backgroundImage ? "#FFFFFF" : "#B1DBAE";
        return color;
      },
      backgroundColor() {
        let backgroundShow = this.backgroundShow;
        let coverShow = this.coverShow;
        let bgColor = !backgroundShow || !coverShow ? '#9AB9B2' : 'transparent'
        return bgColor
      }
    },
    methods: {
      getAudioDetail() {
        return this.$Http(this.$Apis.getAudio, {
          data: {
            id: this.options.id || 0,
          },
        }).then((res) => {
          if (res.code == 1) {
            let data = res.data
            let min = Math.floor(data.audioTimeLength / 60);
            let second = data.audioTimeLength % 60;
            data.duration_str = (min >= 10 ? min : "0" + min) + ":" + (second >= 10 ? second : "0" + second)
            this.audioDetail = data;
            this.initAudio();
          }
        }).catch((err) => {
          setTimeout(() => {
            this.backAction()
          }, 1500);
        });
      },
      initAudio() {
        var that = this;
        //创建音频实例
        that.innerAudioContext = uni.createInnerAudioContext();
        that.innerAudioContext.autoplay = true;
        //音频地址
        that.innerAudioContext.src = this.audioDetail.audioUrl;
        //音频地址（模拟）
        // "http://devimgtest.innourl.com/EAP/audio.mp3";
        // "https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-hello-uniapp/2cc220e0-c27a-11ea-9dfb-6da8e309e0d8.mp3";
        //   ..音频可以播放 取音频时常并计算
        that.innerAudioContext.onCanplay(() => {
          that.$nextTick(() => {
            setTimeout(() => {
              // 如果音乐可以正常播放，进度条解开禁用
              if (that.sliderDisable == true) that.sliderDisable = false;
              // 如果没有这一步onTimeUpdate()不会触发回调
              that.innerAudioContext.duration.toFixed(0);
              // that.getDuration();
            }, 300);
          });
        });
        //监听播放时间 及 计算播放进度
        that.innerAudioContext.onTimeUpdate(() => {
          // 如果onCanplay的时候获取不到Duration，播放开始的时候再获取一次
          // if (that.duration === "00:00") that.getDuration();

          // console.log(that.innerAudioContext.currentTime,"播放时间")
          //播放时间
          var time = that.innerAudioContext.currentTime.toFixed(0);
          var min = Math.floor(time / 60);
          var second = time % 60;
          if (
            that.innerAudioContext.currentTime >= that.audioDetail.audioTimeLength
          ) {
            that.time = that.audioDetail.duration_str;
          } else {
            that.time =
              (min >= 10 ? min : "0" + min) +
              ":" +
              (second >= 10 ? second : "0" + second);
          }
          //计算进度
          that.playJd = (time / that.audioDetail.audioTimeLength).toFixed(2) * 100;
          // console.log("播放进度", that.innerAudioContext.currentTime);
        });
        //监听播放停止
        that.innerAudioContext.onPlay(() => {
            if (that.audioStatus) that.audioStatus = false;
          }),
          //监听播放停止
          that.innerAudioContext.onStop(() => {
            if (!that.audioStatus) that.audioStatus = true;
          }),
          //监听播放暂停
          that.innerAudioContext.onPause(() => {
            if (!that.audioStatus) that.audioStatus = true;
          }),
          //自然播放结束
          that.innerAudioContext.onEnded(() => {
            if (that.time != that.duration_str) that.time = that.duration_str;
            that.innerAudioContext.stop();
            that.audioStatus = true;
          }),
          //音频错误
          that.innerAudioContext.onError((res) => {
            if (that.sliderDisable == false) that.sliderDisable = true;
            this.innerAudioContextError(res.errCode);
            console.log(res.errMsg);
            console.log(res.errCode);
          });
      },
      innerAudioContextError(errCode) {
        let toast = "";
        if (errCode == 10001) {
          toast = "系统错误";
        } else if (errCode == 10002) {
          toast = "网络错误";
        } else if (errCode == 10003) {
          toast = "文件错误";
        } else if (errCode == 10004) {
          toast = "格式错误";
        } else {
          toast = "未知错误";
        }
        SMH.showToast({
          title: toast,
        });
      },
      // 获取音乐长度
      getDuration() {
        var time = this.innerAudioContext.duration.toFixed(0);
        var min = Math.floor(time / 60);
        var second = time % 60;
        this.duration =
          (min > 10 ? min : "0" + min) +
          ":" +
          (second > 10 ? second : "0" + second);
      },
      // 调整进度
      seek(time) {
        this.innerAudioContext.stop();
        this.innerAudioContext.startTime = time;
        this.innerAudioContext.play();
      },
      sliderChange({
        detail
      }) {
        let sliderTime = (detail.value / 100) * this.audioDetail.audioTimeLength;
        this.seek(sliderTime);
      },
      changeStatus() {
        if (this.sliderDisable) return;
        if (!this.audioStatus) {
          this.innerAudioContext.pause();
          this.audioStatus = true;
        } else {
          this.innerAudioContext.play();
          this.audioStatus = false;
        }
      },
      // 音频背景错误
      backgroundError() {
        console.log("音频背景错误了")
        this.backgroundShow = false
      },
      // 音频封面错误
      coverError() {
        console.log("音频封面错误了")
        this.coverShow = false
      },
    },
    onUnload() {
      // 销毁当前播放器实例
      this.innerAudioContext.destroy();
    },
    onShow() {},
  });
  export default pageOption;
</script>

<style lang="scss" scoped>
  .audio-detail-page {
    width: 100%;
    height: 100vh;
    overflow: hidden;
    position: relative;

    // background: #808080;
    .cover-background {
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      background-position: top center;
      background-repeat: no-repeat;
      background-size: 100% auto;
      filter: blur(100px);
    }

    .audio-detail-background {
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      width: 100%;
    }

    .audio-detail-title {
      width: 70%;
      text-align: center;
      position: absolute;
      top: 16%;
      left: 50%;
      transform: translateX(-50%);
      font-size: 36rpx;
      font-family: PingFangSC-Medium, PingFang SC;
      font-weight: 500;
      line-height: 50rpx;
    }

    .audio-detail-cover {
      position: absolute;
      top: 25%;
      left: 50%;
      transform: translateX(-50%);
      width: 400rpx;
      height: 400rpx;
    }

    .audio-status {
      width: 52rpx;
      height: 58rpx;
      position: absolute;
      bottom: 12%;
      left: 50%;
      transform: translateX(-50%);
      z-index: 999;
    }

    .audio-detail-progress {
      display: flex;
      align-items: center;
      justify-content: space-between;
      position: absolute;
      left: 50%;
      transform: translateX(-50%);
      bottom: 5%;
      width: 90%;

      slider {
        flex: 1;

        ::v-deep .wx-slider-thumb {
          opacity: 0;
        }
      }
    }
  }
</style>