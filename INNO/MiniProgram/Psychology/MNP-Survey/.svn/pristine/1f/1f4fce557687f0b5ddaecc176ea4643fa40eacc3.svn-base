import UniApi from "../common/support/tools/uni-api-promise.js";
import LM from "../common/manager/login-manager.js";
import SMH from "../common/helper/show-msg-handler.js";
import IM from "../common/manager/identity-manager.js";
import PM from "../common/helper/params-handler.js";
import PFM,{isH5,isMP} from "../common/helper/platform-handler.js";
import Conf from "@/config/config.js";
export default {
	data(){
		return {
			isLogin: false,
			clickHoldMap:{},
			options:{},
			authUserInfo: {},
			bsnUserInfo: {},
			isMobile: navigator && navigator.userAgent && navigator.userAgent.indexOf('Mobile') != -1,
			_style: Conf.style,
			platform:PFM,
			isH5:isH5,
			isMP:isMP,
		}
	},
	methods: {
		addVisitLog(name, path, options) {},
		addActionLog(name, position, options) {},
		noAction(){console.log('noAction');return},
		_clickHold(key = "DEF", d = 800) {
			let chm = this.clickHoldMap;
			if (chm[key]) {
					return false;
			} else {
					this.$set(this.clickHoldMap,key,true);
					let timer = setTimeout(() => {
							chm[key] = false;
							delete chm[key];
							clearTimeout(timer);
					}, d);
					return true;
			}
		},
		getDataset(e,type) {
		  let dataset = e && e.currentTarget && e.currentTarget.dataset || {};
		  if(type)return dataset[type]
		  return dataset;
		},
		afterAction(e) {
				let data = this.getDataset(e);
				let action;
				if (data.action && (action = this[data.action])) {
						action(e);
				}
		},
		backAction(url){
			UniApi.navigateBack({
				delta: 1
			}).catch(e=>{
				console.log(e,url,);
				url && this.redirectAction(url);
			});
		},
		jumpAction(e) {
			let url = typeof(e) == 'object' ? this.getDataset(e).url || '' : e;
			console.log('jumpAction',url)
			url.slice(0,1) != '/' && (url = '/' + url);
				if(!url){
					SMH.showToast({
						title: "敬请期待"
					})
					return;
				}
				UniApi.navigateTo({
					url: url
				}).catch(() => {
					UniApi.switchTab({
							url: url
					});
				});
		},
		redirectAction(e) {
			let url = typeof(e) == 'object' ? this.getDataset(e).url || '' : e;
			UniApi.redirectTo({
					url: url
				}).catch(() => {
					UniApi.switchTab({
							url: url
					});
				});
		},
		reLaunchAction(e) {
			let url = typeof(e) == 'object' ? this.getDataset(e).url || '' : e;
			console.log('url',url)
			UniApi.reLaunch({
					url: url
				});
		},
		// 注册
		_getTokenRegister(cache=true){
			return LM.getTokenRegisterAsync(true,cache).then((data)=>{
				if(data.userToken){
					this.isLogin = true;
					if (data.cache == false){
						this.addActionLog("REGISTER", null, null);
					}
					this._setLogin();
					return Promise.resolve(data);
				} else {
					return Promise.reject(data);
				}
			})
		},
		// 登录
		_checkLogin(callback){
			return LM.loginAsync().then(()=>{
					this._setLogin(callback);
					return LM.isLogin;
			})
			.catch(e=>{ // 未登录,跳转登录界面
				let page = getCurrentPages().slice(-1)[0] || {};
				let targetRoute = "pages/login/login";
				// #ifdef H5
				targetRoute = `pages/startup/startup?id=${PM.getParams('initId')||0}`
				// #endif
				if(page.route != targetRoute){
					this.jumpAction("/" + targetRoute);
				}
        return Promise.resolve(false)
      })
		},
		_setLogin(callback){
			let _page = getCurrentPages().slice(-1)[0] || {};
			if(this.isLogin != LM.isLogin){
				this.isLogin = LM.isLogin;
			}
			if(_page.isLogin != this.isLogin){ // 组件 与 页面
				_page.isLogin = this.isLogin;
			}
			typeof(callback) == "function" && callback(LM.isLogin)
		},
		_getUserInfo(){
			return IM.getUserInfoByToken()
		},
		_getRefs(ref){
			this[ref + "Dom"] = this[ref + "Dom"] || this.selectComponent("#" + ref) || this.$refs[ref];
			return this[ref + "Dom"] || {};
		},
		_getQuery(id,selectType,pageType="page",cb) {
      return new Promise((rs, rj) => {
				let query = pageType == "page" ? wx.createSelectorQuery() : wx.createSelectorQuery().in(this);
				let idSel = id || '#main';
				if (selectType == 'all') {
						query.selectAll(idSel).boundingClientRect()
				} else {
						query.select(idSel).boundingClientRect();
				}
				query.selectViewport().scrollOffset().exec(
						res => {
							cb && typeof (cb) == 'function' && cb();
							rs(res || {})
						}
				)
      })
    },
	},
}

