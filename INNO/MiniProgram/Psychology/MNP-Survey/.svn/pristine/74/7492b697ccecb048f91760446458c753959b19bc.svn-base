<template>
  <view class="evaluating-list">
    <page-nav>
      <view slot="custom-content" class="clamp">{{swiperListInfo.name}}</view>
    </page-nav>
    <!-- <view class="content-box" :style="isEmpty ? 'background-color: #fff;' : ''"> -->
    <view :style="isEmpty ? 'background-color: #fff;' : ''">
      <template v-if="!isEmpty">
        <view class="title bold" v-if="swiperListInfo.pictureList.length > 0">
          <swiper class="swiper" :current="current" circular :indicator-dots="imgSwiperOpts.indicatorDots"
            :autoplay="imgSwiperOpts.autoplay" :interval="imgSwiperOpts.interval" :duration="imgSwiperOpts.duration">
            <swiper-item v-for="(item,i) in swiperListInfo.pictureList" :key="i" @click="jumpAction(item.path)">
              <oriImage class="cover-image" :src="item.picture" mode="aspectFill" />
            </swiper-item>
          </swiper>
        </view>
        <!-- <view class="content-scroll"> -->
        <!-- <scroll-view scroll-y class="scroll-box" id="scrollId" @scrolltolower="scrolltolower"> -->
        <view class="item-page" v-for="(pItem, pIndex) in list" :key="pIndex">
          <view v-for="(item, index) in pItem" :key="item.activityId">

            <view class="item" @click="jump" :data-state="item.joinState" data-p-index="pIndex" :data-url="
                      '/pages/activities/fun-assessment/detail/detail?testId=' +
                      item.testId
                    ">
              <view class="msg-box flex-s-s">
                <view class="relative">
                  <oriImage :src="item.coverPic ? item.coverPic : staticAddress+activityIcon"
                    @error="imgerror($event, index, pIndex)" customStyle=" width: 220rpx; height: 165rpx; border-radius: 10rpx;" class="shrink0" mode="aspectFill" />
                </view>
                <view class="content clamp2">
                  <view class="tip-title font-30 clamp2">{{
                        item.name
                      }}</view>
                  <view class="tip font-22 clamp">{{item.quotation}}</view>
                </view>
              </view>
            </view>
          </view>
        </view>
        <!-- </scroll-view> -->
        <!-- </view> -->
        <view class="bottom-hold"></view>
      </template>
      <template v-else>
        <empty>暂无相关趣味测评噢～</empty>
      </template>
    </view>
    <view class="fixed left-0 bottom-0" id="bottomId"></view>
  </view>
</template>

<script>
  import SMH from "@/common/helper/show-msg-handler";
  import oriImage from "@/components/ori-comps/image/ori-image"

  const app = getApp();
  const pageOption = Page.BasePage({
    components:{
      oriImage
    },
    data() {
      return {
        imgSwiperOpts: {
          indicatorDots: false,
          autoplay: true,
          interval: 5000,
          duration: 500,
        },
        swiperListInfo: [],
        activityIcon: "/activity-icon.jpg",
        list: [],
        pageIndex: 0,
        hasMore: true,
        pageSize: app.Conf.PAGE_SIZE,
        clickPage: 0,
        isEmpty: false,
        finishIndex: "",
      };
    },
    onLoad() {},
    onReady() {
      this.loadSwiper()
    },
    onShow() {
      // 记录上次点击的页面数据，局部刷新
      if (this.clickPage) this.pageIndex = this.clickPage - 1 || 0;
      this.loadData();
    },
    onReachBottom() {
      if (this.hasMore) {
        this.loadData();
      }
    },
    // onShareAppMessage(e){},
    methods: {
      loadSwiper() {
        return this.$Http(this.$Apis.getSpecialSectionInfo, {
          data: {
            type: 'fun_test'
          }
        }).then(res => {
          if (res.code == 1) {
            let data = res.data
            this.swiperListInfo = data
            return data
          }
        })
      },
      loadData() {
        let pageIndex = this.pageIndex ? this.pageIndex + 1 : 1;
        return this.$Http(this.$Apis.getFunTestListByPage, {
          data: {
            type: 'fun_test',
            pageIndex: pageIndex,
            pageSize: this.pageSize,
          },
        }).then((res) => {
          if (res.code == 1) {
            let data = res.data || {};
            this.pageIndex = pageIndex;
            let currPage = pageIndex - 1 ? pageIndex - 1 : 0;
            this.list[currPage] = data.list || [];
            this.hasMore = this.pageIndex * this.pageSize < data.totalCount;
            this.setEmpty(this.list);
          }
          return res;
        });
      },
      jump(e) {
        let dataset = e.currentTarget.dataset || {};
        if (dataset.state == "cannot_join") {
          SMH.showToast({
            title: `不属于本次测评对象`,
          });
          return;
        }
        this.clickPage = dataset.pIndex || 0;
        this.jumpAction(dataset.url);
      },
      imgerror(e, img_index, index) {
        var _this = this;
        var imgChildList = _this.list[index];
        if (imgChildList.length > 0) {
          imgChildList[img_index].coverPic = this.staticAddress + this.activityIcon;
        }
        this.$forceUpdate()
      },
      report({
        currentTarget
      }) {
        let dataset = currentTarget.dataset || {};
        this.clickPage = dataset.pIndex || 0;
        this.jumpAction(dataset.url);
      },
      scrolltolower(e) {
        if (this.hasMore) {
          this.loadData();
        }
      },
      setEmpty(data) {
        if (data instanceof Array) {
          if (data.length == 0 || !data[0] || (data[0] && data[0].length == 0)) {
            this.isEmpty = true;
          } else {
            this.isEmpty = false;
          }
        } else {
          this.isEmpty = false;
        }
      },
    },
  });
  export default pageOption;
</script>

<style lang="scss" scoped>
  .evaluating-list {
    display: flex;
    flex-direction: column;
    box-sizing: border-box;
    // background-color: rgb(247, 247, 247);
    height: 100vh;
  }

  .content-box {
    // padding: 0 20rpx;
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  .title {
    width: 680rpx;
    height: 240rpx;
    margin: 38rpx auto;
    border-radius: 10rpx;
    overflow: hidden;

    &>.swiper {
      height: 100%;
      width: 100%;

      .cover-image {
        width: 100%;
        height: 100%;
      }
    }
  }

  .content-scroll {
    flex: 1;
    overflow: hidden;
  }

  .bottom-hold {
    height: 50rpx;
  }

  // .scroll-box {
  //   height: 100%;

  .item-page {
    overflow: hidden;
  }

  .item {
    position: relative;
    border-radius: 20rpx;
    background-color: #fff;
    margin: 30rpx 38rpx;

    // &:last-child{
    //   margin-bottom: 0;
    // }
    &:first-child {
      margin-top: 0;
    }

    &>view:nth-child(2) {
      border-top: 1px solid rgba($color: #979797, $alpha: 0.2);
    }

    .msg-box {
      padding: 25rpx 0;
      box-sizing: border-box;
      // border-bottom: 1px solid rgba($color: #979797, $alpha: 0.2);
    }

    .btn {
      height: 100rpx;
    }

    .invalid-btn {
      color: #b2b2b2;
    }

    .content {
      margin-left: 27rpx;
    }

    .tip-title {
      margin: 11rpx 0 16rpx;
      font-size: 30rpx;
      font-family: PingFangSC-Medium, PingFang SC;
      font-weight: bold;
      color: #000000;
      line-height: 42rpx;
    }

    .tip {
      font-size: 22rpx;
      font-family: PingFangSC-Regular, PingFang SC;
      color: #7F7F7F;
      line-height: 30rpx;
    }

    // }

    // 已完成折断线
    .wrap {
      display: table;
      width: 100%;
      white-space: nowrap;
      border-spacing: 2rpx 0;
      font-size: 24rpx;
      color: #8e8e8e;
      text-align: center;
      box-sizing: border-box;
      padding: 0 32rpx;
    }

    .wrap::before,
    .wrap::after {
      display: table-cell;
      content: "";
      width: 35%;
      background: -webkit-linear-gradient(#dddddd, #dddddd) repeat-x left center;
      background: linear-gradient(#dddddd, #dddddd) repeat-x left center;
      background-size: 1rpx 1rpx;
    }
  }
</style>