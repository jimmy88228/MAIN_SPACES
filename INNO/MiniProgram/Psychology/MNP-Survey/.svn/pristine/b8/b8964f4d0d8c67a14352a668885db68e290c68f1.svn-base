<template>
  <view class="">
    <!-- #ifdef H5 -->
    <h5Box>
      <template v-slot:body>
        <view class="answer">
          <view class="answer-content" :class="[popupH5Bool ? 'blur' : '']"> 
            <view class="margin-box">
              <view
                class="progress-box H5 flex-b-c"
                :style="'height:' + navHeight + 'px;'"
              >
                <view class="msg-box">
                  <view class="progress">
                    <progress
                      :percent="getPercent(current + 1, totalCount)"
                      active
                      active-mode="forwards"
                      :duration="10"
                      stroke-width="6"
                      border-radius="8"
                      activeColor="#21B014"
                      backgroundColor="rgba(216,216,216,0.3)"
                    />
                  </view>
                  <view class="progress-title C_7f f-shrink-0 bold p-r-20"
                    ><text class="font-24">进度{{ current + 1 }}</text
                    >/<text class="font-18 C_B2">{{ totalCount }}</text>
                  </view>
                </view>
                <view class="H5-btn-box flex-s-c">
                  <button class="btn H5 flex-c-c" @click="last">上一题</button>
                  <button class="btn H5 flex-c-c" @click="back('check')">
                    暂停
                  </button>
                </view>
              </view>
            </view> 
            <view
              class="touch-stop-box fixed"
              v-show="clickHoldMap['answer']"
              @click.stop="noAction"
            ></view>
            <view class="box">
              <view
                class="tips"
                style="padding: 0px 80rpx"
                v-if="acInfo.activityInstruction"
                >{{ acInfo.activityInstruction }}</view
              >
              <view id="swiperId" class="swiper H5">
                <view
                  class="swiper-item-box flex-s-s"
                  :style="'transform:translateX(-' + (current * 100) + '%);'"
                >
                  <view
                    v-for="(item, index) in list"
                    :key="index"
                    class="swiper-item"
                  >
                    <view class="item-box">
                      <view class="title bold">
                        {{ item.question || "" }}
                      </view>
                      <view
                        class="answer-box flex-c-c flex-col"
                        v-if="item.optionList"
                      >
                        <button
                          :class="[
                            'answer-item',
                            'bold',
                            'flex-c-c',
                            item.selectOptionId == c_item.optionId
                              ? 'active'
                              : '',
                          ]"
                          @click="onAnswer(c_item.optionId, index)"
                          v-for="(c_item, c_index) in item.optionList"
                          :key="c_index"
                        >
                          {{ c_item.optionContent }}
                        </button>
                      </view>
                    </view>
                  </view>
                </view>
              </view>  
              <view class="btn-box H5 flex-s-c" id="btnBox">
                <view
                  class="btn flex-c-c submit"
                  :class="{ active: btnActive, dismiss: btnDismiss }"
                  v-if="submitShow"
                  @click="submitFinish"
                  >提交</view
                >
              </view>
            </view>
          </view>

          <ori-popup
            ref="popup"
            type="bottom"
            :is-mask-click="false"
            background-color="#fff"
            mask-background-color="transparent"
          >
            <template v-slot:content>
              <view class="popup-content">
                <view class="title font-38 bold C_222">确认暂停测评吗？</view>
                <view class="tips font-28 C_7f"
                  >为你保留当前进度，休息一会记得回来噢～
                </view>
                <view class="btn-box font-30 flex-c-c">
                  <button class="btn C_B2" @click="back('goon')">
                    继续做题
                  </button>
                  <button class="btn active" @click="back">确认退出</button>
                </view>
              </view>
            </template>
          </ori-popup>

          <ori-popup
            ref="popup_h5"
            type="center"
            :is-mask-click="false"
            mask-background-color="rgba(0,0,0,0.6)"
          >
            <template v-slot:content>
              <view class="H5-popup-content">
                <view class="C_fff">已暂停评测</view>
                <button class="goon-btn C_fff flex-c-c" @click="back('goon')">
                  继续评测
                </button>
              </view>
            </template>
          </ori-popup>
        </view>
      </template>
    </h5Box>
    <!-- #endif -->

    <!-- #ifdef MP -->
    <view class="answer">
      <view class="answer-content" :class="[popupH5Bool ? 'blur' : '']">
        <page-nav mode="None">
          <template v-slot:custom-content>
            <view
              class="progress-box flex-s-c"
              :style="'height:' + navHeight + 'px;'"
            >
              <view class="progress-title C_7f f-shrink-0 bold p-r-20"
                ><text class="font-24">进度{{ current + 1 }}</text
                >/<text class="font-18 C_B2">{{ totalCount }}</text>
              </view>
              <view class="progress">
                <progress
                  :percent="getPercent(current + 1, totalCount)"
                  active
                  active-mode="forwards"
                  :duration="10"
                  stroke-width="6"
                  border-radius="8"
                  activeColor="#21B014"
                  backgroundColor="rgba(216,216,216,0.3)"
                />
              </view>
            </view>
          </template>
        </page-nav>

       
        <view
          class="touch-stop-box fixed"
          v-show="clickHoldMap['answer']"
          @click.stop="noAction"
        ></view>
        <view class="box">
          <view
            class="tips"
            style="padding: 0px 80rpx"
            v-if="acInfo.activityInstruction"
            >{{ acInfo.activityInstruction }}</view
          > 
					<view id="swiperId" class="swiper H5">
						<view
							class="swiper-item-box flex-s-s"
							:style="'transform:translateX(-' + (current * 100) + '%);'"
						>
							<!-- :style="`transform:translateX(-${current * 100}%);`"
						> -->
							<view
								v-for="(item, index) in list"
								:key="index"
								class="swiper-item"
							>
								<view class="item-box">
									<view class="title bold">
										{{ item.question || "" }}
									</view>
									<view
										class="answer-box flex-c-c flex-col"
										v-if="item.optionList"
									>
										<button
											:class="[
												'answer-item',
												'bold',
												'flex-c-c',
												item.selectOptionId == c_item.optionId
													? 'active'
													: '',
											]"
											@click="onAnswer(c_item.optionId, index)"
											v-for="(c_item, c_index) in item.optionList"
											:key="c_index"
										>
											{{ c_item.optionContent }}
										</button>
									</view>
								</view>
							</view>
						</view>
					</view>  
          <view class="btn-box flex-s-c" id="btnBox">
            <view class="btn flex-c-c" @click="last">上一题</view>
            <view class="btn flex-c-c" @click="back('check')">暂停返回</view>
            <view
              class="btn flex-c-c submit"
              :class="{ active: btnActive, dismiss: btnDismiss }"
              v-if="submitShow"
              @click="submitFinish"
              >提交</view
            >
          </view>
        </view>
      </view>

      <ori-popup
        ref="popup"
        type="bottom"
        :is-mask-click="false"
        background-color="#fff"
        mask-background-color="transparent"
      >
        <template v-slot:content>
          <view class="popup-content">
            <view class="title font-38 bold C_222">确认暂停测评吗？</view>
            <view class="tips font-28 C_7f"
              >为你保留当前进度，休息一会记得回来噢～
            </view>
            <view class="btn-box font-30 flex-c-c">
              <button class="btn C_B2" @click="back('goon')">继续做题</button>
              <button class="btn active" @click="back">确认退出</button>
            </view>
          </view>
        </template>
      </ori-popup>

      <ori-popup
        ref="popup_h5"
        type="center"
        :is-mask-click="false"
        mask-background-color="rgba(0,0,0,0.6)"
      >
        <template v-slot:content>
          <view class="H5-popup-content">
            <view class="C_fff">已暂停评测</view>
            <button class="goon-btn C_fff flex-c-c" @click="back('goon')">
              继续评测
            </button>
          </view>
        </template>
      </ori-popup>
    </view>
    <!-- #endif -->
  </view>
</template>

<script>
import sysInfosHandler from "@/common/helper/sys-infos-handler";
import SMH from "@/common/helper/show-msg-handler";
import oriPopup from "@/components/ori-comps/popup/ori-popup";
import h5Box from "@/components/h5-box/index.vue";

const app = getApp();
const pageOption = Page.BasePage({
  components: {
    oriPopup,
    h5Box,
  },
  data() {
    return {
      noneFn: "",
      submitShow: false,
      navHeight: sysInfosHandler.navHeight || 40,
      current: 0,
      pageIndex: 0,
      pageSize: 5,
      totalCount: 0,
      preview: 5, //提前X道题预加载题目
      btnActive: false,
      btnDismiss: false,
      list: [],
      hasMore: true,
      isFinish: false,
      swiperStyle: "",
      acInfo: {},
      popupH5Bool: false,
      //
      screenPage: 3, // 仅加载前 中 后3屏数据
    };
  },
  onLoad(options) {
    this.options = options;
  },
  onReady() {
    this.init();
    this.getActInfo();
  },
  computed: {
    CurPreviewNum() {
      return this.current + this.preview;
    },
  },
  // onShareAppMessage(e){},
  methods: {
    init() {
      // let current = parseInt(this.options.current || 0);
      // let currentPage = Math.ceil(((current || 1)) / this.pageSize);
      // let loadPage = currentPage > 1 ? currentPage - 1 : 1;
      // let loadPageSize = currentPage > 1 ? this.screenPage * this.pageSize : this.pageSize * (this.screenPage - 1);
      // this.loadData(loadPage, loadPageSize).then(()=>{
      // 	this.getBoxH();
      // })
      let allCount = parseInt(this.options.allCount || 0);
      let current = parseInt(this.options.current || 0);
      if (!(allCount > current)) current = current - 1;
      let lastPageIndex = Math.ceil(
        ((current || 1) + this.preview) / this.pageSize
      );
      let lastPageSize = lastPageIndex * this.pageSize;
      this.loadData(1, lastPageSize).then(() => {
        if (!(allCount > parseInt(this.options.current || 0))) {
          this.setSubmitBtn(true);
        }
        this.current = current;
        this.pageIndex = lastPageIndex;
        this.getBoxH();
        if (this.CurPreviewNum >= this.pageIndex * this.pageSize) {
          this.loadData();
        }
      });
    },
    getActInfo() {
      return this.$Http(this.$Apis.getActivityInfo, {
        data: {
          activityId: this.options.activityId,
        },
      }).then((res) => {
        if (res.code == 1) {
          let data = res.data || {};
          this.acInfo = data;
        }
      });
    },
    loadData(pageIndex = 0, pageSize = 0) {
      if (!this.hasMore) {
        return Promise.reject();
      }
      if (!pageIndex) pageIndex = this.pageIndex + 1;
      if (!pageSize) pageSize = this.pageSize;
      return this.$Http(this.$Apis.getQuestionList, {
        data: {
          activityId: this.options.activityId || 0,
          // pageIndex: pageIndex,
          // pageSize: pageSize
          skip: parseInt(pageIndex - 1) * this.pageSize, // 跳过行数
          take: pageSize, // 取得行数
        },
      }).then((res) => {
        if (res.code == 1) {
          this.pageIndex = pageIndex;
          let data = res.data || {};
          let list = data.list || [];
          this.totalCount = data.totalCount || 0;
          this.hasMore = pageIndex * pageSize < this.totalCount;
          this.list = this.list.concat(list);
        }
        return res;
      });
    },
    onAnswer(id, index) {
      if (index != this.totalCount - 1) {
        let check = this._clickHold("answer", 400);
        if (!check) return;
      }
      let item = this.list[index];
      item.selectOptionId = id;
      this.submit(index).then(() => {
        if (this.isFinish || this.current >= this.totalCount - 1) {
          this.setSubmitBtn();
        }
        if (this.current < this.totalCount - 1) {
          this.current += 1;
          if (
            this.isFinish ||
            (this.current >= this.totalCount - 1 &&
              this.list[this.current] &&
              this.list[this.current].selectOptionId > 0)
          ) {
            this.setSubmitBtn();
          }
        }
        // 需要加载更多数据
        if (
          this.hasMore &&
          this.CurPreviewNum >= this.pageIndex * this.pageSize
        ) {
          this.loadData();
        }
      });
    },
    submit(index) {
      let item = this.list[index] || {};
      if (item.selectOptionId <= 0) {
        SMH.showToast({
          title: `第${index + 1}道题目答案异常`,
        });
        return;
      }
      let answerList = [
        {
          optionId: item.selectOptionId || 0,
          questionId: item.questionId || 0,
        },
      ];
      return this.$Http(this.$Apis.submitAnswer, {
        data: {
          activityId: this.options.activityId || 0,
          answerList,
        },
        other: {
          isShowLoad: true,
        },
      }).then((res) => {
        if (res.code == 1) {
          let data = res.data || {};
          this.isFinish = data.isFinish || false;
          return Promise.resolve(res);
        } else {
          return Promise.reject(res);
        }
      });
    },
    setSubmitBtn(bool = true) {
      if (bool) {
        if (this.submitShow) return;
        this.submitShow = true;
        setTimeout(() => {
          this.btnDismiss = false;
          this.btnActive = true;
        }, 50);
      } else {
        if (this.btnDismiss) return;
        this.btnActive = false;
        this.btnDismiss = true;
        setTimeout(() => {
          this.submitShow = false;
          this.btnDismiss = false;
        }, 400);
      }
    },
    last() {
      if (this.current == 0)
        return !this.isFinish && this.submitShow && this.setSubmitBtn(false);
      this.current -= 1;
    },
    back(type) {
      let ref = "popup";
      // #ifdef H5
      ref = "popup_h5";
      // #endif
      if (type == "check") {
        // #ifdef H5
        this.popupH5Bool = true;
        // #endif
        this.$refs[ref].show();
      } else if (type == "goon") {
        // #ifdef H5
        this.popupH5Bool = false;
        // #endif
        this.$refs[ref].dismiss();
      } else {
        this.backAction();
      }
    },
    getPercent(cur, len) {
      return Number((cur / len).toFixed(2)) * 100;
    },
    submitFinish() {
      let index = -1;
      let check = this.list.every((item, i) => {
        index = i;
        return item.selectOptionId > 0;
      });
      if (!check && !this.isFinish) {
        SMH.showToast({
          title: `第${index + 1}道题目还没答题`,
        });
        this.current = index;
        return;
      }
      return this.$Http(this.$Apis.finishSurvey, {
        customUrl:
          this.$Apis.finishSurvey.u +
          `?activityId=${this.options.activityId || 0}`,
        other: {
          isShowLoad: true,
        },
      }).then((res) => {
        if (res.code) {
          this.redirectAction(
            "/pages/activities/evaluating/answer/answer-result"
          );
        } else {
          app.SMH.showToast({
            title: res.msg,
          });
        }
      });
    },
    getBoxH() {
      return this._getQuery("#swiperId,#btnBox", "all").then((res) => {
        let swiperInfo = (res[0] && res[0][0]) || {};
        let footerInfo = (res[0] && res[0][1]) || {};
        let height =
          footerInfo.top - swiperInfo.top > 0
            ? footerInfo.top - swiperInfo.top + "px"
            : "70vh";
        this.swiperStyle = `height:${height};`;
        console.log("_getQuery", res, this, this.swiperStyle);
        return this.swiperStyle;
      });
    },
  },
});
export default pageOption;
</script>

<style lang="scss" scoped>
.answer {
  .msg-box {
    width: 160px;
  }
  .box,
  .H5-btn-box {
    padding-top: 80rpx;

    .tips {
      font-size: 26rpx;
      color: #b2b2b2;
      text-align: center;
    }

    .swiper {
      width: 100%;
      box-sizing: border-box;
			padding-bottom: 200rpx;
			.swiper-item-box {
				flex-wrap: nowrap;
				transition: transform 0.3s linear;
				width: 100%;
			}
			.swiper-item {
				width: 100%;
				flex-shrink: 0;
			}
      .sp-item {
        width: 100%;
        height: 100%;
      }

      .item-box {
        padding: 0 90rpx;
      }

      .title {
        font-size: 38rpx;
        padding-top: 25rpx;
        padding-bottom: 60rpx;
        text-align: center;
      }

      .answer-box {
        text-align: center;

        .answer-item {
          width: 480rpx;
          height: 116rpx;
          border-radius: 58rpx;
          background-color: rgba($color: #fafafa, $alpha: 1);
          font-size: 32rpx;
          margin-bottom: 20rpx;

          &:last-child {
            margin-bottom: 0;
          }

          &.active {
            color: #fff;
            background-color: $uni-main-color;
          }
        }
      }
    }

    .btn-box {
      position: fixed;
      bottom: 45rpx;
      left: 0;
      width: 100%;
      padding-left: 35rpx;
      box-sizing: border-box;
      &.H5 {
        justify-content: center;
        .btn {
          position: relative;
          left: unset;
        }
      }
    }
    .btn {
      width: 200rpx;
      height: 110rpx;
      border-radius: 58rpx;
      font-size: 28rpx;
      color: #b2b2b2;
      background: #fafafa;
      margin-right: 20rpx;
      &.H5 {
        width: 90px;
        height: 32px;
        background: #ffffff;
        border-radius: 6px;
        border: 1px solid #dbf1d9;
      }
      &:last-child {
        margin-right: 0;
      }

      &.submit {
        background-color: $uni-main-color;
        color: #fff;
        box-shadow: 0 9rpx 44rpx 0 rgba(40, 176, 20, 0.45);
        position: absolute;
        width: 420rpx;
        left: 255rpx;
        transform: scale3d(0, 1, 1);
        transform-origin: right;
        opacity: 0;

        &.active {
          animation: activeAnim 0.6s forwards;
        }

        &.dismiss {
          animation: dismissAnim 0.4s forwards;
        }
      }
    }
  }

  .H5-btn-box {
    padding-top: 0;
  }
  .margin-box {
    padding: 20px;
    box-sizing: border-box;
    // padding: 8px 20px;
    border-radius: 10px;
  }
  .progress-box {
    padding: 0 38rpx;
    box-sizing: border-box;
    width: 550rpx;
    &.H5 {
      background: rgba($color: #f5fcf4, $alpha: 0.9);
      padding: 30px 20px;
      width: 100%;
    }
  }

  .progress {
    width: 100%;
  }

  .touch-stop-box {
    width: 100vw;
    height: 100vh;
    z-index: 9999;
    background-color: transparent;
  }

  .popup-content {
    box-shadow: 0 -15rpx 30rpx 1px rgba(0, 0, 0, 0.1);
    background-color: #fff;
    text-align: center;

    .title {
      padding: 65rpx 0 45rpx 0;
    }

    .tips {
      padding-bottom: 65rpx;
    }

    .btn-box {
      padding-bottom: 50rpx;
      box-sizing: border-box;

      .btn {
        background: #fafafa;
        border-radius: 58rpx;
        width: 300rpx;
        height: 100rpx;

        &.active {
          background: #eefaef;
          color: #5ecf68;
          margin-left: 28rpx;
        }
      }
    }
  }

  .blur {
    filter: blur(3px);
  }
  .H5-popup-content {
    font-size: 36px;
    text-align: center;
  }
  .goon-btn {
    width: 220px;
    height: 70px;
    background: #21b014;
    border-radius: 10px;
    margin-top: 80px;
    font-size: 22px;
  }
}

@keyframes activeAnim {
  0% {
    border-radius: 50%;
    opacity: 0;
    transform: scale3d(0.15, 1, 1);
  }

  50% {
    border-radius: 58rpx;
    opacity: 1;
  }

  100% {
    border-radius: 58rpx;
    opacity: 1;
    transform: scale3d(1, 1, 1);
  }
}

@keyframes dismissAnim {
  0% {
    border-radius: 58rpx;
    opacity: 1;
    transform: scale3d(1, 1, 1);
  }

  20% {
    border-radius: 58rpx;
    color: transparent;
  }

  100% {
    border-radius: 50%;
    box-shadow: 0 9rpx 44rpx 0 transparent;
    font-size: 0;
    opacity: 0;
    transform: scale3d(0.15, 1, 1);
  }
}
</style>
