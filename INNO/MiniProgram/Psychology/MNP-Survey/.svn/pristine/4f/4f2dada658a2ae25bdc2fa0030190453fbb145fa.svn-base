import {
	Apis
} from "../http/http.api.install.js";
import {
	Http
} from "../http/http.interceptor.js";
class scanCodeManager {
	static getInstance() {
		if (!scanCodeManager.instance) {
			scanCodeManager.instance = new scanCodeManager();
		}
		return scanCodeManager.instance;
	}
	constructor() {
		this._scene = "";
		this._scanInfo = {};
		this._schoolInfo = {};
		this._classInfo = {};
		this._actBaseInfo = {};
	}
	get scene(){
		return this._scene;
	}
	get scanInfo(){
		return this._scanInfo;
	}
	get schoolInfo(){
		return this._schoolInfo;
	}
	get classInfo(){
		return this._classInfo;
	}
	get actBaseInfo(){
		return this._actBaseInfo;
	}
	initScan(reqData){
		this.clearData();
		this._scene = reqData.scene || "";
	}
	scan(reqData, showLoading = true) {
		let scene = (reqData && reqData.scene) || this._scene || "";
		if(!scene) return Promise.resolve();
		if(this.scanReqHold) return this.scanReqHold;
		return this.scanReqHold = scanReq.call(this, scene, showLoading).then((data) => {
			let sceneOption = data.sceneOption || {};
			let getInfoArr = [];
			if (sceneOption.schoolId) {
				getInfoArr.push(getSchoolInfo.call(this, sceneOption.schoolId));
			}
			if (sceneOption.classId) {
				getInfoArr.push(getClassInfo.call(this, sceneOption.classId));
			}
			if(sceneOption.activityId){
				getInfoArr.push(getBaseActivityInfo.call(this, sceneOption.activityId));
			}
			return Promise.all(getInfoArr).then((result)=>{
				return data;
			})
		}).finally(()=>{
			setTimeout(()=>{
				this.scanReqHold = null;
			}, 500)
		})
	}
	getClassInfo(classId) {
		return getClassInfo.call(this, classId)
	}
	getSchoolInfo(schoolId) {
		return getSchoolInfo.call(this, schoolId)
	}
	getBaseActivityInfo(activityId) {
		return getBaseActivityInfo.call(this, activityId)
	}
	clearData(){
		this._scanInfo = {};
		this._schoolInfo = {};
		this._classInfo = {};
		this._actBaseInfo = {};
	}
}
export default scanCodeManager.getInstance();

function scanReq(scene, showLoading) {
	if(this._scanInfo[scene]){
		return Promise.resolve(this._scanInfo[scene]);
	}
	return Http(Apis.getAppletCode, {
		data: {
			codeKey: scene
		},
		other: {
			isShowLoad: showLoading
		}
	}).then((res) => {
		if (res.code) {
			let resData = res.data || {};
			let {
				data,
				pagePath
			} = resData;
			data = data ? JSON.parse(data) : data;
			this._scanInfo[scene] = {
				sceneOption: data,
				pagePath: pagePath
			}
			return this._scanInfo[scene] || {};
		} else {
			this._scanInfo[scene] = null;
		}
	})
}

function getBaseActivityInfo(activityId) {
	if (!Number(activityId)) return Promise.reject();
	if(this._actBaseInfo.activityId == activityId){
		return Promise.resolve(this._actBaseInfo);
	}
	return Http(Apis.getActivityBaseInfo, {
		data: {
			activityId: activityId
		}
	}).then((res)=>{
		if(res.code){
			let data = res.data || {}
			this._actBaseInfo = data;
			return Promise.resolve(data);
		} else {
			this._actBaseInfo = {};
		}
		return Promise.resolve({});
	}).catch(()=>{
		return Promise.resolve({});
	})
}

function getClassInfo(classId) {
	if (!Number(classId)) return Promise.reject();
	if(this._classInfo.classId == classId){
		return Promise.resolve(this._classInfo);
	}
	return Http(Apis.getClassInfo, {
		data: {
			classId: classId
		}
	}).then((res)=>{
		if(res.code){
			let data = res.data || {}
			this._classInfo = data;
			return Promise.resolve(data);
		} else {
			this._classInfo = {};
		}
		return Promise.resolve({});
	}).catch(()=>{
		return Promise.resolve({});
	})
}

function getSchoolInfo(schoolId) {
	if (!Number(schoolId)) return Promise.reject();
	if(this._schoolInfo.schoolId == schoolId){
		return Promise.resolve(this._schoolInfo);
	}
	return Http(Apis.getSchoolInfo, {
		data: {
			schoolId: schoolId
		}
	}).then((res)=>{
		if(res.code){
			let data = res.data || {}
			this._schoolInfo = data;
			return Promise.resolve(data);
		} else {
			this._schoolInfo = {};
		}
		return Promise.resolve({});
	}).catch(()=>{
		return Promise.resolve({});
	})
}
