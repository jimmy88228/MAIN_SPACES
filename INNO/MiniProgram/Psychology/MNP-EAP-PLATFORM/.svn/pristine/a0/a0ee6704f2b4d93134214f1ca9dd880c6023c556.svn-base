import tabBarHandler from "@/common/manager/tabbar-manager.js";
const BasePage = function(pageOption) {
	let po = pageOption || {};
	let bpo = {
		onLoad(...args) {
			let options = decodeOption(...args);
			try {
				getPageState.call(this, "onLoad");
			} catch (e) {}
			po.onLoad && po.onLoad.call(this, options);
		},
		onShow(...args) {
			try {
				getPageState.call(this, "onShow");
			} catch (e) {}
			// settarbar();
			po.onShow && po.onShow.call(this, decodeOption(...args));
		},
		onReady(...args) {
			try {
				getPageState.call(this, "onReady");
			} catch (e) {}
			po.onReady && po.onReady.call(this, decodeOption(...args));
		},
		onHide() {
			try {
				getPageState.call(this, "onHide");
			} catch (e) {}
			po.onHide && po.onHide.call(this);
		},
		onUnload() {
			try {
				getPageState.call(this, "onUnload");
			} catch (e) {}
			po.onUnload && po.onUnload.call(this);
		},
		methods: {
			initTabBar(detail){
				settarbar(detail);
			},
			...po.methods
		}
	}
	//分享
	if (po.onShareAppMessage) {
		bpo.onShareAppMessage = function(...args) {
			let _page = getCurrentPages().slice(-1)[0] || {};
			let shareData = po.onShareAppMessage && po.onShareAppMessage.call(this, ...args) || {};
			return shareData;
		}
	}
	// 朋友圈
	if (po.onShareAppMessage || po.onShareTimeline) { // 页面分享，分享朋友圈
		bpo.onShareTimeline = function(...args) {
			let shareData = (this.onShareAppMessage && this.onShareAppMessage()) || {};
			let shareTimeData = (po.onShareTimeline && po.onShareTimeline.call(this, ...args)) || {};
			let path = shareData.path || '';
			if (path) {
				shareData.query = path.substr(parseInt(path.indexOf("?")) + 1);
			}
			return {
				...shareData,
				...shareTimeData
			}
		}
	}
	return {
		...po,
		...bpo
	}
}

function getPageState(process) {
	switch (process) {
		case "onShow":
			if (this.pageState == "onLoad" || !this.pageState) {
				this.pageState = process
			} else if (this.pageState == "onHide") {
				this.pageState = "onBack"
			}
			break;
		case "onLoad":
		case "onReady":
		case "onHide":
		case "onUnload":
			this.pageState = process;
			break;
	}
}

// encode页面参数
function decodeOption(ops){
	ops = {
		...ops
	}
	for(let i in ops){
		ops[i] = decodeURIComponent(ops[i]);
	}
	return ops
}
Page.BasePage = BasePage;

function settarbar(detail = {}) {
	let page = getCurrentPages().slice(-1)[0] || {};
	let tab = page.getTabBar();
	if (tab) {
		if (typeof (detail.isHideTab) == "boolean" && tab.data.isHideTab != detail.isHideTab) {
			tab.setData({
				isHideTab: detail.isHideTab
			});
			return;
		}
		tab.setTab(detail);
		tab.setData({
			selected: tabBarHandler.tabbarKey[page.route]
		});
		// page.setData({
		// 	customTab: true,
		// 	customTabStyle:"customTab"
		// });
	}
}

export default BasePage
