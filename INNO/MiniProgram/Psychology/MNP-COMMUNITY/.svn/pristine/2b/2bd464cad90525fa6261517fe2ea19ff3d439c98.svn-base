<template>
  <view class="fun-assessment-detial">
    <template v-if="showLoading">
      <view class="loading-view flex-c-c">
        <loading-view></loading-view>
      </view>
    </template>
    <view v-show="!showLoading">
      <page-nav :isTransparent="true" mode="Close" :full="true"></page-nav>
      <view class="cover-image-area">
        <oriImage @load="loadCoverImage" customStyle="height: 500rpx;" :src="recordInfo.pictureList[0].picture" mode="aspectFill" />
      </view>
      <view id="detail-info" class="detail-info">
        <view class="font-46 bold detail-title">
          {{recordInfo.testName}}
        </view>
        <view class="font-26 C_7f detail-tips">
          {{recordInfo.quotation}}
        </view>
        <view class="splite">
          <image :src="staticAddress + splitIcon"></image>
        </view>
        <view class="content_box">
          <view class="content-title font-46 bold">{{recordInfo.name}}</view>
          <view class="content-tips font-26 C_7f">{{recordInfo.shortDesc}}</view>
          <text class="content">{{recordInfo.description}}</text>
          <view class="reminder">
            本测试为娱乐版，不具有专业测评功能，祝大家开心！
          </view>
        </view>
        <view style="height:140rpx"></view>
      </view>
      <view class="button-area flex-b-c">
        <view class="test-again-button flex-c-c"
          @click="redirectAction(`/pages/activities/fun-assessment/answer/answer?testId=${options.testId}`)">再测一次</view>
        <view class="share-button flex-c-c" @click="saveCanvas">
          <image :src="staticAddress + shareIcon" />
          <view>保存至手机</view>
        </view>
      </view>
      <canvas canvas-id="myCanvas" class="canvas-painter" :style="{'height':`${canvasHeight}px`}"></canvas>
    </view>
  </view>
</template>
<script>
  import SIH from "@/common/helper/sys-infos-handler"
  import oriImage from "@/components/ori-comps/image/ori-image";
  import LoadingView from '@/components/css3/loading/loading.vue';

  const app = getApp();
  const pageOption = Page.BasePage({
    data() {
      return {
        localImage: {
          testImage: '',
          splitIcon: ''
        },
        coverImageDetail: {
          width: 0,
          height: 0
        },
        canvasReady: false,
        paddingSave: false,
        showLoading: true,
        canvasPath: '',
        //**canvas信息 */ 
        imageHeight: 0,
        infoWidth: SIH.screenWidth,
        infoHeight: 0,
        inforTop: 0,
        //*************/
        splitIcon: "/fun-assessment/split-line.png",
        shareIcon: "/fun-assessment/share-button.png",
        navTop: SIH.navPlace,
        recordInfo: [],
        options: [],
      };
    },
    components: {
      LoadingView,
      oriImage,
    },
    computed: {
      canvasHeight() {
        let imageHeight = Number(this.imageHeight);
        let infoHeight = Number(this.infoHeight);
        return imageHeight + infoHeight
      }
    },
    onLoad(options) {
      this.options = options;
      this.imageHeight = this.caculatePx(500).toFixed(0)
    },
    onShow() {
      this.loadData().finally(() => {
        this.$nextTick(() => {
          setTimeout(() => {
            this.loadAllImage()
          }, 500);
        })
      })
    },
    onReady() {},
    // onShareAppMessage(e){},
    methods: {
      loadData() {
        return this.$Http(this.$Apis.getFunTestResultPage, {
          data: {
            recordId: this.options.recordId
          }
        }).then(res => {
          if (res.code == 1) {
            let data = res.data
            this.recordInfo = data;
            return data
          }
        })
      },
      loadCoverImage({
        detail
      }) {
        this.coverImageDetail = detail;
      },
      caculateInfoHeight() {
        this.createSelectorQueryById('detail-info').boundingClientRect(info => {
          console.log(info)
          this.infoHeight = info.height
          this.inforTop = info.top
          this.canvasReady = true
        }).exec()
      },
      createSelectorQueryById(id) {
        const query = uni.createSelectorQuery().in(this);
        return query.select(`#${id}`)
      },
      caculatePx(rpx) {
        return Number(SIH.getConvert(rpx, 'px'))
      },
      canvasToFile(canvasId) {
        let that = this;
        if (that.paddingSave) return
        that.paddingSave = true
        return uni.canvasToTempFilePath({
          canvasId,
          success(res) {
            uni.saveImageToPhotosAlbum({
              filePath: res.tempFilePath,
              success: function (res) {
                app.SMH.showToast({
                  title: "图片保存成功"
                });
                return res
              },
              fail() {
                console.log("调用保存照片失败")
                uni.showModal({
                  title: '图片保存失败',
                  content: '请确认是否已开启授权',
                  confirmText: '开启授权',
                  success(res) {
                    if (res.confirm) {
                      uni.openSetting({
                        success(settingdata) {
                          if (settingdata.authSetting["scope.writePhotosAlbum"]) {
                            uni.showToast({
                              title: '授权成功，请重新点击保存按钮~',
                              icon: "none"
                            });
                          } else {
                            uni.showToast({
                              title: '请确定已打开添加到相册权限',
                              icon: "none"
                            });
                          }
                        }
                      })
                    }
                  }
                })
              },
              complete() {
                that.paddingSave = false
                app.SMH.hideLoading()
              }
            });
          },
        }, that)
      },
      downfile(url) { //下载网络图片的promise对象
        return new Promise(function (resolve, reject) {
          uni.downloadFile({
            url: url,
            success: function (res) {
              resolve(res.tempFilePath)
            },
            fail: function (err) {
              resolve()
            }
          })
        })
      },
      loadAllImage() {
        var that = this;
        //网络图片一定要在后台小程序那设置服务器的域名  downloadFile合法域名
        var topicImage = that.recordInfo.pictureList[0].picture
        var splite = that.staticAddress + that.splitIcon;

        var promise1 = that.downfile(topicImage);
        var promise2 = that.downfile(splite)
        Promise.all([
          promise1, promise2
        ]).then(res => {
          that.localImage.topicImage = res[0]
          that.localImage.splitIcon = res[1]
          return res;
        }).finally(() => {
          this.showLoading = false;
          setTimeout(() => {
            this.caculateInfoHeight()
          }, 200);
        })
      },
      //自适应高宽drwaImage
      drawImage(ctx, cont_w, cont_h, imgPath, imgWidth, imgHeight, x, y) {
        let dWidth = cont_w / imgWidth; // 展示区域宽度与图片的宽度比例
        let dHeight = cont_h / imgHeight; // 展示区域高度与图片的高度比例
        if (imgWidth > cont_w && imgHeight > cont_h || imgWidth < cont_w && imgHeight < cont_h) {
          if (dWidth > dHeight) {
            ctx.drawImage(imgPath, 0, (imgHeight - cont_h / dWidth) / 2, imgWidth, cont_h / dWidth, x, y, cont_w,
              cont_h)
          } else {
            ctx.drawImage(imgPath, (imgWidth - cont_w / dHeight) / 2, 0, cont_w / dHeight, imgHeight, x, y, cont_w,
              cont_h)
          }
        } else {
          if (imgWidth < cont_w) {
            ctx.drawImage(imgPath, 0, (imgHeight - cont_h / dWidth) / 2, imgWidth, cont_h / dWidth, x, y, cont_w,
              cont_h)
          } else {
            ctx.drawImage(imgPath, (imgWidth - cont_w / dHeight) / 2, 0, cont_w / dHeight, imgHeight, x, y, cont_w,
              cont_h)
          }
        }
      },
      formatCanvasText(str, width, rpx) {
        // 传入str：字符串，width：最大宽度，px：字体大小（传入单位rpx)

        // 画布总宽度 px单位
        let canvasWidth = width;
        // 字体大小 px单位
        let fontSize = this.caculatePx(rpx)
        // 每行所需字数 = 画布总宽度 / 单个字体大小
        let rowFontNum = Math.floor(canvasWidth / fontSize)
        // 字符串总长度
        let strLength = str.length
        // 所需行数 = 字符总长度 / 每行所需字数
        let rows = Math.ceil(strLength / rowFontNum)
        return {
          fontSize,
          rowFontNum,
          rows
        }
      },
      formatCanvasTextByClamp(str, width, rpx) {
        // 传入str：字符串，width：最大宽度，px：字体大小（传入单位rpx)

        // 画布总宽度 px单位
        let canvasWidth = width;
        // 字体大小 px单位
        let fontSize = this.caculatePx(rpx)
        // 每行所需字数 = 画布总宽度 / 单个字体大小
        let rowFontNum = Math.floor(canvasWidth / fontSize)

        // 过滤字体是否有\n
        let stringArr = str.split('\n')
        let formaStringArr = []
        stringArr.forEach((item, i) => {
          // 字符串总长度
          let strLength = item.length
          // 所需行数 = 字符总长度 / 每行所需字数
          let rows = Math.ceil(strLength / rowFontNum)
          if (!rows) {
            formaStringArr.push('')
          } else {
            for (let i = 1; i <= rows; i++) {
              formaStringArr.push(item.slice(rowFontNum * (i - 1), rowFontNum * i))
            }
          }
        })

        return {
          fontSize,
          rowFontNum,
          formaStringArr
        }
      },
      saveCanvas() {
        let that = this;
        if (!this.canvasReady) {
          app.SMH.showToast({
            title: '图片加载中，请稍后再试'
          })
          return
        }
        app.SMH.showLoading({
          title: '图片下载中...',
          mask: true
        })

        let recordInfo = that.recordInfo;
        let localImage = that.localImage
        let infoWidth = Number(that.infoWidth)
        let imageHeight = Number(that.imageHeight)
        let canvasHeight = Number(that.canvasHeight)
        const ctx = uni.createCanvasContext('myCanvas', that)

        ctx.setFillStyle('white')
        ctx.fillRect(0, 0, infoWidth, canvasHeight)

        // 绘制顶部图片

        ctx.save()
        // ctx.drawImage(localImage.topicImage, 0, 0, infoWidth, imageHeight)
        that.drawImage(ctx, infoWidth, imageHeight, localImage.topicImage, that.coverImageDetail.width, that
          .coverImageDetail.height, 0, 0)
        ctx.restore()


        // 绘制标题
        ctx.save()
        let titleWidth = infoWidth - that.caculatePx(53) * 2
        let title = that.formatCanvasText(recordInfo.testName, titleWidth, 46)
        let titleTop = imageHeight + that.caculatePx(52)
        let titleRowTop = 0;
        for (let i = 0; i <= title.rows; i++) {
          titleRowTop = titleTop + i * that.caculatePx(66)
          ctx.setFontSize(title.fontSize)
          ctx.setFillStyle('#000000');
          ctx.setTextAlign('center')
          ctx.fillText(recordInfo.testName.slice(title.rowFontNum * (i - 1), title.rowFontNum * i), infoWidth / 2,
            titleRowTop)
          ctx.fillText(recordInfo.testName.slice(title.rowFontNum * (i - 1), title.rowFontNum * i), (infoWidth /
              2) + 0.5,
            titleRowTop)
        }
        ctx.restore()

        // 绘制tips
        ctx.save()
        let tipsWidth = infoWidth - that.caculatePx(53) * 2
        let tips = that.formatCanvasText(recordInfo.quotation, tipsWidth, 26)
        let tipsTop = titleRowTop + that.caculatePx(29)
        let tipsRowTop = 0;
        for (let i = 0; i <= tips.rows; i++) {
          tipsRowTop = tipsTop + i * that.caculatePx(32)
          ctx.setFontSize(tips.fontSize)
          ctx.setFillStyle('#7f7f7f');
          ctx.setTextAlign('center')
          ctx.fillText(recordInfo.quotation.slice(tips.rowFontNum * (i - 1), tips.rowFontNum * i), infoWidth / 2,
            tipsRowTop)
        }
        ctx.restore()

        // 绘制分割线
        ctx.save()
        ctx.drawImage(localImage.splitIcon, 0, tipsRowTop + that.caculatePx(50), infoWidth, that.caculatePx(
          40))
        ctx.restore()


        // 绘制小标题
        ctx.save()
        let smTitleWidth = infoWidth - that.caculatePx(53) * 2
        let smTitle = that.formatCanvasText(recordInfo.name, smTitleWidth, 46)
        // 50的上边距
        let smallTitleTop = tipsRowTop + that.caculatePx(50) + that.caculatePx(50);
        let smallTitleRowTop = 0;
        for (let i = 0; i <= smTitle.rows; i++) {
          smallTitleRowTop = smallTitleTop + i * that.caculatePx(52)
          ctx.setFontSize(smTitle.fontSize)
          ctx.setFillStyle('#000000');
          ctx.setTextAlign('center')
          ctx.fillText(recordInfo.name.slice(smTitle.rowFontNum * (i - 1), smTitle.rowFontNum * i), infoWidth / 2,
            smallTitleRowTop)
          ctx.fillText(recordInfo.name.slice(smTitle.rowFontNum * (i - 1), smTitle.rowFontNum * i), (infoWidth /
              2) + 0.5,
            smallTitleRowTop)
        }
        ctx.restore()


        // 绘制副标题
        ctx.save()

        let smTipsWidth = infoWidth - that.caculatePx(53) * 2
        let smTips = that.formatCanvasText(recordInfo.shortDesc, smTipsWidth, 26)
        // 20的上边距
        let smallTipsTop = smallTitleRowTop + that.caculatePx(20);
        let smallTipsRowTop = 0;
        for (let i = 0; i <= smTips.rows; i++) {
          smallTipsRowTop = smallTipsTop + i * that.caculatePx(32)
          ctx.setFontSize(smTips.fontSize)
          ctx.setFillStyle('#7F7F7F');
          ctx.setTextAlign('center')
          ctx.fillText(recordInfo.shortDesc.slice(smTips.rowFontNum * (i - 1), smTips.rowFontNum * i), infoWidth /
            2,
            smallTipsRowTop)
        }
        ctx.restore()

        // 绘制文章
        ctx.save()
        let textCtxWidth = infoWidth - that.caculatePx(53) * 2
        let textCtxClamp = that.formatCanvasTextByClamp(recordInfo.description, textCtxWidth, 30)
        // 65的上边距
        let textCtxTop = smallTipsRowTop + that.caculatePx(65);
        let textCtxRowTop = 0;
        let formaStringArr = textCtxClamp.formaStringArr;
        for (let i = 0; i < formaStringArr.length; i++) {
          textCtxRowTop = textCtxTop + i * that.caculatePx(55)
          ctx.setFontSize(textCtxClamp.fontSize)
          ctx.setFillStyle('#000000');
          ctx.setTextAlign('left')
          ctx.fillText(formaStringArr[i], this.caculatePx(65), textCtxRowTop)
        }
        ctx.restore()

        // 绘制提醒语
        ctx.save()
        let rememberWidth = infoWidth - that.caculatePx(53) * 2
        // 绘制提醒语分割线
        let rememberSplitTop = textCtxRowTop + that.caculatePx(95);
        // ctx.setLineWidth(1)
        // ctx.setStrokeStyle('#EFEFEF')
        // ctx.moveTo(0,rememberSplitTop)        
        // ctx.lineTo(rememberWidth,rememberSplitTop)
        ctx.beginPath()
        ctx.setStrokeStyle('#EFEFEF')
        // ctx.setLineWidth(1)
        ctx.moveTo(that.caculatePx(53), rememberSplitTop)
        ctx.lineTo(rememberWidth + that.caculatePx(53), rememberSplitTop)
        ctx.stroke()

        let rememberTipsTop = rememberSplitTop + that.caculatePx(40);
        ctx.setFontSize(that.caculatePx(18))
        ctx.setFillStyle('#787878');
        ctx.setTextAlign('left')
        ctx.fillText('本测试为娱乐版，不具有专业测评功能，祝大家开心！', that.caculatePx(53), rememberTipsTop)

        ctx.restore()

        ctx.draw(false, () => {
          // 冷却一秒钟避免样式出现错乱
          let time = setTimeout(() => {
            that.canvasToFile('myCanvas')
            clearTimeout(time)
          }, 1000);
        })

        console.log(ctx, 'ctx')

      }
    },
  });
  export default pageOption
</script>
<style lang="scss" scoped>
  .loading-view {
    position: fixed;
    z-index: 99;
    left: 0;
    top: 0;
    width: 100%;
    min-height: 100vh;
    background: #FFFFFF;
  }

  .fun-assessment-detial {
    width: 100%;
    min-height: 100vh;
  }

  .cover-image-area {
    position: sticky;
    left: 0;

    .cover-image {
      width: 100%;
      height: 500rpx;
    }
  }

  .detail-info {
    background: #FFFFFF;
    position: absolute;
    top: 500rpx;
    width: 100%;
    box-sizing: border-box;
    overflow: hidden;

    .detail-title {
      text-align: center;
      padding: 52rpx 56rpx 0rpx;
    }

    .detail-tips {
      text-align: center;
      padding: 29rpx 56rpx 0rpx;
    }

    .splite {
      display: flex;
      justify-content: center;
      align-items: center;
      margin: 50rpx 0;

      &>image {
        width: 100%;
        height: 40rpx;
      }
    }

    .content_box {
      padding: 0 65rpx 65rpx;
      width: 100%;
      box-sizing: border-box;

      .content-title {
        text-align: center;
        margin-bottom: 20rpx;
      }

      .content-tips {
        text-align: center;
        margin-bottom: 65rpx;
      }

      .content {
        display: block;
        width: 100%;
        text-align: justify;
        font-size: 30rpx;
        font-family: PingFangSC-Semibold, PingFang SC;
        // font-weight: 600;
        color: #222222;
        line-height: 55rpx;
      }

      .reminder {
        margin-top: 95rpx;
        padding-top: 25rpx;
        border-top: 1px solid #EFEFEF;
        font-size: 18rpx;
        color: #787878;
      }
    }
  }

  .canvas-painter {
    width: 100%;
    position: fixed;
    top: 999999999px;
    left: 0;
    opacity: 0;
    z-index: -1;
  }

  .button-area {
    position: fixed;
    bottom: 0;
    width: 100%;
    height: 140rpx;
    padding: 0 60rpx 0 48rpx;
    box-sizing: border-box;
    background: #FFFFFF;

    .test-again-button {
      width: 398rpx;
      height: 100rpx;
      background: #35952E;
      border-radius: 50rpx;
      color: #FFFFFF;
      font-size: 30rpx;
      font-family: PingFangSC-Regular, PingFang SC;
    }

    .share-button {
      width: 227rpx;
      height: 100rpx;
      background: #FFFFFF;
      box-shadow: 0px 2px 10px 0px rgba(0, 0, 0, 0.19);
      border-radius: 50rpx;
      color: #222222;
      font-size: 24rpx;


      // background: #FFFFFF;
      // border-radius: 50%;
      // box-shadow: 0px 2px 10px 0px rgba(0, 0, 0, 0.19);
      &>image {
        width: 31rpx;
        height: 35rpx;
        margin-right: 14rpx;
      }
    }
  }
</style>