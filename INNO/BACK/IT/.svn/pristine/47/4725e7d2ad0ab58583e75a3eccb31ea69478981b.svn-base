<template>
    <div class="bg-page cev-root spin-box flex-column">
        <div class="cev-root bg-shadow padding10 flex-auto tabs-box">
            <div class="edit-body cev-max-width">
                <EditItem name="奖项名称" label="必填">
                    <Input slot="edit" size="large" v-model="ruleName" clearable/>
                </EditItem>
                <EditItem name="开奖类型" label="必填">
                    <Select slot="edit" size="large" v-model="ruleType" >
                        <Option v-for="item in ruleTypeList" :value="item.value" :key="item.label">{{ item.label }}</Option>
                    </Select>
                </EditItem>
                <EditItem name="开奖规则" label="必填">
                    <div slot="edit">
                        <div v-if="ruleType == 'COUPON'">
                            <Upload action="/"
                            :show-upload-list="false"
                            :before-upload="handleBeforeUpload"
                            >
                                <Button icon="ios-cloud-upload-outline">{{ couponFile.name || "导入券码" }}</Button>
                            </Upload>
                            <a href="#" >下载模板</a>
                        </div>
                        <div v-else-if="ruleType == 'GOODS'" class="flex-">
                            <Checkbox size="large" :value="checkAllRule" @click.prevent.native="handleCheckAll">全选</Checkbox>
                            <CheckboxGroup v-model="specIds">
                                <Checkbox size="large" v-for="item in goodsRuleList" :label="item.id" :key="item.id">{{ item.specName }}</Checkbox>
                            </CheckboxGroup>
                        </div>
                    </div>
                </EditItem>
                <EditItem name="使用方式" label="必填">
                    <div slot="edit">
                        <Input size="large" placeholder="" v-model="usageTips" clearable />
                    </div>
                </EditItem>
                <EditItem name="奖品等级" label="必填">
                    <div slot="edit">
                        <Select size="large" v-model="prizeLevel" >
                            <Option v-for="item in prizeLevelList" :value="item.id" :key="item.id">{{ item.value }}</Option>
                        </Select>
                    </div>
                </EditItem>
                <EditItem name="富文本" label="必填">
                    <div slot="edit">
                        <Editor ref="editor" v-model="ruleDetail"></Editor>
                    </div>
                </EditItem>
            </div>
        </div>
        <div class="bg-bottom-toolbar flex-fixed padding10">
            <div class="cev-toolbar end cev-max-width">
                <Button size="large" type="default" @click.native="back">返回</Button>
                <Button size="large" type="primary" @click.native="submit">保存</Button>
            </div>
        </div>
        <Spin v-if="loading" class="spin" size="large" fix></Spin>
    </div>
</template>
<script>
import EditItem from "@/support/components/edit-item";
import { MainApi } from "../../../../helper/manager/http-manager";
import StringHelper from "@/helper/utils/string-util";
import Editor from "@/components/editor/index";
import Conf from "@/config";
export default {
    name: "RuleEdit",
    data() {
        return {
            loading: false,
            ruleName: "",
            ruleType: "COUPON",
            ruleTypeList: [
                {
                    value: "COUPON",
                    label: "优惠券"
                },
                {
                    value: "GOODS",
                    label: "购买权"
                }
            ],
            prizeLevelList: [
                {
                    id: "1",
                    value: "一等奖"
                },
                {
                    id: "2",
                    value: "二等奖"
                },
                {
                    id: "3",
                    value: "三等奖"
                }
            ],
            prizeLevel: "",
            checkAllRule: false,
            goodsRuleList: [],
            usageTips: "",
            specIds: [],
            ruleDetail: "",
            ruleFile: null,
            couponFile: {}
        };
    },
    components: { EditItem, Editor },
    mounted() {
        this.initParam();
     },
    computed: { },
    methods: {
        initParam() {
            let query = this.$route.query || {};
            this.ruleId = query.ruleId || 0;
            this.actId = query.actId || 0;
            this.getSpecList(query.actId).finally(() => {
                this.getRuleDetail(query.ruleId);
            });
        },
        check() {
            let warn = "";
            if (!StringHelper.trim(this.ruleName)) {
                warn = "奖项名称不能为空";
            } else if (!StringHelper.trim(this.ruleType)) {
                warn = "开奖类型不能为空";
            } else if (this.ruleType === "COUPON" && !this.couponFile) {
                warn = "请导入券码";
            } else if (this.ruleType === "GOODS" && this.specIds.length === 0) {
                warn = "请勾选开奖规则";
            } else if (!StringHelper.trim(this.usageTips)) {
                warn = "请输入使用方式";
            } else if (!StringHelper.trim(this.prizeLevel)) {
                warn = "请输入奖品等级";
            };
            if (warn) {
                this.showError(warn);
                return false;
            }
            if (this.ruleType === "COUPON") {
                this.specIds = [];
            }
            if (this.ruleType === "GOODS") {
                this.couponFile = null;
            }
            return true;
        },
        showError(err) {
            this.$Message.error(err);
        },
        handleCheckAll() {
            if (this.checkAllRule) {
                this.specIds = [];
                this.checkAllRule = false;
            } else {
                let result = [];
                for (let i = 0; i < this.goodsRuleList.length; i++) {
                   result.push(this.goodsRuleList[i].id);
                }
                this.specIds = result;
                this.checkAllRule = true;
            }
        },
        getRuleDetail(id) {
            if (!(parseInt(id) > 0)) return;
            this.loading = true;
            return MainApi.getRule({
                params: {
                    id: id
                }
            })
                .then(res => {
                    if (res.code === "1") {
                        console.log("res", res);
                        let data = res.data || {};
                        this.ruleName = data.ruleName || "";
                        this.prizeLevel = data.level || "";
                        this.ruleType = data.ruleType || "";
                        this.specIds = [];
                        this.usageTips = (data.ruleExpand && data.ruleExpand.usageTips) || "";
                        this.ruleDetail = (data.detailInfo && data.detailInfo.detail) || "";
                        if (this.goodsRuleList.length > 0) {
                            let specList = data.specList || [];
                            for(let i = 0; i < specList.length; i++){
                                this.specIds.push(specList[i].specId)
                            }
                            this.checkAllRule = this.specIds.length === this.goodsRuleList.length;
                        }
                    } else {
                        return Promise.reject(res.msg);
                    }
                })
                .catch(msg => {
                    if (StringHelper.trim(msg)) {
                        this.$Message.error(msg || "数据加载失败");
                    }
                })
                .finally(() => {
                    this.loading = false;
                });
        },
        getSpecList(actId) {
            if (!(parseInt(actId) > 0)) return;
            return MainApi.getSpecList({
            params: {
                    activityId: actId
                }
            }).then(res => {
                if (res.code === "1") {
                    let data = res.data || [];
                    this.goodsRuleList = data;
                }
            });
        },
        handleBeforeUpload(file) {
            this.couponFile = file;
        },
        submit() {
            if (!this.check()) {
                return;
            }
            this.loading = true;
            let param = new FormData();
            param.append("ruleName", this.ruleName);
            param.append("level", this.prizeLevel);
            param.append("ruleType", this.ruleType);
            param.append("specIds", this.specIds.join(","));
            param.append("usageTips", this.usageTips);
            param.append("detail", encodeURIComponent(this.ruleDetail));
            param.append("file", this.couponFile);
            param.append("brandCode", Conf.BRAND_CODE);
            let req = null;
            if (parseInt(this.ruleId) > 0) {
                req = MainApi.updateLotteryRule;
                param.append("id", this.ruleId);
            } else {
                req = MainApi.addLotteryRule;
                param.append("isMain", 0);
                param.append("activityId", this.actId);
            }
            return req({
                data: param
            })
                .then(res => {
                    if (res.code === "1") {
                        this.$Message.success(res.msg || "提交成功");
                        this.$router.back();
                    } else {
                        return Promise.reject(res.msg);
                    }
                })
                .catch(msg => {
                    if (StringHelper.trim(msg)) {
                        this.$Message.error(msg || "数据加载失败");
                    }
                })
                .finally(() => {
                    this.loading = false;
                });
        },
        back() {
            this.$router.back();
        }
    }
};
</script>

<style lang="less" scoped >
    .tabs-box {
        height: 100%;
        display: flex;
        flex-direction: column;
        overflow-y: scroll;
        > * {
            flex: none;
        }
    }
    .tabs {
        flex: 1;
        height: 100%;
        display: flex;
        flex-direction: column;
        .tabs-header {
            width: 100%;
            display: flex;
            border-bottom: 1px solid #efefef;
            .tabs-name {
                height: 40px;
                line-height: 40px;
                padding: 0 20px;
                cursor: pointer;
            }
            .tabs-name.selected {
                color: #2d8cf0;
                border-bottom: 2px solid #2d8cf0;
            }
        }
        .tabs-content-box {
            margin-top: 10px;
            position: relative;
            overflow: hidden;
            width: 100%;
            height: 100%;
            .tabs-content {
                position: absolute;
                display: flex;
                overflow: hidden;
                width: 100%;
                height: 100%;
                .tabs-page {
                    animation-duration: 0.3s;
                    position: absolute;
                    width: 100%;
                    height: 100%;
                    overflow: hidden;
                }
            }
        }
    }
</style>
