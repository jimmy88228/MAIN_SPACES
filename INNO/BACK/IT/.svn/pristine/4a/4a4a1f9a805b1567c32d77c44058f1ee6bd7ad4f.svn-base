<template>
    <div class="bg-page cev-root spin-box flex-column">
        <div class="cev-root bg-shadow padding10 flex-auto tabs-box">
            <div class="tabs">
                <Tabs value="base" type="card">
                    <TabPane label="基础设置" name="base" >
                        <div class="tabs-page">
                            <div class="edit-body cev-max-width">
                                <div class="edit-title">活动信息</div>
                                <EditItem name="活动主图" label="必填">
                                    <div slot="edit">
                                        <UploadImage type="ACTIVITY" single :imgs.sync="actInfo.picture" />
                                    </div>
                                </EditItem>
                                <EditItem name="活动名称" label="必填">
                                    <Input slot="edit" size="large" v-model="actInfo.name" clearable/>
                                </EditItem>
                                <EditItem name="活动时间" label="必填">
                                    <DatePicker slot="edit" :options="options" type="datetimerange" v-model="timeRange" placeholder="选择活动时间" style="width: 350px"></DatePicker>
                                </EditItem>
                                <EditItem name="展示状态" label="必填">
                                    <RadioGroup slot="edit" v-model="actInfo.showType" size="large">
                                        <Radio :label="item.id" v-for="(item, index) in showStatusList" :key="index">{{ item.label }}</Radio>
                                    </RadioGroup>
                                </EditItem>
                                <EditItem name="关注公众号" label="必填">
                                    <RadioGroup slot="edit" size="large" v-model="actInfo.wxFollowMode">
                                        <Radio :label="item.id" v-for="(item, index) in followStatusList" :key="index">{{ item.label }}</Radio>
                                    </RadioGroup>
                                </EditItem>
                                <EditItem name="活动规则" label="必填">
                                    <Select slot="edit" style="width:100px;" v-model="actInfo.ruleArticleId">
                                        <Option :value="item.id" v-for="(item, index) in ruleList" :key="index">{{ item.name }}</Option>
                                    </Select>
                                </EditItem>
                                <EditItem name="关联广告位">
                                    <Select slot="edit" style="width:100px;" v-model="actInfo.layoutId">
                                        <Option :value="item.layoutId" v-for="(item, index) in LayoutList" :key="index">{{ item.name }}</Option>
                                    </Select>
                                </EditItem>
                                <div class="edit-title">登记信息</div>
                                <EditItem name="填写项" description="勾选后用户在抽签时需填写该项">
                                    <CheckboxGroup v-model="fillVals" slot="edit">
                                        <Checkbox size="large" v-for="(item, index) in fillInList" :label="index" :key="index">{{ item.questionTitle }}</Checkbox>
                                    </CheckboxGroup>
                                </EditItem>
                                <EditItem name="发售店铺">
                                    <div slot="edit">
                                        <div>
                                            <div class="store_item margin10" v-for="(item, index) in storeList.list" :key="index">
                                                <Input size="large" v-model="storeList.list[index]" clearable/>
                                                <Icon size="20" type="ios-close-circle" class="close-icon" @click="addDelStore(index)" />
                                            </div>
                                        </div>
                                        <Button class="m-top10" type="default" @click="addDelStore()">添加店铺</Button>
                                    </div>
                                </EditItem>
                                <EditItem name="商品信息" >
                                    <div slot="edit">
                                        <div>
                                            <Button type="default" @click="addSpecType" :disabled="specList.length > specLimit">添加类型</Button>
                                        </div>

                                        <CellGroup>
                                            <div v-for="(specItem, specIndex) in specList" :key="specIndex" class="spec-group">
                                                <Card>
                                                    <div class="spec-area flex- w-s-nowrap" slot="title">
                                                        规格名：<Input placeholder="规格名" style="width:120px;" v-model="specItem.specTitle"  @on-blur="syncInputSpec(specIndex, null, specItem.specTitle)"/>
                                                    </div>
                                                    <div class="w-s-nowrap">规格值：</div>
                                                    <div class="flex- s-val-area">
                                                        <div class="s-val-box flex-">
                                                            <span class="spec-box" v-for="(sValItem, sValIndex) in specItem.valueList" :key="sValIndex">
                                                                <Input placeholder="添加规格" style="width:120px;" v-model="sValItem.specValue" @on-blur="syncInputSpec(specIndex, sValIndex, sValItem.specValue)"/>
                                                                <Icon size="20" type="ios-close-circle" class="close-icon" @click="removeSpec(specIndex, sValIndex)"/>
                                                            </span>
                                                        </div>
                                                        <Button type="default" @click="addSpecVal(specIndex)" class="flex-s0">添加规格值</Button>
                                                    </div>
                                                    <Icon size="20" type="ios-close-circle" class="close-icon" @click="removeSpec(specIndex)" />
                                                </Card>
                                            </div>
                                        </CellGroup>
                                    </div>
                                </EditItem>
                                <EditItem name="规格明细" >
                                    <div slot="edit" class="spec-detail">
                                        <Table ref="table" class="table" :columns="columns" :data="productList" border :span-method="handleSpan">
                                            <template slot="prizeAction" slot-scope="{ row, index }">
                                                <Input placeholder="请填写价格" style="width:120px;" v-model="productList[index].price" />
                                            </template>
                                            <template slot="action" slot-scope="{ row, index }">
                                                <i-switch v-model="productList[index].enable" :true-value="1" :false-value="0" >
                                                    <span slot="open">开</span>
                                                    <span slot="close">关</span>
                                                </i-switch>
                                            </template>
                                        </Table>
                                    </div>
                                </EditItem>
                            </div>
                        </div>
                    </TabPane>
                    <TabPane label="活动详情" name="detail">
                        <div class="tabs-page">
                            <div class="edit-body cev-max-width">
                                <EditItem name="顶部轮播图">
                                    <div slot="edit">
                                        <UploadImage type="ACTIVITY" :single="false" :imgs.sync="pictureList" :imgChange.sync="imgChangeInfo" />
                                    </div>
                                </EditItem>
                                <EditItem name="活动详情">
                                    <div slot="edit">
                                        <Editor ref="editor" v-model="actInfo.activityDetail"></Editor>
                                    </div>
                                </EditItem>
                            </div>
                        </div>
                    </TabPane>
                </Tabs>
            </div>
        </div>
        <div class="bg-bottom-toolbar flex-fixed padding10">
            <div class="cev-toolbar end cev-max-width">
                <Button size="large" type="default" @click.native="back">返回</Button>
                <Button size="large" type="primary" @click.native="submit">保存</Button>
            </div>
        </div>
        <Spin v-if="loading" class="spin" size="large" fix></Spin>
    </div>
</template>
<script>
import EditItem from "@/support/components/edit-item";
import { MainApi } from "@/helper/manager/http-manager";
import Editor from "@/components/editor/index";
import StringHelper from "@/helper/utils/string-util";
import MyDate from "@/helper/utils/date-util";
import UploadImage from "@/components/upload-img-group";
import ListPageMixin from "@/helper/mixin/list-page";
import Mixin from "./mixin";

export default {
    name: "ActvityEdit",
    mixins: [ListPageMixin, Mixin],
    data() {
        return {
            isTest: false,
            loading: false,
            data: null,
            oldNowTabs: 0,
            nowTabs: 0,
            options: {
                disabledDate (date) {
                    return false; // date && date.valueOf() < Date.now();
                }
            },
            showStatusList: [
                { id: 0, label: "不展示" },
                { id: 1, label: "展示" },
                { id: 2, label: "测试环境展示" }
            ],
            followStatusList: [
                { id: 2, label: "强制关注" },
                { id: 1, label: "引导关注" },
                { id: 0, label: "关闭" }
            ],
            fillVals: [],
            fillInList: {
                userName: { questionTitle: "姓名" },
                mobilePhone: { questionTitle: "手机" },
                idCard: { questionTitle: "身份证" }
            },
            LayoutList: [],
            ruleList: [],
            inputStore: "",
            storeList: {
                list: []
            },
            actInfo: { // 保存数据
                extraCodeCount: 2,
                shareNeedNums: 1,
                sort: 0,
                ruleArticleId: "",
                specList: [],
                productList: [],
                pictureList: [],
                activityDetail: ""
            },
            pictureList: [],
            submitPics: [],
            productList: [],
            productJson: {},
            specList: [], // （specId 等于 0 表示新增 ，specId 等于 0 表示新增） 大于0根据editType决定操作；editType：编辑类型（0：不做变更  1：更改信息  2：删除）
            specLimit: 2
        };
    },
    components: { EditItem, Editor, UploadImage },
    mounted() {
        this.initParam();
        this.getLayoutList();
        this.getRuleList();
        this.loadData();
    },
    computed: {
        timeRange: {
            get() {
                return [this.actInfo.startTime, this.actInfo.endTime];
            },
            set(val) {
                this.actInfo.startTime = (val[0] && MyDate.format(val[0])) || "";
                this.actInfo.endTime = (val[1] && MyDate.format(val[1])) || "";
            }
        }
    },
    watch: {
       specList: {
           handler: function(val) {
                if (val instanceof Array) {
                    initColumns.call(this, val);
                    getProduct.call(this, val);
                }
           },
           deep: true
       },
       productList: {
            handler: function(val) {
                let productJson = getJsonByIdIndex.call(this, val);
                initActProduct.call(this, productJson);
           },
           deep: true
       },
       pictureList: {
           handler: function(val) {
                let CInfo = this.imgChangeInfo || {};
                let submitPics = this.submitPics || {};
                if ((CInfo.nIndex + "") && (CInfo.oIndex + "")) {
                    let nitem = submitPics[CInfo.nIndex];
                    let oitem = submitPics[CInfo.oIndex];
                    let addNitem = JSON.parse(JSON.stringify(nitem));
                    let addOitem = JSON.parse(JSON.stringify(oitem));
                    if (nitem.id) { nitem.id = 0; }
                    if (oitem.id) { oitem.id = 0; }
                    submitPics.splice(CInfo.nIndex, 1, oitem);
                    submitPics.splice(CInfo.oIndex, 1, nitem);
                    if (addNitem.id) {
                        delete addNitem.picture;
                        submitPics.push(addNitem);
                    }
                    if (addOitem.id) {
                        delete addOitem.picture;
                        submitPics.push(addOitem);
                    }
                } else if ((CInfo.nIndex + "")) {
                    let delItem = {};
                    if (CInfo.type === "del") {
                        delItem = submitPics.splice(CInfo.nIndex, 1);
                    } else {
                        delItem = submitPics.splice(CInfo.nIndex, 1, { id: 0, picture: val[CInfo.nIndex] });
                    }
                    if (delItem[0].id) {
                        delete delItem[0].picture;
                        submitPics.push(delItem[0]);
                    }
                } else {
                    submitPics.push(this.actId ? { id: 0, picture: val[val.length - 1] } : val[val.length - 1]);
                }
                this.submitPics = submitPics;
           }
       }
    },
    methods: {
        selectTab(index) {
            this.oldNowTabs = this.nowTabs;
            this.nowTabs = index;
        },
        initParam() {
            let query = this.$route.query || {};
            this.actId = query.actId || 0;
        },
        handleSpan ({ row, column, rowIndex, columnIndex }) {
            if (!(columnIndex < this.specList.length)) {
                return [1, 1];
            }
            let lines = this.occupyLine[columnIndex];
            if (rowIndex % lines === 0) {
                return [lines, 1];
            } else {
                return [0, 0];
            }
        },
        check() {
            let actInfo = this.actInfo || {};
            let storeList = this.storeList || {};
            let fillVals = this.fillVals || [];
            let specList = this.specList || [];
            let warn = "";
            if (!StringHelper.trim(actInfo.picture)) {
                warn = "请上传活动主图";
            } else if (!StringHelper.trim(actInfo.name)) {
                warn = "请输入活动名称";
            } else if (!StringHelper.trim(actInfo.startTime) || !StringHelper.trim(actInfo.endTime)) {
                warn = "请选择活动时间";
            } else if (typeof (actInfo.showType) === "undefined") {
                warn = "请设置活动展示状态";
            } else if (typeof (actInfo.wxFollowMode) === "undefined") {
                warn = "请设置是否关注公众号";
            } else if (fillVals.length === 0) {
                warn = "至少选择一个填写项";
            } else if (!storeList.list || storeList.list.length === 0) {
                warn = "至少增加一个店铺";
            } else if (specList.length === 0 || specList[0].valueList.length === 0) {
                warn = "至少增加一个规格";
            } else if (!this.pictureList || this.pictureList.length === 0) {
                warn = "至少增加一个轮播图";
            }
            if (warn) {
                this.$Message.warning(warn);
                return false;
            }
            return true;
        },
        getChangeImgIndex(nIndex, oIndex) {},
        getLayoutList() {
            return MainApi.getLayoutList({
                data: {
                    stime: "",
                    etime: "",
                    pageIndex: 1,
                    pageSize: 100,
                    keywords: "",
                    orderBy: ""
                }
            }).then(res => {
                if (res.code === "1") {
                    let list = (res.data && res.data.list) || [];
                    list.splice(0, 0, {layoutId: 0, name: "请选择"});
                    this.LayoutList = list;
                } else {
                    return Promise.reject(res.msg);
                }
            }).catch(msg => {});
        },
        getRuleList() {
            this.loading = true;
            return MainApi.postArticleList({
                data: {
                    stime: "",
                    etime: "",
                    pageIndex: 1,
                    pageSize: 100,
                    keywords: "",
                    orderBy: ""
                }
            }).then(res => {
                if (res.code === "1") {
                    let list = (res.data && res.data.list) || [];
                    list.splice(0, 0, {id: 0, name: "请选择"});
                    this.ruleList = list;
                } else {
                    return Promise.reject(res.msg);
                }
            })
            .catch(msg => {
                this.$Message.error(msg || "数据加载失败");
            })
            .finally(() => {
                this.loading = false;
            });
        },
        loadData(actId) {
            actId = parseInt(this.actId) || actId;
            if (!parseInt(actId)) return;
            this.loading = true;
            return MainApi.getDrawActivityDetail({
                data: {
                    activityId: actId
                }
            }).then(res => {
                    if (res.code === "1") {
                        let data = res.data || {};
                        let question = data.question;
                        this.storeList = question.store || this.storeList;
                        delete question.store;
                        let fillVals = [];
                        for (let i in question) {
                            fillVals.push(i);
                        }
                        this.fillVals = fillVals;
                        this.actInfo = JSON.parse(JSON.stringify(data)) || {};
                        this.specList = JSON.parse(JSON.stringify(data.specList)) || [];
                        this.productJson = getJsonByIdIndex.call(this, data.productList);
                        this.pictureList = initPictureList.call(this, data.pictureList);
                    } else {
                        return Promise.reject(res.msg);
                    }
                })
                .catch(msg => {
                    if (StringHelper.trim(msg)) {
                        this.$Message.error(msg || "数据加载失败");
                    }
                })
                .finally(() => {
                    this.loading = false;
                });
        },
        addDelStore(index) {
            let list = this.storeList.list || [];
            if (typeof (index) !== "undefined") {
                list.splice(index, 1);
                this.storeList.list = list;
            } else {
                let len = list.length;
                list.splice(len, 0, "");
                this.storeList.list = list;
            }
        },
        addSpecType() {
            let specList = this.specList || [];
            if (specList.length > this.specLimit) return;
            let item = {
                editType: 0,
                specId: 0,
                specTitle: "",
                valueList: []
            };
            specList.push(item);
            let specL = JSON.parse(JSON.stringify(specList.length - 1));
            // 同步保存数据
            this.actInfo.specList.splice(specL, 0, JSON.parse(JSON.stringify(item)));
            this.actInfo.delAddSpec = true;
            initActProduct.call(this);
        },
        addSpecVal(specIndex) {
            let specList = this.specList || [];
            let item = {
                editType: 0,
                specValue: "",
                specValueId: 0,
                _specValueId: specList[specIndex].valueList.length + ""
            };
            specList[specIndex].valueList.push(item);
            let specValL = JSON.parse(JSON.stringify(specList[specIndex].valueList.length - 1));
            this.actInfo.specList[specIndex].valueList.splice(specValL, 0, item);
        },
        removeSpec(specIndex, valIndex) {
            if (typeof (specIndex) !== "undefined" && typeof (valIndex) !== "undefined") {
                this.specList[specIndex].valueList.splice(valIndex, 1);
                // 同步保存数据
                this.actInfo.specList[specIndex].valueList[valIndex].editType = 2;
                let delItem = this.actInfo.specList[specIndex].valueList.splice(valIndex, 1);
                this.actInfo.specList[specIndex].valueList.push(delItem[0]);
            } else if (typeof (specIndex) !== "undefined") {
                this.specList.splice(specIndex, 1);
                // 同步保存数据
                this.actInfo.specList[specIndex].editType = 2;
                let delItem = this.actInfo.specList.splice(specIndex, 1);
                this.actInfo.specList[specIndex].push(delItem[0]);
                initActProduct.call(this);
            }
            this.actInfo.delAddSpec = true;
        },
        syncInputSpec(specIndex, valIndex, val) {
            if (typeof (specIndex) !== "undefined" && (typeof (valIndex) !== "undefined" && valIndex != null)) {
                this.actInfo.specList[specIndex].valueList[valIndex].editType = 1;
                this.actInfo.specList[specIndex].valueList[valIndex].specValue = val;
            } else {
                this.actInfo.specList[specIndex].specTitle = val;
                this.actInfo.specList[specIndex].editType = 1;
            }
        },
        syncProuduct() {

        },
        submit() {
            if (!this.check()) {
                return;
            }
            let reqData = JSON.parse(JSON.stringify(this.actInfo)) || {};
            let storeList = this.storeList || {};
            let specList = this.specList || [];
            let fillInList = this.fillInList || {};
            let productList = this.productList || [];
            let question = {};
            question = getSubmitQuestion(fillInList, this.fillVals, reqData.question);
            question["store"] = storeList;
            reqData["question"] = question;
            reqData["pictureList"] = getSubmitPics.call(this, this.submitPics);
            if (parseInt(this.actId)) {
                let specProduct = getSubmitSpec.call(this, reqData.specList, reqData.delAddSpec);
                reqData["specList"] = specProduct.specList;
                reqData["productList"] = specProduct.productList;
                updateDrawActivityReq.call(this, reqData);
            } else {
                reqData["specList"] = specList;
                reqData["productList"] = productList;
               addDrawActvityReq.call(this, reqData);
            }
        },
        back() {
            this.$router.back();
        }
    }
};
function initPictureList(data){
    data = JSON.parse(JSON.stringify(data || []));
    let list = [];
    for (let i = 0; i < data.length; i++) {
        let picture = data[i].picture;
        list.push(picture);
    }
    this.submitPics = data || [];
    return list;
}
//
function getSubmitPics(data) {
    let list = [];
    for (let i = 0; i < data.length; i++) {
        if (!this.actId || (!data[i].id && data[i].picture) || (data[i].id && !data[i].picture)) {
            list.push(data[i]);
        }
    }
    return list;
}
//
function getProduct(specList = []) {
    let productList = loopData.call(this, 0, specList);
    let allL = productList.length;
    this.occupyLine = getOccupyLine(specList, allL);
    this.productList = productList;
}
function getJsonByIdIndex(data) {
    let productJson = {};
    for (let i = 0; i < data.length; i++) {
        let specList = data[i].specList || [];
        let productId = data[i].productId || 0;
        let price = data[i].price || 0;
        let enable = data[i].enable || 0;
        let key = "";
        for (let j = 0; j < specList.length; j++) {
            let id = specList[j].specValueId || specList[j]._specValueId;
            key = key ? key + "_" + id : id;
        }
        productJson[key] = {
            productId,
            price,
            enable
        };
    }
    return productJson;
}

function loopData(specI, specList, addItem = {}, result = [], type) {
    let specTitle = specList[specI].specTitle;
    let valueList = specList[specI].valueList || [];
    let nextValues = (specList[specI + 1] && specList[specI + 1].valueList) || [];
    for (let i = 0; i < valueList.length; i++) {
        let specValue = valueList[i].specValue;
        let specValueId = parseInt(valueList[i].specValueId);
        let _specValueId = valueList[i]._specValueId;
        let keyValueId = specValueId || _specValueId;
        let vEditType = parseInt(valueList[i].editType);
        let thisAddItem = JSON.parse(JSON.stringify(addItem));
        if (!type) thisAddItem["specItem" + specI] = specValue;
        if (!thisAddItem.key) {
            thisAddItem.key = [];
        }
        thisAddItem.key.push(keyValueId);
        if (!thisAddItem.specList) {
            thisAddItem.specList = [];
        }
        thisAddItem.specList.push({
            specTitle,
            specValue,
            specValueId,
            _specValueId
        });
        if (nextValues && nextValues.length > 0) { // 递归拼装数据
            loopData.call(this, (specI + 1), specList, thisAddItem, result, type);
        } else {
            let keyStr = thisAddItem.key.join("_");
            let defaultData = JSON.parse(JSON.stringify(this.productJson[keyStr] || {
                enable: 1,
                price: "",
                productId: 0
            }));
            if (type) delete thisAddItem.key;
            if (type === "ALL") defaultData.productId = 0;
            if (type === "FILTER" && (vEditType === 0 && specValueId === 0)) { break; }
            result.push({
                ...defaultData,
                ...thisAddItem
            });
        }
    }
    return result || [];
}
// 动态标题
function initColumns(specList = []) {
    let columns = [];
    let holdColumns = this.columns.splice(-2);
    for (let i = 0; i < specList.length; i++) {
        columns.push({
            title: specList[i].specTitle,
            align: "center",
            key: "specItem" + i
        });
    }
    this.columns = columns.concat(holdColumns);
}
// 获取该列占的行数
function getOccupyLine(specList, allL) {
    let occupyLine = {};
    let line = 1;
    let specL = specList.length;
    for (let i = 0; i < specL; i++) {
        let valueList = specList[i].valueList || [];
        if (i === (specL - 1)) {
            line = allL;
        } else {
            line *= valueList.length;
        }
        occupyLine[i] = (allL / line);
    }
    return occupyLine;
}
// 只清空编辑项
function initActProduct(holdData) {
    if (holdData) {
        this.productJson = {
            ...this.productJson,
            ...holdData
        };
    } else {
        this.productJson = {};
    }
}
function getSubmitQuestion(fillInList, fillVals, oldQuestion) {
    oldQuestion = (oldQuestion && JSON.parse(JSON.stringify(oldQuestion))) || {};
    let fillValsStr = fillVals ? "," + fillVals.join(",") + "," : "";
    let question = {};
    for (let i in fillInList) {
        let item = null;
        if (fillValsStr.indexOf(i) !== -1) {
            if (oldQuestion[i]) { // 存在
                item = oldQuestion[i];
            } else { // 新增
                item = {
                    questionId: 0,
                    ...fillInList[i]
                };
            }
        } else if (oldQuestion[i]) { // 删除
            item = { questionId: oldQuestion[i].questionId };
        }
        if (item) {
            question[i] = item;
        }
    }
    return question;
}
function getSubmitSpec(submitSpec, isDelAddSpec) {
    submitSpec = JSON.parse(JSON.stringify(submitSpec));
    let productList = [];
    let specList = [];
    // console.log("isDelAddSpec submitSpec", submitSpec)
    if (isDelAddSpec) {
       productList = loopData.call(this, 0, submitSpec, {}, [], "ALL");
       specList = submitSpec;
    } else {
        productList = loopData.call(this, 0, submitSpec, {}, [], "FILTER");
        for (let i = 0; i < submitSpec.length; i++) {
            let valueList = submitSpec[i].valueList || [];
            // let isChange = false;
            let items = [];
            for (let j = 0; j < valueList.length; j++) {
                if (valueList[j].editType > 0) {
                    items.push(valueList[j]);
                }
            }
            submitSpec[i].valueList = items;
            if (items.length > 0) { // 存在修改
                submitSpec[i].editType = 1;
                specList.push(submitSpec[i]);
            }
        }
    }
    return {
        productList,
        specList
    };
}
function addDrawActvityReq(data) {
    this.loading = true;
    return MainApi.addDrawActivity({
        data: data
    }).then(res => {
            if (res.code === "1") {
                if (res.data) {
                    this.$Message.success("添加成功");
                    this.loadData(res.data);
                }
            } else {
                return Promise.reject(res.msg);
            }
        })
        .catch(msg => {
            if (StringHelper.trim(msg)) {
                this.$Message.error(msg || "数据加载失败");
            }
        })
        .finally(() => {
            this.loading = false;
        });
}
function updateDrawActivityReq(data) {
    if (!parseInt(this.actId)) return;
    this.loading = true;
    return MainApi.updateDrawActivity({
        data: data
    }).then(res => {
            if (res.code === "1") {
                if (res.data) {
                    this.$Message.success("编辑成功");
                    this.loadData(res.data);
                }
            } else {
                return Promise.reject(res.msg);
            }
        })
        .catch(msg => {
            if (StringHelper.trim(msg)) {
                this.$Message.error(msg || "数据加载失败");
            }
        })
        .finally(() => {
            this.loading = false;
        });
}
</script>

<style lang="less" scoped >
    .tabs-box {
        height: 100%;
        display: flex;
        flex-direction: column;
        > * {
            flex: none;
        }
    }
    .tabs {
        flex: 1;
        height: 100%;
        display: flex;
        flex-direction: column;
        .ivu-tabs-content{
            .ivu-tabs-tabpane{
                .tabs-page{
                    height:calc(100vh - 220px);
                    overflow-y: scroll;
                    overflow-x: hidden;
                    .close-icon{
                        position:absolute;
                        top:0px;
                        right:0px;
                        transform: translate(50%,-50%);
                        opacity: 0;
                        cursor: pointer;
                    }
                    .spec-group{
                        margin:10px 0px;
                        min-width:900px;
                        .ivu-card{
                            border:1px solid #efefef;
                        }
                        .s-val-area{
                            align-items: flex-start;
                            .s-val-box{
                                flex-wrap: wrap;
                                padding:0;
                            }
                        }
                        .spec-box{
                            position:relative;
                            margin-right:20px;
                            margin-bottom:10px;
                        }
                        .spec-box:hover{
                            .close-icon{
                                opacity: 1;
                            }
                        }
                    }
                    .spec-group:hover .ivu-card-body > .close-icon{
                        opacity: 1;
                    }
                    .spec-detail{
                        min-width:900px;
                    }
                    .store_item{
                        position: relative;
                    }
                    .store_item:hover{
                        .close-icon{
                            opacity: 1;
                        }
                    }
                }
            }
        }
    }
</style>
