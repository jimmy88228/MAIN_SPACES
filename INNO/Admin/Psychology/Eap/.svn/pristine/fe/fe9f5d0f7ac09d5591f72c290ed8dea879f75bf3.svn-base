<template>
    <div class="editor-main">
        <div class="main-content">
            <div class="content-left">
                <div class="content-view">
                    <editor-left-menu></editor-left-menu>
                </div>
            </div>
            <div class="content-middle">
                <div class="content-view" style="padding:0 6px;">
                    <editor-body :commonInfo="commonInfo" :compList="compList" :pageInfo="pageInfo" :pageType="pageType"></editor-body>
                </div>
            </div>
            <div class="content-right">
                <div class="content-view">
                    <editor-right-side :commonInfo="commonInfo" :compList="compList" :pageInfo="pageInfo" :canWeixin="canWeixin" :catList="catList"></editor-right-side>
                </div>
            </div>
        </div>
        <div class="main-footer">
            <Button @click="back">取消</Button>&nbsp;&nbsp;
            <Button type="primary" @click="save" v-hasAction="'personal_center_save'">确定</Button>
        </div>
    </div>
</template>

<script>
/**
 * 站点页面编辑器，主框架
 */
import editorLeftMenu from "./editor-left-menu";
import editorRightSide from "./editor-right-side";
import editorBody from "./editor-body";

export default {
    name: "editorMain",
    components: {
        // editorHeader,
        editorLeftMenu,
        editorRightSide,
        editorBody,
    },
    props: {
        showHeader: {
            type: Boolean,
            default: true,
        },
        // 自定义页面的类型
        pageType: {
            type: String,
            default: "NONE",
        },
    },
    data() {
        return {
            pageId: 0,
            goodsId: 0,
            // ueditor 命令对象
            ueditorObj: {},

            compList: [],
            pageInfo: {},
            catList: [],
            canWeixin: false,

            commonInfo:{
                curIndex:-1
            }
        };
    },
    computed: {},
    methods: {
        initData(data) {
            /**
             * pageInfo : setting(页面配置)  layout_type(MINE 个人中心， NONE 普通自定义页面)
             *  get_module: setting(模块静态配置)， dynamic_setting(模块动态配置)， module_data(模块数据)
             */
            let pageInfo = data || {};
            try {
                pageInfo.setting =
                    typeof pageInfo.setting == "string"
                        ? JSON.parse(pageInfo.setting)
                        : pageInfo.setting || {};
            } catch (error) {
                pageInfo.setting = {};
            }
            pageInfo.get_module = pageInfo.get_module || [];
            let get_module = pageInfo.get_module;
            delete pageInfo.get_module;
            this.canWeixin = data.canWeixin || true;
            this.pageInfo = pageInfo;
            console.log("pageInfo", JSON.parse(JSON.stringify(pageInfo)))
            console.log("get_module", JSON.parse(JSON.stringify(get_module)))
            get_module.map((item) => {
                item.setting = initJson(item.setting);
                item.dynamic_setting = initJson(item.dynamic_setting);
                item.module_data = initJson(item.module_data);
            });
            if (!this.pageInfo.layout_type) {
                this.pageInfo.layout_type = this.pageType;
            }
            this.compList = get_module;
            console.log('初始化',this.compList,this.pageInfo)
        },
        save() {
            let compPageInfo = JSON.parse(JSON.stringify(this.pageInfo))
            let pageCompList = JSON.parse(JSON.stringify(this.compList))
            compPageInfo.setting = JSON.stringify(compPageInfo.setting);
            pageCompList.map((item, index) => {
                item.sort = index + 1;
                item.setting = JSON.stringify(item.setting) || "{}";
                item.dynamic_setting =
                    JSON.stringify(item.dynamic_setting) || "{}";
                item.module_data = JSON.stringify(item.module_data) || "{}";
            });
            this.$emit("on-save", { compPageInfo, pageCompList });
            console.log('pageInfo', JSON.parse(JSON.stringify(compPageInfo)))
            console.log('compList', JSON.parse(JSON.stringify(pageCompList))) 
        },
        back(){
            this.$router.go(-1);
        }
    },
    watch: {},
    mounted() {},
    beforeDestroy() {},
};
function initJson(data) {
    if (typeof data == "string" && data) {
        try {
            data = JSON.parse(data) || {};
        } catch (error) {
            data = {};
        }
    } else {
        data = data || {};
    }
    return data;
}
</script>

<style lang="less" scoped>
.editor-main {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    .main-header {
        width: 100%;
    }
    .main-content {
        flex: 1;
        height: 100%;
        display: flex;
        justify-content: space-between;
        align-items: stretch;
    }
    .content-left {
        // width: 180px;
        width: 250px;
        flex-shrink: 0;
    }
    .content-middle {
        width: 100%;
    }
    .content-right {
        width: 320px;
        flex-shrink: 0;
        // width: 370px;
    }
    .content-left,
    .content-middle,
    .content-right {
        display: block;
        position: relative;
    }
    .content-view {
        position: absolute;
        top: 0px;
        left: 0px;
        width: 100%;
        height: 100%;
    }
    .main-footer {
        padding: 10px 0;
        text-align: center;
        border: 1px solid #efefef;
        border-bottom: 0px;
    }
}
</style>
