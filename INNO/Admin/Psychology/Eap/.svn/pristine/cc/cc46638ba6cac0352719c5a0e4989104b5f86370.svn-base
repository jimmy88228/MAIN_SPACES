import Router from "vue-router";
import Utils from "./utils.js";
import PageAnimation, { createAnimData } from "./page-animation.js";

const JumpWay = {
    Refresh: "Refresh",
    Next: "Next",
    Prev: "Prev"
};

class PageManager {
    _init(obj) {
        if (obj) {
            this._listenGuide = !!obj.listenGuide;
            if (obj.title) {
                if (Utils.is(obj.title, String)) {
                    this._title = obj.title;
                }
            }
            if (obj.anim) {
                if (Utils.is(obj.anim, Object)) {
                    this._defAnim = PageAnimation.create(obj.anim);
                }
            }
            this._addPages(obj.routes);
        }
        return this;
    }

    get title() {
        return this._title;
    }
    get defAnim() {
        return this._defAnim;
    }

    get pages() {
        return this._pages || {};
    }
    get jumpWay() {
        return this._jumpWay || JumpWay.Refresh;
    }

    set beforeEach(func) {
        this._beforeEach = func;
    }

    get overrideAnim() {
        return this._overrideAnim;
    }

    setOverrideAnim(obj) {
        this._overrideAnim = PageAnimation.create(obj);
    }

    useOverrideAnim() {
        delete this._overrideAnim;
    }

    _beforeEachProxy(to, from, next) {
        this._token || (this._token = 0);
        if (this._token < 1) {
            this._token = 1;
        }
        if (this._listenGuide !== false) {
            let pt;
            try {
                pt = Number(to.query.$pt);
            } catch (e) {}
            if (pt < 1) {
                pt = null;
            }
            if (!pt) {
                let _to = { ...to };
                _to.query = _to.query || {};
                // 强制替换 且 第一次进入系统，需要替换掉临时路由页避免，回退不出外站
                if (to.query.$isReplace || this._token <= 1) {
                    _to.replace = true;
                }
                _to.query.$pt = this._token;
                if ("$isReplace" in to.query) {
                    delete to.query.$isReplace;
                }
                next(_to);
                return true;
            } else {
                this._jumpWay = this._token <= 1 ? JumpWay.Refresh : this._token > pt ? JumpWay.Prev : JumpWay.Next;
                this._token = ++pt;
            }
        }
        if (this._beforeEach) {
            this._beforeEach(to, from, next);
        } else {
            next();
        }
    }

    _addPages(routes) {
        this._pages = this._pages || {};
        // for in,for of 不能用 因为这里只遍历自身可枚举属性
        routes.forEach(route => {
            if (route.name) {
                // 生成页面信息
                Object.defineProperty(this._pages, route.name, {
                    get: function() {
                        return route;
                    }
                });
            }
            if (route.anim) {
                route.panim = PageAnimation.create(route.anim);
            }
            if (route.children) {
                this._addPages(route.children);
            }
        });
    }

    reCreateReplaceRoute(route) {
        if (Utils.is(route, String)) {
            return {
                path: route,
                query: {
                    $isReplace: true
                }
            };
        } else if (!route.query || !route.query.$pt) {
            route.query || (route.query = {});
            route.query.$isReplace = true;
        }
        return route;
    }

    getAnimData(from, to, level) {
        if (!from) {
            return;
        }
        let fromLevel = from.matched.length;
        let toLevel = to.matched.length;
        let animLevel = Math.min(fromLevel, toLevel);
        if (animLevel !== level) {
            return;
        }
        let fromPage = this.getPage(from.matched[animLevel - 1].name);
        let toPage = this.getPage(to.matched[animLevel - 1].name);
        if (!fromPage || !toPage || fromPage === toPage) {
            return;
        }
        let da = this.defAnim;
        let fpa = fromPage.panim;
        let tpa = toPage.panim;
        let oa = this.overrideAnim;
        this.useOverrideAnim();
        let dt, entert, leavet, ot;
        if (this.jumpWay === JumpWay.Prev) {
            dt = da && da.closeTransition;
            entert = tpa && tpa.closeTransition;
            leavet = fpa && fpa.closeTransition;
            ot = oa && oa.closeTransition;
        } else {
            dt = da && da.openTransition;
            entert = tpa && tpa.openTransition;
            leavet = fpa && fpa.openTransition;
            ot = oa && oa.openTransition;
        }
        let enterAnim, leaveAnim;
        if (dt) {
            dt.enterAnim && (enterAnim = dt.enterAnim);
            dt.leaveAnim && (leaveAnim = dt.leaveAnim);
        }
        if (entert) {
            entert.enterAnim && (enterAnim = entert.enterAnim);
        }
        if (leavet) {
            leavet.leaveAnim && (leaveAnim = leavet.leaveAnim);
        }
        if (ot) {
            ot.enterAnim && (enterAnim = ot.enterAnim);
            ot.leaveAnim && (leaveAnim = ot.leaveAnim);
        }
        return createAnimData(enterAnim, leaveAnim);
    }

    getPage(name) {
        return this._pages[name];
    }
}
/* vue-router路由版本更新产生的问题,导致路由跳转失败抛出该错误;
*真正的原因是由于返回了一个Promise对象, 正常的跳转由then方法执行 当正常的路由跳转, 被"路由导航守卫"拦截并重新指定路由时, 由于 this.$router.push() 返回的是Promise对象, 此时then方法不能正常执行, 无法跳转到指定路由, 就触发了该对象的捕获错误的方法, throw抛出错误, 但并不影响程序功能.
*/
const originalPush = Router.prototype.push;
Router.prototype.push = function push(location, onResolve, onReject) {
    if (onResolve || onReject) return originalPush.call(this, location, onResolve, onReject)
    return originalPush.call(this, location).catch(err => err)
}
const  originalReplace = Router.prototype.replace;
Router.prototype.replace = function replace(location){
    return originalReplace.call(this, location).catch(err => err);
}

export default class PMRouter extends Router {
    constructor(obj) {
        let pageManager = new PageManager()._init(obj);

        super(obj);

        this._pageManager = pageManager;

        // 代理beforeEach
        super.beforeEach(pageManager._beforeEachProxy.bind(pageManager));
    }

    get $pm() {
        return this._pageManager;
    }

    addRoutes(routes) {
        this.$pm._addPages(routes);
        super.addRoutes(routes);
    }

    replace(route, onComplete, onAbort) {
        super.replace(this.$pm.reCreateReplaceRoute(route), onComplete, onAbort);
    }

    beforeEach(func) {
        this.$pm.beforeEach = func;
    }

    static install(Vue, options) {
        Router.install(Vue, options);
        Vue.mixin({
            computed: {
                $currentPage() {
                    if (this.$route) {
                        return this.$router.$pm.getPage(this.$route.name);
                    }
                    return null;
                }
            },
            methods: {
                $getPage(name) {
                    if (this.$router) {
                        return this.$router.$pm.getPage(name);
                    }
                },
                $getAnimData(from, to, level) {
                    if (this.$router) {
                        return this.$router.$pm.getAnimData(from, to, level) || {};
                    }
                    return {};
                }
            }
        });
    }
}
