<template>
<div class="edit-activity-area">
    <div class="edit-activity-cont">
        <rewrite-tabs :data="tabsData" :currTab="currTab" @changeTab="changeTab">
            <template slot="base">
                <baseForm :actDetail="actDetail" :initStartTime="initStartTime" ref="baseRef" @saveCallback="initData"></baseForm>
            </template>
            <template slot="custom">
                <customForm :actSetting="actSetting" ref="customRef"></customForm>
            </template>
        </rewrite-tabs>
    </div>
    <div class="operate-area">
        <Button type="primary" @click="save" :loading="pageLoading">保 存</Button>
    </div>
</div>
</template>

<script>
import baseForm from "./base.vue";
import customForm from "./custom.vue";
export default {
    mixins: [],
    components: { baseForm, customForm },
    data() {
        return {
            tabsData: [
                {
                    name: 'base',
                    label: '基础信息'
                },
                {
                    name: 'custom',
                    label: '自定义编辑'
                }
            ],
            actDetail: {
                id: 0,
                state: 1,
                is_state: 0,
                activity_name: "",
                dateTime: [],
                model_id: 0,
                activity_image: "",
                description: "",
                instruction: "",
                join_data: [],
                join_data_member: [],
                join_data_stc: [],
                join_type: "EVERYONE",
                is_report_open: 1,
                selectData: [],
                // 收集人口信息
                demographic_data: [],
                limit_time: 0,
            },
            actSetting: {
                detail_bg_img: '',
                detail_bg_color: '',
                answer_bg_img: ''
            },
            initStartTime: "",
            currTab: "",
        };
    },
    methods: {
        initData(){
            this.loadData();
        },
        loadData() {
            let id = Number(this.pageQuery.id) || 0;
            if (!id) return;
            let req = "appraisalActInfo";
            return this.$MainApi[req]({
                data: {
                    id: id,
                },
                other: {
                    isShowLoad: true,
                    isErrorMsg: true,
                },
            }).then((res) => {
                if (res.code) {
                    let data = res.data || {};
                    this.actDetail = Object.assign({}, data, {
                        dateTime: [data.start_time || "", data.end_time || ""],
                    });
                    this.init_state = data.state;
                    let get_model = data.get_model || [];
                    this.actDetail = Object.assign({}, data, {
                        join_data_stc:
                            data.join_type == "STRUCTURE"
                                ? this.getRef("baseRef").filterJoinData(
                                      data.join_data,
                                      data.join_type
                                  )
                                : [],
                        join_data_member:
                            data.join_type == "MEMBER"
                                ? this.getRef("baseRef").filterJoinData(
                                      data.join_data,
                                      data.join_type
                                  )
                                : [],
                        dateTime: [data.start_time || "", data.end_time || ""],
                        model_id: get_model.map((item) => item.model_id),
                        selectData: get_model.sort((a, b) => {
                            return a.sort - b.sort;
                        }),
                    });
                    this.actSetting = data.get_setting || {};
                    this.init_start_time = this.actDetail.start_time;
                    console.log("this.actDetail", this.actDetail);
                }
            });
        },
        initModel(){
            let selectData = this.actDetail.selectData;
            this.$MainApi.inventoryComponentList({ data: {}}).then(res=>{
                if(res.code){
                    let data = res.data||{}; 
                    let to_items = data.to_items;
                    if(to_items){
                        selectData.forEach((item,index)=>{
                            let cover_pic = (to_items.find && to_items.find(to_item=>to_item.id == item.id) || {}).cover_pic||"";
                            this.$set(this.actDetail.selectData[index],'cover_pic',cover_pic)
                        })
                        this.$set(this.actDetail,'selectData',selectData);
                    }
                }
            })
        },
        getRef(name){
            if(this.$refs[name]){
                return this.$refs[name]
            } else {
                return {}
            }
        },
        save() {
            this.$store.commit("setPageLoading", true);
           this.$refs["baseRef"] && this.$refs["baseRef"].save().then(()=>{
               this.$nextTick(()=>{
                   this.$refs["customRef"] && this.$refs["customRef"].save().then(()=>{
                       let isReplace = this.pageQuery.$isReplace;
                       this.$Message.warning(isReplace || !Number(this.pageQuery.id) ? "新增成功" : "编辑成功");
                       setTimeout(()=>{
                            this.$router.back();
                          })
                   }).finally(()=>{
                        this.$store.commit("setPageLoading", false);
                    })
               })
           }).catch(()=>{
               this.currTab = "base";
           }).finally(()=>{
               this.$store.commit("setPageLoading", false);
           })
        },
        changeTab(name){
            this.currTab = name;
            this.$refs[name +'Ref'] && this.$refs[name +'Ref'].initData();
        }
    },
    mounted() {
        this.initData();
    },
};
</script>

<style lang="less" scoped>
.edit-activity-area{
    display: flex;
    width:100%;
    height:100%;
    flex-direction: column;
    .edit-activity-cont{
        flex: 1;
        overflow: hidden;
    }
    .operate-area{
        padding: 5px 0px;
        padding-left: 140px;
        background-color:#fff;
    }
}
</style>