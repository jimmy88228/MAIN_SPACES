<template>
    <div class="material-upload">
        <Upload ref="uploadRef" :multiple="isMulti" :name="uploadParams" :data="uploadExtData" :headers="headers" :action="posterUploadUrl" :show-upload-list="false" :max-size="maxSize" :format="format" :on-format-error="handleFormatError" :on-exceeded-size="handleMaxSize" :before-upload="beforeUpload" :on-progress="handleProgress" :on-error="handleUploadError" :on-success="handleUploadSuccess">
            <Button type="primary" icon="md-cloud-upload">{{type == "IMAGE" ? '上传图片' : '上传视频'}}</Button>
        </Upload>
    </div>
</template>

<script>
import Conf from "@/config/index";
import Apis from "@/helper/manager/http-api";
import LM from "@/helper/manager/login-manager.js";
export default {
    name: "MaterialUpload",
    props: {
        type: {
            type: String,
            default: "IMAGE",
        },
        maxSize: {
            type: Number,
        },
        format: {
            type: Array,
        },
        // isMulti: {
        //     type: Boolean,
        //     default: false
        // }
    },
    data() {
        return {
            posterUploadUrl: Conf.API_DOMIN + Apis["ImageUplode"].u,
            uploadList: [],
            prevFileList: [], //存储上一次的文件列表
            // fileList: [], //存储最近一次上传的文件列表
            isMulti: true, //Number(this.multi) ? true : false， 上传的数据不受多选控制,默认可上传多张
            uploadOrder: [],
            beforeList: []
        };
    },
    computed: {
        headers() {
            let headers = {};
            if (LM.isLogin && LM.loginToken) {
                headers.Authorization = LM.loginToken;
            }
            return headers;
        },
        uploadExtData() {
            return {};
        },
        uploadParams() {
            return this.type == "IMAGE" ? "image" : "video";
        },
    },
    methods: {
        handleFormatError(file) {
            const formatStr = this.format.join("/");
            this.$Notice.warning({
                title: this.type == "IMAGE" ? "图片格式错误" : "视频格式错误",
                desc: `文件 ${file.name} 格式不正确, 请选择 ${formatStr} 格式文件`,
            });
        },
        handleMaxSize(file) {
            this.$Notice.warning({
                title: "超过了最大文件限制",
                desc: `文件  ${file.name} 超过了 ${this.maxSize}Kb，请控制在${this.maxSize}Kb以内.`,
            });
        },
        handleProgress(event, file, fileList) {
            // console.log("handleProgress event", event, "fileList", fileList);
            this.$emit('uploadProgress', JSON.parse(JSON.stringify(fileList)));
        },
        beforeUpload(fileList) {
            console.log("fileList", fileList);
        },
        handleUploadError(error, file, fileList) {
            console.log("handleUploadError", fileList);
        },
        handleUploadSuccess(response, file, fileList) {
            console.log("handleUploadSuccess", "response", response);
            console.log("handleUploadSuccess file", file);
            console.log("handleUploadSuccess fileList", fileList);
            
            let result = [];
            for (let i = 0; i < fileList.length; i++) {
                let status = fileList[i].status;
                let response = fileList[i].response || {};
                let src = response.data || "";
                result.push({
                    showProgress: false,
                    name: fileList[i].name,
                    status: response.code ? status : 'error',
                    src: src,
                    percentage: fileList[i].percentage
                });
            }
            this.beforeList = [];
            this.$emit("uploadSuccess", result);
            // setTimeout(()=>{
            //     this.$refs["uploadRef"].clearFiles();
            // }, 500)
        },
    },
};
</script>
