<template>
    <hold-layout :isFull="true" class="curriculum-task-list">
        <searchForm @search="loadData" @removeIds="batchRemoveItem()" :searchForm="searchForm" @create="editCurriculum()"></searchForm>
        <Table ref="myTable" class="full-table" :columns="columns" :data="list" border :loading="tableLoading">
            <template slot="name" slot-scope="{ row }">
                <div class="curriculum-info flex-s-c">
                   <div class="curriculum-img-area">
                       <img class="curriculum-img" :src="row.logo"/>
                   </div>
                   <div class="curriculum-name text-flow">{{row.activity_name}}</div>
                </div>
            </template>
            <template slot="relate_class" slot-scope="{index, row }">
                <div v-if="row.get_ead_count > 0 && (row.handle && row.handle.class)">
                    <p>共关联{{row.get_ead_count}}个班级</p>
                </div>
                <div v-else> -- </div>
                <!-- <p class="operate-line" v-if="row.handle && row.handle.class">
                    <a class="operate text-underline" @click="relateClass(index, row)">[关联班级]</a>
                </p> -->
            </template>
            <template slot="limit_time" slot-scope="{ row }">
                <div >
                    <template v-if="row.limit_time == 1">
                        <p>{{row.start_time}}</p>
                        <span>-</span>
                        <p>{{row.end_time}}</p>
                    </template>
                    <template v-else>不限制</template>
                </div>
            </template>
            <template slot="page_link" slot-scope="{ row }">
                <!-- <a class="operate" @click="createCode(row)" v-if="_structureType == 'edu_school'">生成二维码</a>
                &nbsp; -->
                <p class="operate-line">
                    <a class="operate create-code" @click="createCode(row)" v-hasAction="'appraisal_activity_qr_code'">活动码</a>
                    <a class="operate" @click="showOrgn(row)" v-hasAction="[row.handle.organizational,'appraisal_activity_organizational']">组织码</a>
                    <rewrite-tooltip class="operate" theme="light" >
                        <a class="operate" slot="_tip">生成链接</a>
                        <div slot="_content" class="flex-s-c">
                            <div class="w-break m-r-10" style="width:auto;">{{row.pageLink}}</div>
                            <a @click="createLink(row)">复制</a>
                        </div>
                    </rewrite-tooltip>
                </p>
            </template>
            <template slot="state" slot-scope="{ row }">
                <Tooltip placement="top" :disabled="row.handle && row.handle.edit" content="无编辑权限">
                    <i-switch :disabled="!(row.handle && row.handle.edit)" v-model="row.state" size="large" :loading="row.stateLoading" :true-value="1" :false-value="0" :before-change="()=>{return beforeChangeState(index, row)}">
                        <span slot="open">正常</span>
                        <span slot="close">关闭</span>
                    </i-switch>
                </Tooltip>
            </template>
            <template slot="handle" slot-scope="{ row, index }">
                <div class="operate-area">
                    <p class="operate-line">
                        <a class="operate" v-if="row.handle && row.handle.class" @click="relateClass(index, row)">关联班级</a>
                        <a class="operate" v-if="row.handle && row.handle.edit" @click="editCurriculum(row.id)">编辑</a>
                        <a class="operate" @click="getSituation(row)">课程概况</a>
                    </p>
                </div>
            </template>
        </Table>
        <organize-form ref="organizeForm"></organize-form>
        <rewrite-page slot="footer" :total="total" :current="page" :page-size="pageSize" :page-size-opts="pageSizeOpts" @on-change="e=>loadData(e)" @on-page-size-change="handlePageSizeChange" show-sizer show-elevator show-total transfer></rewrite-page>
    </hold-layout>
</template>

<script>
import ListMixin from "@/helper/mixin/list-mixin";
import mixins from "./mixins";
import searchForm from "./search-form.vue";
import organizeForm from "./organize-form.vue";

export default {
    name: "gaugeIndex",
    mixins: [ListMixin, mixins],
    components: { searchForm,organizeForm },
    data() {
        return {
            searchForm: {
                searchq: ""
            },
            pageLink: "pages/course/course-details/course-details",
        };
    },
    
    computed: {},
    methods: {
        init(){
            if(this._structureType == 'edu_area' || this._structureType == 'edu_street'){
               this.columns = this.columns.filter((item)=>{
                    return item.slot != 'relate_class'  //&& item.slot != 'page_link'
                }) 
            }
        },
        onLoadData(page, extraData) {
            return this.$MainApi.studyTaskList({
              data: {
                  ...this.searchForm,
                  ...extraData,
              },
          })
          .then((res) => {
              if (res.code) {
                  let data = res.data || {};
                  let items = data.items || [];
                  for (let i = 0; i < items.length; i++) {
                    items[i].stateLoading = false;
                    items[i].pageLink = "/" + this.pageLink + "?courseActivityId=" + items[i].id;
                    if(this._structureType == 'edu_school'){
                        items[i].pageLink += "&schoolId=" + this._structureId
                    }
                }
                  this.data = {
                      total: data.total,
                      list: items
                  };
              }
          });
        },
        // createCode(row){
        //     this.$UIModule({
        //         mode: "code-view",
        //         props: {
        //             codeTip: `<p class="big-tip">${row.activity_name || ""}</p>`
        //         },
        //         options: {
        //             path: this.pageLink,
        //             listParams: {
        //                 structure_id: row.structure_id,
        //                 structure_type: row.structure_type
        //             },
        //             params: {
        //                 courseActivityId: row.id,
        //                 showTeacher: true,
        //                 schoolId: this._structureType == 'edu_school' ? this._structureId : 0
        //             },
        //             codeId: `courseActivity:${row.id}`
        //         }
        //     });
        // },
        
        createCode(row) {
            this.$UIModule({
                mode: "code-view",
                props: {
                    codeTip: `<p class="big-tip">${row.activity_name}</p>`
                },
                options: {  
                    path: this.pageLink,
                    listParams: {
                        structure_id: row.structure_id,
                        structure_type: row.structure_type
                    },
                    params: {
                        courseActivityId: row.id,
                        showTeacher: true,
                        schoolId: this._structureType == 'edu_school' ? this._structureId : 0
                    },
                    codeId: `surveya:${row.id}`
                }
            });
        }, 
        showOrgn(row) {
            this.$refs.organizeForm.showModal(row);
        },
        createLink(row) {
            this.$utils.copyText(row.pageLink);
        },
        getSituation(row) {
            this.$router.push({
                name: "curriculumTaskSituation",
                query: {
                    taskId: row.id || 0,
                    courseId: row.course_id
                },
            });
        },
        getRelateClass(activityid){
            console.log("activityid", activityid)
            if(!activityid){
                return Promise.resolve([]);
            }
            return this.$MainApi
                .studyTaskClassList({
                    data: {
                        activityid: activityid,
                    },
                })
                .then((res) => {
                    if (res.code) {
                        let data = res.data || {};
                        return Promise.resolve(data.items || [])
                    } 
                });
        },
        relateClass(index, row){
            this.getRelateClass(row.id).then((structure_data)=>{
                structure_data.map((item)=>{
                    item._disabled = true;
                })
                this.$selectModule({
                    mode: "class-select",
                    props: {
                        type: "checkbox",
                        data: structure_data,
                    },
                    ok:(data)=>{
                        let ids = [];
                        if(data.length){
                            data.map((item)=>{
                                if(item.id){
                                ids.push(item.id) 
                                }
                            })
                        }
                        this.relateClassReq(row.id, ids, ()=>{
                            this.$set(this.data.list[index], "get_ead_count", data.length);
                        });
                    }
                })
            })
            
        },
        relateClassReq(activityid, ids, success){
            return this.$MainApi
                .studyTaskClassAdd({
                    data: {
                        activityid: activityid,
                        ids: ids,
                    },
                })
                .then((res) => {
                    if (res.code) {
                        this.$Message.success(res.message || "绑定成功");
                        typeof(success) == 'function' && success();
                        return Promise.resolve();
                    } else {
                        this.$Message.warning(res.message || "绑定失败");
                        return Promise.reject();
                    }
                });
        },
        editCurriculum(id){
            this.$router.push({
                name: Number(id) ? "editCurriculumTask" : "addCurriculumTask",
                query: {
                    taskId: id || 0,
                },
            });
        },
        beforeChangeState(index, row) {
            let id = row.id || 0;
            let state = row.state || 0;
            let set_state = state == 1 ? 0 : 1;
            this.$set(row, "stateLoading", true);
            return new Promise((rs, rj) => {
                this.setAdminState(id, set_state)
                    .then(() => {
                        this.$set(row, "stateLoading", false);
                        return rs();
                    })
                    .catch(() => {
                        this.$set(row, "stateLoading", false);
                        return rj();
                    })
                    // .finally(() => {
                    //     this.$nextTick(() => {
                    //         this.$set(
                    //             this.data.list[index],
                    //             "admin_state",
                    //             set_state
                    //         );
                    //     });
                    // });
            });
        },
        setAdminState(id, state) {
            if (!id) {
                this.$Message.warning("无效人员id");
                return Promise.reject();
            }
            return this.$MainApi
                .studyTaskStatus({
                    data: {
                        id: id,
                        state: state,
                    },
                })
                .then((res) => {
                    if (res.code) {
                        this.$Message.success(res.message || "修改成功");
                        return Promise.resolve();
                    } else {
                        this.$Message.warning(res.message || "修改失败");
                        return Promise.reject();
                    }
                });
        },
        removeItem(id, index) {
            this.batchRemoveActReq(id).then(() => {
                this.delItem(index);
            });
        },
        batchRemoveActReq(ids) {
            if (!(Number(ids) > 0)) {
                this.$Message.warning("请勾选删除项！");
                return Promise.reject();
            }
            this.tableLoading = true;
            return this.$MainApi
                .peopleRemove({
                    data: {
                        admin_id: ids,
                    },
                })
                .then((res) => {
                    if (res.code) {
                        this.$Message.success(res.message || "删除成功");
                        return Promise.resolve();
                    } else {
                        this.$Message.warning(res.message || "删除失败");
                        return Promise.reject();
                    }
                })
                .finally(() => {
                    this.tableLoading = false;
                });
        },
        removeItem(id, index){
          this.batchRemoveActReq([id]).then(()=>{
            this.delItem(index);
          })
        },
        batchRemoveItem(){
          this.batchRemoveActReq(this.ids).then(()=>{
            this.delItems(this.ids);
          })
        },
        batchRemoveActReq(ids) {
            if (ids.length == 0 || !ids[0]) {
                this.$Message.warning("请勾选删除项！");
                return Promise.reject(); 
            }
            this.tableLoading = true;
            return this.$MainApi.appraisalActRemove({
                data: {
                    ids: ids,
                },
            })
            .then((res) => {
                if (res.code) {
                    this.$Message.success(res.message || "删除成功");
                    return Promise.resolve();
                } else {
                    this.$Message.warning(res.message || "删除失败");
                    return Promise.reject();
                }
            })
            .finally(() => {
                this.tableLoading = false;
            });
        },
    },
    mounted() {
        this.init();
        this.loadData();
    },
};
</script>

<style lang="less" scoped>
.curriculum-task-list{
    .curriculum-info{
        padding: 10px 0px;
    }
    .curriculum-img-area{
        flex-shrink: 0;
        width: 100px;
        height: 75px;
        background-color:#EFEFEF;
        margin-right: 20px;
        position:relative;
        overflow: hidden;
    }
    .curriculum-img{
        position:absolute;
        top:50%;
        left:50%;
        transform: translate(-50%, -50%);
        width:100%;
    }
    .curriculum-name{
        font-size: 14px;
        font-family: PingFangSC-Regular, PingFang SC;
        font-weight: 400;
        color: #171717;
        line-height: 20px;
    }
}
</style>