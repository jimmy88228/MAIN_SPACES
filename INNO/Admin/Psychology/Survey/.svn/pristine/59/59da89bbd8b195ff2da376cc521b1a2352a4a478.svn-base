<template>
    <hold-layout :isFull="true" class="relate-school">
        <searchForm @search="loadData()" :activityTimeState="activityTimeState" :searchForm="searchForm" @setBatchRelate="setBatchRelate" @batchImport="batchImport"></searchForm>
        <Table ref="myTable" class="full-table" :columns="columns" :data="list" border :loading="tableLoading" @on-selection-change="selectDataEvent">
            <template slot="state" slot-scope="{ row }">
                <p :class="{'c_success': row.state == 1}">{{row.state_str}}</p>
            </template>
            <template slot="handle" slot-scope="{ row, index }">
                <div class="operate-area">
                    <a class="operate" v-hasAction="['appraisal_activity_school']" :class="{'invalid': row.state == 1}" @click="setRelate(row, index)">{{ row.state ? '取消关联' : '关联' }}</a>
                </div>
            </template>
        </Table>
        <rewrite-page slot="footer" :total="total" :current="page" :page-size="pageSize" :page-size-opts="pageSizeOpts" @on-change="e=>loadData(e)" @on-page-size-change="handlePageSizeChange" show-sizer show-elevator show-total transfer></rewrite-page>
    </hold-layout>
</template>

<script>
import ListMixin from "@/helper/mixin/list-mixin";
import mixins from "./mixins";
import searchForm from "./search-form.vue";
export default {
    name: "relateSchool",
    mixins: [ListMixin, mixins],
    components: { searchForm },
    data() {
        return {
            searchForm: {
                activityid: 0,
                searchq: "",
                state: "",
            },
            selectData: [],
        };
    },
    computed: {
        ids() {
            let selectData = this.selectData || [];
            let ids = [];
            if (selectData instanceof Array) {
                for (let i = 0; i < selectData.length; i++) {
                    if (selectData[i].id) {
                        ids.push(selectData[i].id);
                    }
                }
            }
            return ids;
        },
    },
    methods: {
        init(){
            this.activityTimeState = Number(this.pageQuery.activityTimeState) || 0;
        },
        onLoadData(page, extraData) {
            this.searchForm.activityid = Number(this.pageQuery.activityId);
            return this.$MainApi
                .appraisalSchool({
                    data: {
                        ...this.searchForm,
                        ...extraData,
                    },
                })
                .then((res) => {
                    console.log("列表", res);
                    if (res.code) {
                        let data = res.data || {};
                        this.data = {
                            total: data.total,
                            list: data.items,
                        };
                    }
                });
        },
        selectDataEvent(data) {
            this.selectData = data || [];
        },
        batchImport() {
            this.$UIModule({
                mode: "batch-import",
                options: {
                    canCreate: { upload: true, download: true },
                    uploadUrl: "batchImportAppraisalSchool",
                    downloadUrl: "batchTplAppraisalSchool",
                },
                success: () => {
                    this.loadData();
                },
            });
        },
        setRelate(row, index) {
            if(row.state && !row.handle.cancel){
                this.$Message.warning("该学校已关联班级，不可取消关联");
                return;
            } else if(row.state && this.activityTimeState >= 2){ //活动进行中不可取消关联
                this.$Message.warning("活动已进行,不可取消关联");
                return;
            }
            this.batchRelateSchool([row.id], row.state != 1).then(() => {
                this.$set(
                    this.data.list[index],
                    "state",
                    row.state == 1 ? 0 : 1
                );
                this.$set(
                    this.data.list[index],
                    "state_str",
                    row.state == 1 ? "未关联" : "已关联"
                );
            });
        },
        setBatchRelate(setRelate) {
            this.batchRelateSchool(this.ids, setRelate).then(() => {
                for (let i = 0; i < this.list.length; i++) {
                    let id = this.list[i].id;
                    if (id && this.ids.indexOf(id) != -1) {
                        this.$set(
                            this.data.list[i],
                            "state",
                            setRelate ? 1 : 0
                        );
                        this.$set(
                            this.data.list[i],
                            "state_str",
                            setRelate ? "已关联" : "未关联"
                        );
                    }
                }
                console.log("list", this.list);
            });
        },
        batchRelateSchool(ids, setRelate) {
            if (ids.length == 0) {
                this.$Message.warning("请选择设置的学校");
                return Promise.reject();
            }
            let req = setRelate
                ? "batchAddAppraisalSchool"
                : "batchCancelAppraisalSchool";
            return this.$MainApi[req]({
                data: {
                    activityid: this.searchForm.activityid,
                    ids: ids,
                },
            }).then((res) => {
                if (res.code) {
                    this.$Message.success(
                        res.message || (setRelate ? "关联成功" : "取消成功")
                    );
                    return Promise.resolve();
                } else {
                    this.$Message.warning(
                        res.message || (setRelate ? "关联失败" : "取消失败")
                    );
                    return Promise.reject();
                }
            });
        },
    },
    mounted() {
        this.init();
        this.loadData();
    },
};
</script>

<style lang="less" scoped>
.relate-school {
}
</style>