<template>
  <div>
    <custom-modal ref="modal" class="hold-modal-zindex" :width="364" :isSlotFooter="true">
      <div class="add-member-modal" @click="touchCancel">
      <div class="modal-title">添加管理员</div>
        <Form :model="adminInfo" ref="formDataRef" :rules="ruleValidate">
          <div style="border-bottom: 1px solid #efefef;">
          <FormItem label="绑定教师" prop="admin_phone">
            <div @click.stop="_func">
              <custom-input size="large" placeholder="输入手机号" type="number" isInt :maxlength="11" :search="true" v-model="searchq" @on-search="search"></custom-input>
              <div class="search-result" v-if="isSearch && searchq" >
                <div class="search-result-area" >
                  <vue-scroll class="search-result-scroll">
                      <div v-if="!searchIng">
                        <div class="text-c has-no-teacher" v-if="!searchList || searchList.length == 0" @click="addTeacher">暂无教师信息，立即添加+</div>
                        <div v-else class="teacher-list">
                          <div class="teacher-item flex-b-c over-flow" :class="{'selected-item': adminInfo.teacher_id == item.id}" v-for="(item, index) in searchList" :key="index" >
                            <div class="flex-s-c over-flow">
                              <p class="over-flow">{{item.name}}</p>
                              <span class="item-line m-l-10 m-r-10"></span>
                              <div>{{item.mobile_phone}}</div>
                            </div>
                            <a class="confirm-btn" v-if="adminInfo.teacher_id != item.id" @click="chooseTeacher(item)">确认</a>
                          </div>
                        </div>
                      </div>
                    </vue-scroll>
                  <Spin fix v-if="searchIng"></Spin>
                </div>
              </div>
              <div class="selected-item flex-s-c over-flow" v-if="adminInfo.teacher_id">
                <p class="over-flow">{{adminInfo.admin_name}}</p>
                <span class="item-line m-l-10 m-r-10"></span>
                <div>{{adminInfo.admin_phone}}</div>
              </div>
            </div>
            <Input v-model="adminInfo.admin_phone" v-show="false"></Input>
          </FormItem>
          <FormItem label="新建教师" v-if="isAdd" prop="admin_name">
            <custom-input regType="name" class="m-b-10" placeholder="输入教师名称" size="large" v-model="adminInfo.admin_name" :maxlength="20"></custom-input>
            <custom-input type="number" isInt :maxlength="11" size="large" :disabled="true" :showWordLimit="false" v-model="adminInfo.admin_phone"></custom-input>
          </FormItem>
          </div>
          <FormItem label="选择角色" prop="role_id">
            <Select size="large" v-model="adminInfo.role_id" class="base-320" @on-change="changeRole">
                <Option v-for="item in rolesList" :key="item.role_id" :value="item.role_id">{{(item.get_role && item.get_role.role_name) || '暂无名称'}}</Option>
            </Select>
          </FormItem>
          <FormItem label="关联班级" prop="relevance_id">
            <Button size="large" :type="adminInfo.relevance_id && adminInfo.relevance_id.length ? 'primary' : 'default'" @click="chooseRelevance">{{adminInfo.relevance_id && adminInfo.relevance_id.length > 0 ? '更换关联班级' : '选择关联班级'}}</Button>
            <Select v-model="adminInfo.relevance_id" v-show="false"></Select>
          </FormItem>
        </Form>
        <Spin fix v-if="pageLoading"></Spin>
      </div>
      <div slot="footer" class="flex-c-c">
        <Button @click="dismiss">取消</Button>&nbsp;
        <Button type="primary" @click="checkUpdateInfo">保存</Button>
      </div>
    </custom-modal>
    <classOrganizeViewModal ref="classOrganizeModalRef" :isRelation="true" :isLImitMain="adminInfo.role_id == '3' ? true : false" @success="chooseRelevanceCallback"></classOrganizeViewModal>
  </div>
</template>

<script>
import classOrganizeViewModal from "@/components/view-components/class-organize-view-modal/index.vue"
export default {
  components: { classOrganizeViewModal },
  data(){
    return {
      searchq: "", // 18902293985
      adminInfo: {
          admin_id: 0,
          admin_name: "",
          role_id: 0,
          role_type: "",
          relevance_id: [],
          admin_phone: "",
          teacher_id: 0
      },
      relevance_ids: [],
      isAdd: false,
      isSearch: false,
      searchList: [],
      selectTeacher: {},
      searchIng: true,
      ruleValidate: {
          admin_name: [
              {
                  required: true,
                  validator: this._checkString,
                  trigger: "blur",
                  message: "请填写人员名称",
              },
          ],
          admin_phone: [
              {
                  required: true,
                  validator: this._checkString,
                  message: "请点击搜索，绑定指定教师",
                  trigger: "change",
              },
          ],
          role_id: [
              {
                  required: true,
                  validator: this._checkString,
                  message: "请填写授权角色",
                  trigger: "change",
              },
          ],
          relevance_id: [
              {
                  required: true,
                  validator: this._checkArray,
                  message: "请选择关联班级",
                  trigger: "change",
              },
          ],
      },
    }
  },
  computed: {
      rolesList() {
          let rolesList = [];
          let _structureType = this._structureType || "";
          if (_structureType) {
              switch (_structureType) {
                  case "edu_area":
                      rolesList = this._adminRoleData.filter((item) => {
                          if(item.role_id) item.role_id = item.role_id + "";
                          return item.structure_type == "edu_school" || item.structure_type == "edu_street";
                      });
                      break;
                  case "edu_street":
                      rolesList = this._adminRoleData.filter((item) => {
                          if(item.role_id) item.role_id = item.role_id + "";
                          return item.structure_type == "edu_school";
                      });
                      break;
                  case "edu_school":
                      rolesList = this._adminRoleData.filter((item) => {
                          if(item.role_id) item.role_id = item.role_id + "";
                          return item.structure_type == "edu_class";
                      });
                      break;
                  case "edu_class": // 暂无
                      break;
              }
          }
          // 仅有一个角色时，且是新增时，默认自动勾选
          if (rolesList.length == 1 && Number(this.adminInfo.admin_id) == 0) {
              this.$set(
                  this.adminInfo,
                  "role_id",
                  rolesList[0].role_id
              );
          }
          return rolesList;
      },
  },
  methods: {
    showModal(){
      this.$refs["modal"].show();
      this.isAdd = false;
      this.isSearch = false;
      this.searchIng = false;
      this.searchq = "";
      this.adminInfo = {
          admin_id: 0,
          admin_name: "",
          role_id: 0,
          role_type: "",
          relevance_id: [],
          admin_phone: "",
          teacher_id: 0
      }
      this.$nextTick(()=>{
        this.$refs["formDataRef"] && this.$refs["formDataRef"].resetFields();
      })
      // this.search();
    },
    dismiss(){
      this.$refs["modal"].dismiss();
    },
    search(){
      if(!/^1[123456789]\d{9}$/.test(this.searchq)){
        this.$Message.warning("请输入完整格式的手机号");
        return;
      }
      this.isSearch = true;
      this.searchIng = true;
      return this.$MainApi
        .getEduTeacher({
            data: {
                school_id: this._structureId,
                searchq: this.searchq,
                page: 1,
                pageSize: 1000
            },
        })
        .then((res) => {
            if (res.code) {
                let data = res.data || {};
                let items = data.items || [];
                this.searchList = items;
            }
        }).finally(()=>{
          this.searchIng = false;
        })
    },
    addTeacher(){
      this.isAdd = true;
      this.adminInfo.admin_name = "";
      this.adminInfo.teacher_id = 0;
      this.adminInfo.admin_phone = this.searchq;
      this.touchCancel();
    },
    chooseTeacher(item){
      this.adminInfo.admin_name = item.name;
      this.adminInfo.teacher_id = item.id;
      this.adminInfo.admin_phone = item.mobile_phone;
      this.touchCancel();
    },
    touchCancel(){
      if(this.searchIng){
        return;
      }
      this.isSearch = false;
    },
    changeRole(){
        this.$set(this.adminInfo, "relevance_id", []);
        this.relevance_ids = [];
    },
    setRoleType(role_id){
        let rolesList = this.rolesList;
        if(!Number(role_id)){
            this.$set(this.adminInfo, "role_type", "")
        } else {
            for(let i = 0; i < rolesList.length; i++){
                if(rolesList[i].role_id == role_id){
                    this.$set(this.adminInfo, "role_type", rolesList[i].structure_type || "")
                    break;
                }
            }
        }
    },
    chooseRelevance(){
            this.$refs["classOrganizeModalRef"] && this.$refs["classOrganizeModalRef"].showModal({
                selectData: this.relevance_ids || [],
                extra: {
                    expandHold: true,
                    reqParams: {
                        school_id: this._structureId,
                        school_name: this._structureName 
                    }
                }
            });
        },
        chooseRelevanceCallback(data){
            if(data.length > 0){
                let selectData = [], selectFullData = [];
                for(let i = 0; i < data.length; i++){
                    if(data[i].type == 'school'){
                        selectData = [data[i].id];
                        selectFullData = [ data[i] ]
                        break;
                    } else if(data[i].type == 'class'){
                        selectData.push(data[i].id);
                        selectFullData.push(data[i]);
                    }
                }
                console.log("selectData", selectData);
                this.relevance_ids = selectFullData;
                this.adminInfo.relevance_id = selectData;
            } else {
                this.relevance_ids = [];
                this.adminInfo.relevance_id = [];
            }
        },
        checkUpdateInfo() {
            this.$refs["formDataRef"].validate((valid) => {
                if (valid) {
                    this.updateInfo();
                } else {
                    this.$Message.warning("请完善信息");
                }
            });
        },
        updateInfo() {
            let adminInfo = this.adminInfo || {};
            this.pageLoading = true;
            return this.$MainApi["peopleAdd"]({
                data: adminInfo,
            }).then((res) => {
                    if (res.code) {
                        this.$Message.success(res.message || "操作成功");
                        this.dismiss();
                        this.$emit("confirm");
                    } else {
                        this.$Message.warning(res.message || "操作失败");
                    }
                })
                .finally(() => {
                    this.pageLoading = false;
                });
        },
  },
  watch:{
    "adminInfo.role_id": {
          handler:function(nV){
              this.setRoleType(nV);
          },
          immediate: true
      },
  }
}
</script>

<style lang="less" scoped>
.add-member-modal{
  background-color:#fff;
  padding:22px;
  padding-bottom: 0px;
}
.modal-title{
  font-size: 18px;
  font-family: PingFangSC-Semibold, PingFang SC;
  font-weight: 600;
  color: #171717;
  line-height: 25px;
  padding-bottom: 15px;
}
.ivu-form-item{
}
.has-no-teacher{
  height: 53px;
  line-height: 53px;
  background: #FCFCFC;
  border-radius: 3px;
  border: 1px solid #F3F3F3;
  color:#0083CE;
  cursor: pointer;
}
.custom-input-box{
  width:100%;
}
.search-result{
  position: relative;
  width:100%;
}
.search-result-area{
  display: flex;
  flex-direction: column;
  position:absolute;
  top:0px;
  left:0px;
  width:100%;
  min-height: 50px;
  background-color: #fff;
  z-index: 2;
  border: 1px solid #efefef;
  overflow: hidden;
  border-radius: 6px;
  max-height: 300px;
}

.teacher-item{
  padding: 10px;
  cursor: pointer;
}
.teacher-item:hover{
  background-color:#F3F3F3;
}
.selected-item{
  height: 50px;
  background: #F0F9FF;
  border-radius: 3px;
  font-size: 14px;
  font-family: PingFangSC-Regular, PingFang SC;
  font-weight: 400;
  color: #008ACB;
  line-height: 20px;
  padding: 0px 14px;
  margin-top: 14px;
}
.teacher-item.selected-item{
  margin-top: 0px;
}
.item-line{
  width:1px;
  height: 9px;
  background-color:#999;
}
.confirm-btn{
  display: block;
  padding: 0px 10px;
  flex-shrink: 0;
}
</style>
<style lang="less">
.add-member-modal{
  .search-result-scroll{
    max-height: 300px;
    .__panel{
      max-height: 300px;
    }
  }
  .ivu-form-item-label{
    font-family: PingFangSC-Semibold, PingFang SC;
    font-weight: 600;
    color: #7F7F7F;
  }
}
</style>