<template>
    <div class="carousel-md-view">
        <template v-if="checkEmpty"> 
            <div class="carousel-box flex-c-c">
                <div class="carousel-img-box">
                    <img :src="BroadcastImg" alt="" class="BroadcastImg">
                </div>
                <swiper class="customCarousel" ref="carousel" @init="init" @beforeChange="beforeChange" @afterChange="afterChange" :settings="settings">
                    <slide
                        v-for="(item, index) in curList" :key="index"
                    >
                        <CarouselItem class="carouselItem" :duration="settings.duration" :class="{active:activeCur == index}" @over="showNext"  :textData="item.value||''" :ref="'item_'+index"></CarouselItem>
                    </slide>
                </swiper>
            </div>
        </template>
        <div v-else class="empty">
            <div class="img-box flex-c-c">
                <img :src="typeImg" alt="" class="img-logo">
            </div>
            <div class="m-t-20">{{typeName}}模块</div>
        </div>
    </div>
</template>

<script>
import CarouselItem from './item.vue';
import BroadcastImg from "@/assets/images/custom/broadcast.png"
import confMixin from "@/components/main-components/custom-page/component/module/conf.js"
import { Swiper,Slide  } from '@/components/view-components/custom-swiper/index.js'

export default {
    name: "broadcastView", 
    mixins:[confMixin],
    props: {
        compInfo: {
            type: Object,
            default: () => {return {}},
        },
        inTab: {
            type: Boolean,
            default: false,
        },   
    },
    data() {
        return {
            type:"broadcast",
            timeoutId:null,
            current:0,
            activeCur:0,
            settings: {
                duration:1000,
                direction:"vertical",
                autoPlay:false,
                isCanTouch:false
            },
            BroadcastImg,
            inited:false,
        }
    },
    components: {
        CarouselItem, 
        Swiper,Slide
    },    
    computed: {
        groupKey(){
            return this.keyInfo[this.type] && this.keyInfo[this.type].groupKey || "";
        },
        groupItemKey(){
            return this.keyInfo[this.type] && this.keyInfo[this.type].groupItemKey || "";
        },
        typeName(){
            return this.keyInfo[this.type] && this.keyInfo[this.type].name || "";
        },
        typeImg(){
            return this.keyInfo[this.type] && this.keyInfo[this.type].img || "";
        },
        dynamic_setting(){
            return this.compInfo.dynamic_setting || {};
        },
        module_data(){
            let module_data = this.compInfo.module_data || {};
            if (!module_data[this.groupKey]) {
                this.$set(this.compInfo.module_data,this.groupKey, [])
            }
            // console.log('module_datamodule_data',module_data)
            return module_data || {};
        },
        checkEmpty(){
            let module_data = this.compInfo.module_data || {};
            let group = module_data[this.groupKey]||[];
            return group.length>0 && group[0] && group[0][this.groupItemKey] && group[0][this.groupItemKey].length>0 || false;
        },
        curList(){
            let module_data = this.compInfo.module_data || {};
            let group = module_data[this.groupKey]||[];
            let list = group.length>0 && group[0] && group[0][this.groupItemKey] && group[0][this.groupItemKey] || [];
            // console.log('curList',list)
            return list
        }
    },
    watch:{
        module_data:{
            handler(nV){
                nV && this.init(true);
            },immediate:true,deep:true
        }
    },
    methods: {
        init(bool) { 
            if(this.inited || !this.checkEmpty)return;
            clearTimeout(this.timeoutId);
            this.timeoutId = setTimeout(() => {
                this._getRef('item_0').start();
            }, 1000);
        },
        beforeChange(e,next) {
            this.activeCur = next;
            // console.log('beforeChange',e,next)
        },
        afterChange(e) {
            // console.log('afterChange',e);
            this.current = e;
            this.inited = true;
            setTimeout(() => {
                this._getRef(`item_${this.current}`).start();
            }, 500);
        },
        showNext() {
            if(this.curList.length <= 1)return
            let index = (this.current+1) % this.curList.length;
            this._getRef('carousel').slideTo(index);
        },
    },
}
</script>

<style lang="less" scoped>
.carousel-md-view{
    .carousel-box{
        padding: 0 10px;
        margin: 15px 0;
        box-shadow: 0px 2px 12px 4px rgba(0, 0, 0, 0.06);
    }
    .customCarousel{
        width: 100%;
        height: 45px;
    }
    .carouselItem{
        opacity: 0;
        transition: opacity 0.6s linear;
        &.active{
            opacity: 1;
            transition: opacity 0.6s 0.3s linear;
        }
        
    }
    .empty {
        text-align: center;
        padding: 40px 20px;
        color: #515a6e;
    } 
    
    .img-box{
        width: 80px;
        height: 60px;
        border-radius: 6px;
        margin: 0 auto;
        background: rgba(239, 239, 239, 0.3);
    }
    .img-logo{
        width: 30px;
        height: 30px;
    }
    .carousel-img-box{
        padding-right: 7px;
        flex-shrink: 0;
        position: relative;
        z-index: 2;
    }
    .BroadcastImg{
        width: 16px;
        height: 16px;
        display: block;
    }

}
</style>