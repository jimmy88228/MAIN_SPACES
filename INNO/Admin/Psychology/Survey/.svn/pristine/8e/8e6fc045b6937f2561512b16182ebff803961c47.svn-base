import Vue from "vue";
import VueUtils from "@/helper/utils/vue-utils.js";
import PreviewImgManager from "@/components/preview-img-manager.js";
import LM from "@/helper/manager/login-manager";
import formMixin from "@/helper/mixin/form-mixin";
Vue.mixin({
    mixins: [formMixin],
    data() {
        return {
            PreviewImgManager: PreviewImgManager,
            pageQuery: {},
            pageParams: {},
            pageLoading: false,
            jobIdCol: [],
            MATERIAL_TYPE_DATA:{
                'video':[],
                'audio':[],
                'article':[],
            },
            textareaMaxLength:200,
        };
    },
    computed: {
        _mainData(){
            return (LM.userInfos && LM.userInfos.mainData) || {}
        },
        _loginAdmin() {
            return (LM.userInfos && LM.userInfos.admin_data) || {}
        },
        _appCode(){
            return (LM.userInfos && LM.userInfos.appCode) || "";
        },
        _structureType() {
            return this._loginAdmin.structure_type || "";
        },
        _structureName() {
            return this._loginAdmin.structure_name || "";
        },
        _structureId() {
            return this._loginAdmin.structure_id || 0;
        },
        _adminRoleData() {
            return LM.adminRoleData || []
        },
        _pageScrollTop() {
            let pageScrollTop = this.$store.state.app.pageScrollTop || 0;
            return pageScrollTop > 70 ? parseFloat(pageScrollTop - 70) : 0;
        },
        _isThird(){
            let isThird = LM.loginState == 1 || LM.accessToken;
            return isThird;
        }
    },
    methods: {
        _structureLimit(muster, type) {
            type = type || this._structureType || ''
            if(type == "edu_area"){
                return muster.includes(type) && muster.length == 1
            }
            if (type) return muster.includes(type);
            return true;
        },
        _initParams() {
            let query = (this.$route && this.$route.query) || {};
            let params = (this.$route && this.$route.params) || {};
            this.pageQuery = query;
            this.pageParams = params;
        },
        _copyText(elem) {
            console.log("elem", elem);
            if(!elem) return;
            function otherEle(element) {
                if (document.selection) {
                    var range = document.body.createTextRange();
                    range.moveToElementText(element);
                    range.select();
                } else {
                    window.getSelection().removeAllRanges();
                    var range = document.createRange();
                    range.selectNode(element);
                    window.getSelection().addRange(range);
                }
            }
            if (elem.select) {
                elem.select();
            } else {
                otherEle(elem);
            }
            document.execCommand('Copy');
            window.getSelection().removeAllRanges();
            this.$Message.warning("已复制好，可贴粘。");
        },
        vueDataMerge(oldData, newData) {
            VueUtils.vueDataMerge(oldData, newData);
        },
        modalTipPop({title = "操作提示",content = "",setLoading=false}) {
            return new Promise((rs, rj) => {
                this.$Modal.confirm({
                    title: title,
                    content: content,
                    onOk: () => {
                        setLoading && this.$store.commit('setLoading', true);
                        rs();
                    },
                });
            })
        },
        _deepCopy(data){
            return data && JSON.parse(JSON.stringify(data)) || data;
        },
    },
    mounted() {
        this._initParams();
    }
});
Vue.directive("focusNext", {
    bind: function (el, {
        value
    }, vnode) {
        el.addEventListener("keyup", ev => {
            let v = value || {};
            if (ev.keyCode === (v.keyCode || 13)) {
                if (v.action) {
                    let action = vnode.context[v.action];
                    if (action && typeof action === "function") {
                        action();
                    }
                } else if (v.ref) {
                    let nextInput = vnode.context.$refs[v.ref];
                    if (nextInput && typeof nextInput.focus === "function") {
                        nextInput.focus();
                    }
                }
            }
        });
    }
});