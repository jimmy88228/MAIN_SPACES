// import EasyHttp from "@y-bao/easy-http";
import axios from "axios";
import LM from "./login-manager";
import Conf from "@/config";
import Apis from "./http-api";
import qs from 'qs';
import store from "@/store/index";

const httpManager = {};

httpManager.ajax = axios.create({
    baseURL: Conf.API_DOMIN,
    timeout: 60000
})

httpManager.ajax.__proto__ = axios;

// 拦截request，设置全局请求为ajax请求
httpManager.ajax.interceptors.request.use((config) => {
    if (LM.loginToken) {
        config.headers || (config.headers = {});
        config.headers.Authorization = LM.loginToken;
    }
    if(config.other && config.other.isShowLoad){
        store.commit("setPageLoading", true);
    }
    if(config.method != 'get'){
        config.data = qs.stringify(config.data)
    }
    return config
})

// 拦截响应response，统一做错误处理
httpManager.ajax.interceptors.response.use((response) => {
    let data = response.data || {};
    let config = response.config || {};
    let other = config.other || {};
    // loading
    if(other.isShowLoad){
        if(other.hideLoadTime){
            setTimeout(()=>{
                store.commit("setPageLoading", false);
            }, other.hideLoadTime)
        } else {
            store.commit("setPageLoading", false);
        }
    }
    // toast
    if(other.isShowMsg){
        if(data.code){
            typeof(data.message) == "string" && $Bus.$Message.success(data.message);
        } else {
            typeof(data.message) == "string" && $Bus.$Message.warning(data.message);
        }
    }
    if(response.status == 200){
        return data;
    } else {
        return response;
    }
}, (error)=>{
    if(error && error.response){
        let data = error.response.data;
        let config = error.response.config || {};
        let other = config.other || {};
        // loading
        if(other.isShowLoad){
            if(other.hideLoadTime){
                setTimeout(()=>{
                    store.commit("setPageLoading", false);
                }, other.hideLoadTime)
            } else {
                store.commit("setPageLoading", false);
            }
        }
        if(data && data.toString()){
            $Bus.$Message.info(data.toString());
        }
        switch (error.response.status) {
            case 401:
            case 431:
                LM.clear();
                $Bus.$router.push({ name: "Login" }); 
                break;
            case 430:
                $Bus.$Message.info("即将跳转首页");
                setTimeout(()=>{
                    $Bus.$router.push({ name: "home" })
                },1000)
                break;
            case 434:
                LM.clear();
                $Bus.$router.push({ name: "Login" });
                break;
            // case 405:

        }
    }
    return Promise.reject(error);
})
const _MainApi = {};
if(Apis){
    for(let i in Apis){
        let api = Apis[i];
        let url = typeof(api) == 'string' ? api : api["u"];
        let method = Apis[i].m || "get";
        _MainApi[i] = function(reqData){
            method = reqData.method || method;
            return httpManager.ajax(
                {
                    method: method,
                    url: url,
                    data: reqData.data || {},
                    other: reqData.other || {}
                }
            )
        } 
    }
}
export const MainApi = _MainApi


// const Handlers = {
//     get(o) {
//         return axios.get(o.url, {
//             headers: o.header
//         });
//     },

//     post(o) {
//         return axios.post(o.url, o.data, {
//             headers: o.header
//         });
//     }
// };

// EasyHttp.use({
//     install(host) {
//         host.bindHandler(o => {
//             let act = (o.action || "").toLowerCase();
//             if (Handlers[act]) {
//                 return Handlers[act](o);
//             }
//             throw `EasyHttpAxios:not found action '${act}'`;
//         });
//     }
// });

// EasyHttp.bindPreHandler(rq => {
//     if (LM.loginToken) {
//         rq.header || (rq.header = {});
//         rq.header.Authorization = LM.loginToken;
//     }
//     if(rq.other && rq.other.isShowLoad){
//         store.commit("setPageLoading", true);
//     }
//     console.log("EasyHttp-Request:", `[${rq.action}] ${rq.url}`, "\nparams:", rq.params, "\ndata:", rq.data);
// }).bindPostHandler(promise => {
//     return promise
//         .then(e => {
//             let rq = e.request;
//             let rp = e.response;
//             console.log("EasyHttp-Response:", `[${rq.action}] ${rq.url}`, "\nresponse:", rp.data);
//             let data = rp.data || {};
//             let other = rq.other || {};
//             // loading
//             if(other.isShowLoad){
//                 if(other.hideLoadTime){
//                     setTimeout(()=>{
//                         store.commit("setPageLoading", false);
//                     }, other.hideLoadTime)
//                 } else {
//                     store.commit("setPageLoading", false);
//                 }
//             }
//             // toast
//             if(other.isShowMsg){
//                 if(data.code){
//                     typeof(data.message) == "string" && $Bus.$Message.success(data.message);
//                 } else {
//                     typeof(data.message) == "string" && $Bus.$Message.warning(data.message);
//                 }
//             }
//             return data;
//         })
//         .catch(e => {
//             let rq = e.request || {};
//             let other = rq.other || {};
//             // loading
//             if(other.isShowLoad){
//                 if(other.hideLoadTime){
//                     setTimeout(()=>{
//                         store.commit("setPageLoading", false);
//                     }, other.hideLoadTime)
//                 } else {
//                     store.commit("setPageLoading", false);
//                 }
//             }
//             let rp = (e.response && e.response.response) || {};
//             if(rp.data && rp.data.toString()){
//                 $Bus.$Message.info(rp.data.toString());
//             }
//             // token 失效，431 账号不存在  430 权限不足  434 账号强制退出
//             if(rp.status == 401 || rp.status == 431){ 
//                 LM.clear();
//                 $Bus.$router.push({ name: "Login" }); 
//             } else if(rp.status == 430){
//                 $Bus.$Message.info("即将跳转首页");
//                 setTimeout(()=>{
//                     $Bus.$router.push({ name: "home" })
//                 },1000)
//             } else if(rp.status == 434){
//                 LM.clear();
//                 $Bus.$router.push({ name: "Login" });
//             }
//             if (e.errType === -1) {
//                 console.log("EasyHttp-Response:", `[${rq.action}] ${rq.url}`, "\n内部错误:", e.msg);
//                 return Promise.reject(e.msg);
//             } else if (e.respons) {
//                 let rp = e.response;
//                 console.log("EasyHttp-Response:", `[${rq.action}] ${rq.url}`, "\nresponse:", rp.message);
//                 return Promise.reject(rp.message);
//             }
//             return Promise.reject(e);
//         });
// });

// // export const MainApi = new EasyHttp().setBaseUrl(Conf.API_DOMIN).addRequests(Apis);
