<template>
    <div class="result-setting">
        <div class="title-box flex-b-c">
            <div>
                <div class="gauge-title-tip">量表名称</div>
                <div class="gauge-title">{{scaleInfo.model_name}}</div>
            </div>
            <div class="total-box flex-c-c">
                <div class="total-item flex-c-c flex-col">
                    <div class="total">{{scaleInfo.question_count}}</div>
                    <div>题目</div>
                </div>
            </div>
        </div>
        <div class="result-box">
            <div class="result-title">设置评测结果</div>
            <div class="table-box">
                <div class="tabs flex-s-c">
                    <div class="tab-item pointer flex-c-c flex1" :class="{active:currentTab==item.type}" @click="tabClick(item.type)" v-for="(item,index) in tabs" :key="index">
                        {{item.name}}
                    </div>
                </div>
                <div class="tabs-extra flex-b-c">
                    <div class="flex-c-c">
                        <template v-if="currentTab == 'dimension'">
                            <div class="m-r-10">维度筛选</div>
                            <dimensionSelect :modelId="pageQuery.id" :canEdit="false" v-model="formData.dimensions" style="width: 166px;" placeholder="选择维度"></dimensionSelect>
                        </template>
                    </div>
                    <div class="btn-add pointer flex-c-c" @click="edit()">+新增{{currentTab=='total'?'结果':'维度'}}</div>
                </div>
             </div>
             <div class="table-content"> 
                <template v-for="(item,index) in tabs">
                    <settingTable v-if="currentTab == item.type" :isLoading="isLoading" @edit="edit" :key="index" :list="getList(item.type)" :type="item.type"></settingTable>
                </template>
             </div>
        </div> 

        <custom-modal footerHide :width="560" ref="modalId" :title="'新增'+(currentTab=='total'?'结果':'维度')">
            <div class="form-view-box">
                <Form
                    class="box"
                    :label-width="80"
                    ref="formId"
                    :model="formData"
                    :rules="ruleValidate"
                >
                    <div class="modalTitle">{{currentTab=='total'?'总分结果':'新增结果'}}</div> 
                    <FormItem label="维度" prop="addDimension" v-if="currentTab=='dimension'">
                        <div>{{formData.addDimension}}</div>
                        <dimensionSelect :modelId="pageQuery.id"  @change="changechange" :canEdit="false" v-model="formData.addDimension" style="width: 166px;" placeholder="选择维度"></dimensionSelect>
                    </FormItem> 
                    <FormItem label="分值" prop="total">
                        <div class="flex-s-c">
                            <custom-input
                                style="width: 66px"
                                v-model="formData.min_value"
                                type="number"
                                placeholder="" 
                            ></custom-input>
                            <div class="m-l-10 m-r-10">至</div>
                            <custom-input
                                style="width: 66px"
                                v-model="formData.max_value"
                                type="number"
                                placeholder="" 
                            ></custom-input>
                        </div>
                    </FormItem> 
                    <FormItem label="结论" prop="short_desc">
                        <custom-input
                            style="width: 280px"
                            v-model="formData.short_desc"
                            type="text"
                            placeholder=""
                            :maxlength="30"
                        ></custom-input>
                    </FormItem> 
                    <FormItem label="结果描述" prop="description">
                        <custom-input
                            style="width: 280px"
                            v-model="formData.description" 
                            type="textarea"
                            placeholder=""
                            :maxlength="150"
                            :rows="3"
                        ></custom-input>
                    </FormItem> 
                </Form>
                <div class="flex-c-c m-t-10">
                    <Button @click="cancel" class="m-r-20">取消</Button>
                    <Button @click="confirm" type="primary" class="m-r-20">保存设置</Button>
                </div> 
            </div>
        </custom-modal>
    </div>
</template>

<script>
import settingTable from "./setting-table/index.vue";
import dimensionSelect from "./components/dimension-select/index.vue"
export default {
    data() {
        return { 
            formData:{
                id:0,
                addDimension:0,
                total:0,
                min_value:0,
                max_value:0,
                short_desc :'',
                description:'',
            },
            ruleValidate:{  
                addDimension: [
                    {
                        required: true,
                        validator: this._checkThanInt,
                        message: "请选择维度",
                        trigger: "blur",
                    },
                ],
                short_desc: [
                    {
                        required: true,
                        validator: this._checkString,
                        message: "结论不能为空",
                        trigger: "blur",
                    },
                ],
                description: [
                    {
                        required: true,
                        validator: this._checkString,
                        message: "描述不能为空",
                        trigger: "blur",
                    },
                ],
                total: [
                    {
                        required: true,
                        validator: (rule, value, callback)=>{
                            let check = this.checkDistrict(this.formData.min_value,this.formData.max_value)
                            if(check){
                                callback();
                            }else{
                                callback(new Error("已存在该分值的区间，请重新调整"));
                            }
                        },
                        message: "",
                        trigger: "blur",
                    },
                ],
            },
            isLoading:false,
            curSel:{},
            inited:false,
            currentTab:"total",
            scaleInfo:{},
            tabs:[{type:"total",name:"按总分设置"},{type:"dimension",name:"按维度设置"}],
            points_rule_info:null,
            dimension_rule_list:null,
            totalList:[],
            dimensionList:[],
        }
    },
    computed: {
    },
    components: {
        settingTable,
        dimensionSelect
    },
    methods: {
        edit(item={},type="edit"){
            console.log('edit',item,type)
            this.curSel = item||{};
            if(this.curSel.id){
                this.formData.min_value = this.curSel.min_value||0;
                this.formData.max_value = this.curSel.max_value||0;
                this.formData.short_desc = this.curSel.short_desc||"";
                this.formData.description = this.curSel.description||"";
                this.formData.is_warn = this.curSel.is_warn||0;
                this.formData.addDimension = this.curSel.addDimension||0;
            }else{
                this.initFormData();
            }
            type == 'edit' && this.$nextTick(()=>{
                this.$refs.formId.resetFields();
                this.$refs.modalId.show();
            })
            type == 'warning' && this.confirm();
        },
        initFormData(){
            this.formData.min_value = 0;
            this.formData.max_value = 0;
            this.formData.short_desc = "";
            this.formData.description = "";
            this.formData.is_warn = 0;
            this.formData.addDimension = 0;
        },
        save() {
            // if(!this.inited)return Promise.resolve(); 
            return Promise.resolve()
        },
        init(type){
            let id = parseInt(this.pageQuery.id||0);
            if(!id){
                return;
            }  
            (!type || type == 'info') && this.getInfoApi('scaleInfo',id).then(res=>{
                this.inited =true;
                let data = res.data||{};
                let items = data.items ||{};
                this.scaleInfo = items;
            });
            (!type || type == 'list') && this.getInfoApi('getStatRuleRangeList',id).then(res=>{
                if(res.code){
                    let data = res.data||{};
                    let points_rule_info = data.points_rule_info;
                    let totalList = points_rule_info && points_rule_info.range_list || [];
                    let dimensionList = data.dimension_rule_list || []; 
                    totalList = totalList.map(item=>({
                        rule_info:item.rule_info||{},
                        range:[item]
                    }));
                    dimensionList = dimensionList.map(item=>({
                        rule_info:item.rule_info||{},
                        range:item.range_list||[]
                    }));

                    this.totalList = totalList;
                    this.dimensionList = dimensionList;
                    console.log('totalList',this.totalList)
                    console.log('dimensionList',this.dimensionList)
                }
            });
        },
        getList(type){
            if(type == 'total'){
                return this.totalList||[]
            }else if(type == 'dimension'){
                return this.dimensionList||[]
            }
        },
        getInfoApi(url,id){
            let params = {};
            url == 'scaleInfo' ? (params.id = id) : (params.model_id = id)
            return this.$MainApi[url]({
                data: params 
            })
            .then((res) => {
                if (res.code) {
                    return res
                }else{
                    return Promise.reject(res);
                }
            })
        },
        tabClick(type){
            this.currentTab = type;
        },
        saveRule(){
            return this.setStatRule().then(rule_id=>{
                return this.setStatRuleRange(rule_id).then(res=>{
                    if(res.code){
                        return res;
                    }
                    return Promise.reject(res)
                });
            })
            // .catch(e=>{
            //     this._reqMessage(e);
            //     return Promise.reject(e);
            // })
        },
        setStatRule(){
            if(this.curSel.rule_id>0)return Promise.resolve(this.curSel.rule_id);
            let tab = this.currentTab;
            return this.$MainApi.setStatRule({
                data: {
                    rule_type:tab=='total'?'total':'dimension',
                    rule_name:tab=='total'?'总分':'维度',
                    description:this.formData.description||'',
                    model_id:this.pageQuery.id||0,
                    dimension_id:tab=='total'?0:(this.formData.addDimension||0),
                    is_main:tab=='total'?1:0,
                    is_warn:tab=='total'?1:0,
                }, 
            }).then(res=>{
                if(res.code){
                    let data = res.data||0;
                    return data
                }
                return Promise.reject(res);
            })
        },
        setStatRuleRange(rule_id){ 
            return this.$MainApi.setStatRuleRange({
                data: {
                    id:this.curSel.id||0,
                    rule_id:this.curSel.rule_id||rule_id||0, 
                    range_name:this.formData.short_desc||"",
                    short_desc:this.formData.short_desc||"",
                    description:this.formData.description||"", 
                    min_value:this.formData.min_value||0,
                    max_value:this.formData.max_value||0,
                    is_warn:this.formData.is_warn||0,
                }, 
            })
        },
        cancel(){
            this.$refs.modalId.dismiss();
        },
        confirm(){
            return this.validate().then(()=>{
                this.setLoading();
                return this.saveRule().then(res=>{
                    this.init('list');
                    this._reqMessage(res);
                    this.$refs.modalId.dismiss();
                    this.setLoading(false);
                    return res;
                }).catch(e=>{
                    return Promise.reject(e);
                }) 
            }).catch(e=>{
                this.setLoading(false);
                console.log('confirm catch',e)
                this.$Message.info(e && e.message || "请完善基础信息");
                return Promise.reject(e);
            })
        },
        setLoading(bool=true){
            if(!bool){
                setTimeout(() => {
                    this.isLoading = bool;
                }, 500);
            }else{
                this.isLoading = bool;
            }
        },
        validate(){ 
            return new Promise((rs,rj)=>{
                this.$refs.formId.validate((valid) => {
                    if (valid) {
                        return rs(this.formData);
                    }else{ 
                        return rj();
                    }
                })
            })
        },
        checkDistrict(min,max){
            let check = true;
            let list = this.getList(this.currentTab)||[];
            for(let i = 0,len=list.length;i<len;i++){
                let l_item = list[i]||{};
                let range = l_item.range || [];
                for(let j = 0,jLen=range.length;j<jLen;j++){
                    let r_item = range[j]||{};
                    console.log('item',(Number(min)>=Number(r_item.min_value) && Number(min)<=Number(r_item.max_value)) || (Number(max)>=Number(r_item.min_value) && Number(max)<=Number(r_item.max_value)),min,max,r_item.min_value,r_item.max_value);
                    if((Number(min)>=Number(r_item.min_value) && Number(min)<=Number(r_item.max_value)) || (Number(max)>=Number(r_item.min_value) && Number(max)<=Number(r_item.max_value))){
                        check = false;
                        break;
                    }
                };
                if(!check){
                    break;
                }
            }
            return check;
        },
        changechange(e){
            console.log('onChange',e)
        },
    },
};
</script>

<style lang="less" scoped>
.result-setting{
    padding: 0 10px;
    .btn-save{
        height: 40px; 
        border-radius: 3px;
        margin-bottom: 10px;
        padding:0;
        width: 87px;
    }
    .title-box{
        margin-bottom: 10px;
        border-radius: 4px;
    }
    .gauge-title-tip{
        font-size: 13px; 
        color: #7F7F7F;
        line-height: 18px;
        margin-bottom: 4px;
    }
    .gauge-title{
        font-size: 16px; 
        color: #333333;
        line-height: 22px;
    }
    .total{
        font-size: 18px;
        font-weight: 500;
        color: #333333;
    }
    .total-box{
        position: relative;
        width: 200px;
        height: 66px;
        background:rgba(216,216,216,0.1);
        flex-wrap: nowrap;
    }
    .total-item {
        width: 50%;
        height: 100%;
    }
    .line{
        width: 1px;
        height: 26px;
        opacity: 0.1;
        background-color: #979797;
        left: 50%;
        top: 50%;
        transform: translate(-50%,-50%);
        position: absolute;
    }
    .result-title{
        font-size: 14px;
        color: #333333;
        margin-bottom: 16px;
    }
    .tab-item{
        width: 400px;
        height: 52px;
        background: #FFFFFF;
        border-radius: 4px 0px 0px 4px;
        border: 1px solid #DDDDDD;
        color: #333;
        transition: all 0.32s;
        &.active{    
            background: #ECF8FE; 
            color: #0083CE;
        }
    }
    .tabs-extra{
        margin:13px 0;
    }
    .btn-add{
        width: 120px;
        height: 38px;
        background: #ECF8FE;
        border-radius: 3px;
        color:#008ACB;
    }
}
.modalTitle{ 
    font-size: 14px; 
    font-weight: 600;
    color: #000000;
    margin-bottom: 16px;
    padding-left: 12px;
}
</style>