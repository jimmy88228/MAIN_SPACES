<template>
    <hold-layout>
        <rewrite-area class="flex-b-c">
            <rewrite-search v-model="searchForm.searchq" @search="()=>loadData()" placeholder="请输入关键词"></rewrite-search>
            <Button @click="editPage()" icon="md-add" v-hasAction="'page_maintenance_add'">新建页面</Button>
        </rewrite-area>
        <Table ref="myTable" :columns="columns" :data="list" border :loading="tableLoading">
            <template slot="title" slot-scope="{ row, index }">
                <p>{{row.layout_name}}</p>
                <Tag color="blue" v-if="row.is_home == 1">主页</Tag>
            </template>
            <template slot="sort" slot-scope="{ row, index }">
                <Poptip placement="right">
                    <p class="pointer">
                        {{row.oldSort}}
                        <Icon class="fs-14" type="md-create" />
                    </p>
                    <div slot="content">
                        <div>
                            排序值
                            <custom-inputNumber :min="1" v-model="row.sort"></custom-inputNumber>
                            数字小排前
                        </div>
                        <div class="p-t-10 p-b-5 text-r">
                            <Button size="small" type="primary" @click="setSort(row, index)" v-hasAction="'page_maintenance_sort'">确定</Button>
                        </div>
                    </div>
                </Poptip>

            </template>
            <template slot="handle" slot-scope="{ row, index }">
                <div class="operate-area">
                    <p class="operate-line">
                        <a class="operate" @click="editPage(row.id)" v-hasAction="'page_maintenance_update'">编辑</a>
                        <a class="operate" v-if="row.is_home != 1" @click="setHomePage(row.id)" v-hasAction="[row.is_home != 1, 'page_maintenance_home_page']">设置为主页</a>
                    </p>
                    <p class="operate-line">
                        <!-- <a class="operate" @click="copyLink(row.copy_link)" v-hasAction="'page_maintenance_copy_link'">复制链接</a> -->
                        <Poptip placement="left" confirm title="确定删除该页面吗?" @on-ok="removeItem(row.id, index)" v-hasAction="'page_maintenance_remove'">
                            <a class="operate">删除</a>
                        </Poptip>

                    </p>
                </div>
            </template>
        </Table>
        <rewrite-page slot="footer" :total="total" :current="page" :page-size="pageSize" :page-size-opts="pageSizeOpts" @on-change="e=>loadData(e)" @on-page-size-change="handlePageSizeChange" show-sizer show-elevator show-total transfer></rewrite-page>
    </hold-layout>
</template>
<script>
import ListMixin from "@/helper/mixin/list-mixin";
import mixins from "./mixins";
export default {
    mixins: [ListMixin, mixins],
    components: {},
    data() {
        return {
            searchForm: {
                searchq: "",
            },
        };
    },
    methods: {
        onLoadData(page, extraData) {
            console.log(this.searchForm,extraData,9999)
            return this.$MainApi
                .pageList({
                    data: {
                        ...this.searchForm,
                        ...extraData,
                    },
                })
                .then((res) => {
                    if (res.code) {
                        let data = res.data || {};
                        let items = data.items || [];
                        items.map((item) => {
                            this.$set(item, "oldSort", item.sort);
                        });
                        this.data = {
                            total: data.total,
                            list: items,
                        };
                    }
                });
        },
        editPage(id) {
            this.$router.push({
                name: "editCustomPage",
                query: {
                    pageId: Number(id) || 0,
                },
            });
        },
        setSort(row, index) {
            console.log("row", row);
            if (!Number(row.id) || row.sort == row.oldSort) {
                return Promise.reject();
            }
            return this.$MainApi
                .pageSort({
                    data: {
                        id: row.id,
                        sort: Number(row.sort),
                    },
                })
                .then((res) => {
                    if (res.code) {
                        this.$nextTick(() => {
                            this.$set(this.data.list[index], "sort", row.sort);
                            this.$set(
                                this.data.list[index],
                                "oldSort",
                                row.sort
                            );
                            console.log("this.oldSort", this.data.list[index]);
                        });
                        this.$Message.success(res.message || "设置成功");
                    } else {
                        this.$set(this.data.list[index], "sort", row.oldSort);
                        this.$Message.warning(res.message || "设置失败");
                    }
                });
        },
        setHomePage(id) {
            if (!Number(id)) {
                this.$Message.warning("无效ID");
                return Promise.reject();
            }
            return this.$MainApi
                .setHomePage({
                    data: {
                        id: id,
                    },
                })
                .then((res) => {
                    if (res.code) {
                        this.handleUpdate();
                        this.$Message.success(res.message || "设置成功");
                    } else {
                        this.$Message.warning(res.message || "设置失败");
                    }
                })
                .finally(() => {
                    this.tableLoading = false;
                });
        },
        copyLink(text) {
            this.$utils.copyText(text);
        },
        removeItem(id, index) {
            this.batchRemoveItemReq(id).then(() => {
                this.delItem(index);
            });
        },
        batchRemoveItemReq(id) {
            if (!Number(id)) {
                this.$Message.warning("无效ID");
                return Promise.reject();
            }
            this.tableLoading = true;
            return this.$MainApi
                .pageRemove({
                    data: {
                        id: id,
                    },
                })
                .then((res) => {
                    if (res.code) {
                        this.$Message.success(res.message || "删除成功");
                        return Promise.resolve();
                    } else {
                        this.$Message.warning(res.message || "删除失败");
                        return Promise.reject();
                    }
                })
                .finally(() => {
                    this.tableLoading = false;
                });
        },
    },
    mounted() {
        this.loadData();
    },
};
</script>

<style>
</style>