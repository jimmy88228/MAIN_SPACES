<template>
<div class="">
  <custom-modal class="choose-problem-modal hold-modal-zindex" ref="modal" :width="640" :closable="true" :isSlotHeader="true" :isSlotFooter="true">
    <div slot="header">选择管理范围<span class="_tip m-l-5">(点击题目可进行范围选择)</span></div>
    <div class="choose-problem-cont _choose-problem-cont">
      <searchForm :searchForm="searchForm" :modelId="modelId" :hasDimensions="hasDimensions" @search="loadData()"></searchForm>
      <div class="problem-table">
        <div class="p-table-header">
          <div class="p-table-tr">
            <div class="p-table-th" :style="tdStyle(cItem)" v-for="(cItem, cIndex) in columns" :key="cIndex">
              {{cItem.title}}
            </div>
          </div>
        </div>
        <div class="p-table-body" @mouseleave="hoverLeave()">
          <div class="p-table-hold" v-bar>
            <div>
              <div class="p-table-tr" :class="[ids.indexOf(lItem._id) != -1?'active':'']" :style="trSelectStyle(lItem, lIndex)" @click="rowClick(lItem, lIndex)" v-for="(lItem, lIndex) in list" :key="lIndex">
              <!-- <div class="p-table-tr" :class="[ids.indexOf(lItem._id) != -1?'active':'']" @mouseenter="trHover(lItem, lIndex)"  :style="trSelectStyle(lItem, lIndex)" @click="rowClick(lItem, lIndex)" v-for="(lItem, lIndex) in list" :key="lIndex"> -->
                <div class="p-table-td" :class="[cItem.slot == 'handle'?'handle':'']" @mouseenter="trHover(lItem, lIndex)" :style="tdStyle(cItem)" v-for="(cItem, cIndex) in columns" :key="cIndex">
                  <template v-if="cItem.type == 'index'">
                    <span >{{getIndex(lIndex)}}</span>
                  </template>
                  <template v-if="cItem.slot == 'dimension'">
                      <div>
                        <span v-for="(item, index) in lItem.dimensionsData" :key="item.id">{{Number(item.id) ? item.name : '--'}}<span v-if="index < lItem.dimensionsData.length - 1">,</span></span>
                      </div>
                  </template>
                  <template  v-else-if="cItem.slot == 'handle'">
                    <div class="operate-area check-box flex-c-c" @click.stop="changeChoose(lItem, null, 'checkbox')">
                      <span class="inline-b p-5" style="margin-right:-8px;">
                        <Checkbox :value="ids.indexOf(lItem._id) != -1">{{lItem.dimension_name}}</Checkbox>
                        <!-- <Checkbox :value="ids.indexOf(lItem._id) != -1" @on-change="changeChoose(lItem, null, 'checkbox')">{{lItem.dimension_name}}</Checkbox> -->
                      </span>
                    </div>
                  </template>
                  <template v-else>
                    {{cItem.key && lItem[cItem.key]}}
                  </template>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <rewrite-page
        slot="footer"
        :total="total"
        :current="page"
        :page-size="pageSize"
        :page-size-opts="pageSizeOpts"
        @on-change="(e) => loadData(e)"
        @on-page-size-change="handlePageSizeChange"
        show-sizer
        show-elevator
        show-total
        transfer
      ></rewrite-page>
    </div>
    <div slot="footer" class="flex-b-c">
      <Button @click="dismiss">取消</Button>
      <div class="flex-s-c">
        <span v-if="ids.length" class="inline-b m-r-10">共选{{ids.length}}题</span>
        <Button type="primary" @click="confirm()">保存</Button>
      </div>
    </div>
    <Spin fix v-if="pageLoading"></Spin>
  </custom-modal>
</div>
</template>

<script>

import ListMixin from "@/helper/mixin/list-mixin";
import mixins from "./mixins.js";
import searchForm from "./search-form.vue";
export default {
  mixins: [ ListMixin, mixins ],
  components: {
    searchForm
  },
  props: {
    modelId: {
      type: Number | String,
      default: 0
    },
    problemsData: {
      type: Array,
      default: ()=>{
        return []
      }
    },
  },
  data(){
    return {
      searchForm: {
        state: 0,
        dimensions: []
      },
      chooseProblem: [],
      isLocked: false,
      hasDimensions: [],
      clickOperate: {},
      defClickOperate: {
        start: -1,
        hover: -1,
        end: -1
      }
    }
  },
  computed: {
    ids(){
      let chooseProblem = this.chooseProblem || [];
      let ids = []
      chooseProblem.map((item)=>{
        if(item._id){
          ids.push(item._id)
        }
      })
      return ids;
    }
  },
  methods: {
    dismiss() {
      this.$refs.modal.dismiss();
    },
    showModal({ chooseProblem = [] }){
      this.chooseProblem = JSON.parse(JSON.stringify(chooseProblem || []));
      this.searchForm = {
        state: 0,
        dimensions: []
      }
      this.clickOperate = JSON.parse(JSON.stringify(this.defClickOperate));
      this.isLocked = false;
      this.pageSize = 100;
      this.loadData();
      this.$refs.modal.show();
    },
    onLoadData(page, extraData) {
      this.clickOperate = JSON.parse(JSON.stringify(this.defClickOperate));
      return new Promise((rs, rj)=>{
        let page = Number(extraData.page) || 1;
        let pageSize = Number(extraData.pageSize);
        let problemsData = JSON.parse(JSON.stringify(this.problemsData || []));
        let data = [];
        let searchForm = this.searchForm || {};
        let installData = [];
        let hasDimensions = [];
        problemsData.map((item)=>{
          let hasPush = false, isHasDimension = false;
          let iDimensions = item.dimensions || [];
          if(!(!iDimensions.length ||  (iDimensions.length == 1 && iDimensions[0] == 0))){
            isHasDimension = true;
          }
          
          if(searchForm.state == -1){
            hasPush = true;
          }else if(searchForm.state){
            let sDimensions = searchForm.dimensions || [];
            if(sDimensions.length){
              if(isHasDimension){
                if((sDimensions.length + iDimensions.length) !== Array.from(new Set([...sDimensions,...iDimensions])).length){
                  hasPush = true;
                }
              }
            } else if(isHasDimension){
                hasPush = true;
              }
          } else if(!isHasDimension){
            hasPush = true;
          }
          if(hasPush){
            installData.push(item);
          }
          if(!this.isLocked){
            hasDimensions = Array.from(new Set([...hasDimensions,...iDimensions]));
          }
        })
        if(!this.isLocked){
          this.hasDimensions = hasDimensions;
          this.isLocked = true;
        }
        data = installData.slice((page - 1) * pageSize, page * pageSize)
        this.data = {
          total: installData.length,
          list: data
        };
        console.log("data", data)
        return rs();
      })
    },
    getIndex(index){
      let base = ((Number(this.page) - 1) || 0) * Number(this.pageSize)
      return index + base + 1;
    },
    tdStyle(item){
      let style = "";
      if(item.width){
        style = style + "max-width:" + item.width + "px;"
      }
      if(item.minWidth){
        style = style + "min-width:" + item.minWidth + "px;"
      }
      if(item.align){
        style = style + "text-align:" + item.align + ";justify-content:" + item.align + ";"
      }
      return style
    },
    rowClick(row, index){
      let { start, end } = this.clickOperate || {};
      if(start == -1 || end > -1){
        this.clickOperate.start = index;
        this.clickOperate.hover = -1;
        this.clickOperate.end = -1;
        this.chooseProblem = [];
        this.changeChoose(row, true);
      } else if(start > -1){
        if(start == index){
          this.clickOperate.start = -1;
          this.changeChoose(row, false);
        } else {
          this.clickOperate.end = index;
          this.clickOperate.hover = index;
          this.chooseRange(start, index);
        }
      }
    },
    trHover(row, index){
      let clickOperate = this.clickOperate || {};
      if(clickOperate.start == -1 || clickOperate.end > -1){ return; }
      this.clickOperate.hover = index;
      console.log('hover',index,this.clickOperate)
    },
    hoverLeave(){
      if(this.clickOperate.end == -1){
        this.clickOperate.hover = -1;
      }
    },
    trSelectStyle(row, index){
      let {start, hover, end} = this.clickOperate || {};
      console.log('trSelectStyle',index,'--',start,end)
      if(start == -1){
        return "";
      }
      if(start == index || end == index){
        return "background-color:red;"
      }
      if(hover == -1) {
        return "";
      }
      if(hover > start){
        if(hover > index && index > start){
          return "background-color:blue"
        }
      } 
      if(hover < start){
        if(hover < index && index < start){
          return "background-color:blue"
        }
      }
      return "";
    },
    changeChoose(row, setChecked, type){
      let index = this.ids.indexOf(row._id);
      if(typeof(setChecked) == 'boolean'){
        if(index == -1 && setChecked){
          this.chooseProblem.push(row);
        }
        if(index != -1 && !setChecked){
          this.chooseProblem.splice(index, 1);
        }
      } else {
        if(index == -1){
          this.chooseProblem.push(row);
        } else if(!setChecked){
          this.chooseProblem.splice(index, 1);
        }
      }
      if(type == 'checkbox'){
        this.clickOperate = JSON.parse(JSON.stringify(this.defClickOperate));
      }
    },
    chooseRange(start, end){
      start = Number(start);
      end = Number(end);
      let sIndex = Math.min(start, end)
      let eIndex = Math.max(start, end)
      if((sIndex || sIndex == 0) && (eIndex || eIndex == 0)){
        let list = this.data.list || [];
        let data = list.slice(sIndex, (eIndex + 1));
        this.chooseProblem = data;
      }
    },
    confirm(){
      if(!this.chooseProblem.length){
        this.$Message.warning("请选择问题");
        return;
      }
      this.$emit("chooseProblem", this.chooseProblem);
      this.dismiss();
    },
  }
}
</script>

<style lang="less" scoped>
.choose-problem-modal{
  .add-dimension{
    width: 124px;
    height: 40px;
    background: #ECF8FE;
    font-size: 14px;
    font-family: PingFangSC-Regular, PingFang SC;
    font-weight: 400;
    color: #008ACB;
    line-height: 20px;
    margin-bottom: 10px;
  }
  .dimension-item{
    display: inline-block;
    width: 166px;
    margin-right:10px;
    margin-bottom: 18px;
  }
  .choose-problem-cont{
    margin: -10px;
    margin-bottom: -30px;
  }
  .problem-table{
    border-radius: 4px;
    overflow: hidden;
    border: 1px solid #DDDDD0;
    border-bottom: 0 none;
    .p-table-tr{
      display: flex;
      width:100%;
      // align-items: center;
      background-color:#fff;
      border-bottom: 1px solid #DDDDD0;
      transition: all .35s;
      min-height: 50px;
      cursor: pointer;
    }
  }
  .p-table-header{
    .p-table-tr{
      background: #F6F6F6;
    }
    .p-table-th{
      min-width: 0;
      text-align: left;
      text-overflow: ellipsis;
      vertical-align: middle;
      font-size: 14px;
      position: relative;
      padding: 8px;
      flex: 1;
      flex-shrink: 0;
      font-family: PingFangSC-Regular, PingFang SC;
      font-weight: 400;
      color: #7F7F7F;
      display: flex;
      flex-wrap: nowrap;
      align-items: center;
    }
  }
  .p-table-body{
    max-height: 400px;
    min-height: 200px;
    display: flex;
    .p-table-tr:hover{
      background-color:#EBF7FF;
    }
    .p-table-tr.active{
      background-color: blue;
    }
    .p-table-td{
      min-width: 0;
      box-sizing: border-box;
      text-align: left;
      text-overflow: ellipsis;
      vertical-align: middle;
      padding: 8px;
      flex: 1;
      flex-shrink: 0;
      display: flex;
      flex-wrap: nowrap;
      align-items: center;
      border-right:1px solid #DDDDD0;
      &.handle{
        padding: 0;
      }
    }
    .p-table-hold{
      flex: 1;
    }
  }
  .check-box{
    margin: 0;
    min-height: 40px;
    width: 100%;
  }
}
</style>
<style lang="less">
._choose-problem-cont{
  .ivu-form-item-error-tip{
    padding-top: 2px;
  }
  .ivu-checkbox-inner{
    border-radius: 100%;
    border-color: #979797;
  }
  .ivu-checkbox-checked .ivu-checkbox-inner{
    border-color: #1988CD;
  }
  .ivu-checkbox-inner:after{
    content: "";
    border: none;
    border-radius: 100%;
    width: 6px;
    height: 6px;
    position:absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color:#fff;
  }
}

</style>