<template>
<div class="">
  <custom-modal class="batch-relate-dimension-modal hold-modal-zindex" ref="modal" :width="560" :closable="true" :isSlotHeader="true" :isSlotFooter="true">
    <div slot="header">批量关联维度</div>
    <div class="relate-dimension-cont _relate-dimension-cont">
      <div class="relate-tip">选择关联范围</div>
      <span class="inline-b" v-for="(item, index) in chooseData" :key="index">
        <Tag class="m-r-5 m-b-5" type="border"  closable color="primary" @on-close="chooseData.splice(index, 1)">
          <div class="w-break">{{item.question}}</div>
        </Tag>
      </span>
      <span class="inline-b"><span class="choose-btn flex-c-c" @click="chooseProblemEvent">点击选择题目</span></span>
      <div class="relate-tip">关联维度</div>
      <div class="inline-b base-input"> 
        <dimensionSelect v-model="dimensions" :modelId="modelId" :multiple="true" placeholder="选择维度" @change="getDimensionData"></dimensionSelect>
      </div>
    </div>
    <div slot="footer">
      <Button @click="dismiss">取消</Button>
      <Button type="primary" @click="confirm()">确定并保存</Button>
    </div>
    <Spin fix v-if="pageLoading"></Spin>
  </custom-modal>
  <chooseProblem ref="chooseProblemRef" :modelId="modelId" :problemsData="problemsData" @chooseProblem="chooseProblemCallback"></chooseProblem>
</div>
</template>

<script>
import dimensionSelect from "../../components/dimension-select/index";
import chooseProblem from "../choose-problem/index.vue";
export default {
  components: {
    dimensionSelect,
    chooseProblem
  },
  props: {
    modelId: {
      type: Number | String,
      default: 0
    },
    problemsData: {
      type: Array,
      default: ()=>{
        return []
      }
    },
  },
  data(){
    return {
      dimensions: [],
      dimensionsData: [],
      chooseData: []
    }
  },
  methods: {
    dismiss() {
      this.$refs.modal.dismiss();
    },
    showModal(){
      this.dimensions = [];
      this.dimensionsData = [];
      this.chooseData = [];
      this.$refs.modal.show();
    },
    chooseProblemEvent(){
      this.$refs["chooseProblemRef"] && this.$refs["chooseProblemRef"].showModal({chooseProblem: this.chooseData})
    },
    chooseProblemCallback(chooseData){
      this.chooseData = chooseData;
    },
    getDimensionData(data, fullData){
      this.dimensionsData = fullData;
    },
    confirm(){
      let chooseData = this.chooseData || [];
      if(!this.chooseData.length){
        this.$Message.warning("请选择题目");
        return;
      }
      let ids = [];
      for(let i = 0; i < chooseData.length; i++){
        ids.push(chooseData[i].id);
      }
      let problemsData = this.problemsData || [];
      for(let i = 0; i < problemsData.length; i++){
        let id = problemsData[i].id;
        if(ids.indexOf(id) != -1){
          problemsData[i].dimensions = this.dimensions;
          problemsData[i].dimensionsData = this.dimensionsData;
        }
      }
      this.dismiss();
    }
  }
}
</script>

<style lang="less" scoped>
.batch-relate-dimension-modal{
  .choose-btn{
    width: 124px;
    height: 40px;
    background: #ECF8FE;
    font-size: 14px;
    font-family: PingFangSC-Regular, PingFang SC;
    font-weight: 400;
    color: #008ACB;
    line-height: 20px;
    margin-bottom: 10px;
    cursor: pointer;
  }
  .relate-dimension-cont{
    margin: -10px 0px;
  }
  .relate-tip{
    padding: 20px 0px 13px 0px; 
  }
  .ivu-tag{
    display: flex;
    align-items: center;
    height: auto;
    min-height: 24px;
  }
}
</style>
<style lang="less">
._relate-dimension-cont{
  .ivu-form-item-error-tip{
    padding-top: 2px;
  }
}

</style>