<template>
	<DatePicker 
	:type="type" 
	:multiple="multiple"
	:format="format"
	:placement="placement"
	:placeholder="placeholder"
	:options="options"
	:size="size"
	:split-panels="splitPanels"
	:show-week-number="showWeekNumbers"
	:time-picker-options="timePicker"
	:value="value"
	@on-change="selectChange"
	:clearable="clearable"
	:disabled="disabled"
	class="date-picker"
	:class="type + '-picker'"
	></DatePicker>
</template>
<script>
	import DateH from "@/helper/date-manager.js";
	export default{
		name: 'dateTime',
		model: {
			prop: 'value',
			event: 'change'
		},
		props: {
			type: {
				type: String,
				default: "date"
			},
			value: Date | Array,
			format: Date,
			placement: String,
			transfer: Boolean,
			multiple: Boolean,
			// options:Object,
			size: String,
			"split-panels": Boolean,
			"show-week-numbers": Boolean,
			isFullW:{
				type: Boolean,
				default: false
			},
			clearable: {
				type: Boolean,
				default: true
			},
			disabled: {
				type: Boolean,
				default: false
			},
			placeholder: {
				type: String,
				default: ""
			},
			beforeNow: Boolean, // 限制只可选以前时间
			afterNow: Boolean, // 限制只可选以后时间
		},
		data(){
			return {
				selectValue: 0,
				timePicker: {}
			}
		},
		computed:{
			options(){
				let that = this;
				return {
					disabledDate (date) {
							let beforeNow = that.beforeNow;
							let afterNow = that.afterNow;
							let result = false;
							let todayDate = new Date().setHours(0,0,0,0);
							let _date = date.setHours(0,0,0,0);
							let _dateValue = (date && date.valueOf()) || 0
							if(beforeNow){
								if(_dateValue < Date.now() || _date == todayDate){
									result = false;
								} else {
									result = true;
								}
							}
							if(afterNow && !result){
								if(date.valueOf() > Date.now() || _date == todayDate){
									result = false;
								} else {
									result = true;
								}
							}
							return result;
					}
				}
			},
		},
		methods:{
			setTimePicker(date){
				let timePicker = {};
				if(this.beforeNow || this.afterNow){
					let currStart = date instanceof Array ? date[0] : date;
					let currEnd = date instanceof Array ? date[1] : date;
					timePicker = { disabledHours: DateH.getDisabledHour(currStart, this.beforeNow ? 'before' : 'after'), disabledMinutes: DateH.getDisabledMin(currEnd, this.beforeNow ? 'before' : 'after') }
				} else {
					timePicker = {};
				}
				this.timePicker = timePicker;
			},
			selectChange(data){
				this.setTimePicker(data);
				let _data = [];
				if(data instanceof Array){
					for(let i = 0; i < data.length; i++){
						if(data[i]){
							_data.push(data[i]);
						}
					}
				} else {
					_data = data
				}
				this.$emit('change', _data);
			}
		},
		mounted(){},
		watch:{
			value:{
				handler(nV) {
					
				},
				immediate: true
			},
		}
	}
</script>
<style lang="less" scoped>
	.date-picker{
		width:100%;
		min-width: 180px;
	}
	.datetimerange-picker{
		width:100%;
		min-width: 320px;
	}
	.daterange-picker{
		width:100%;
		min-width: 180px;
	}
</style>