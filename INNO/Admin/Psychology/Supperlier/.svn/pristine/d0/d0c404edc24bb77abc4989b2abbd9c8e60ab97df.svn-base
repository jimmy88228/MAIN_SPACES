import StringUtil from "@/helper/utils/string-util.js";
export default {
  methods: {
    checkValidTime(rule, value, callback) {
      const {
        field
      } = rule;
      if(field.type == 'Array'){
        if(value instanceof Array && value.length > 0 && value[0]) {
          callback();
        } else {
          callback(new Error(field.message || '请选择时间'));
        }
      } else {
        value ? callback() : callback(new Error(field.message || '请选择时间'));
      }
    },
    _checkBeforeTime(rule, value, callback) {
      const {
        field
      } = rule;
        if(!value){
          callback(field.message || '请选择时间')
        }else if(!_checkBeforeTimeHandle(value)){
          callback(field.message || '时间不能大于当前时间');
        } else {
          callback();
        }
    },
    _checkAfterTime(rule, value, callback) {
      const {
        field
      } = rule;
      if(!value){
        callback(field.message || '请选择时间')
      }else if(!_checkAfterTimeHandle(value)){
        callback(field.message || '时间不能小于当前时间');
      } else {
        callback();
      }
    },
    _checkPhone(rule, value, callback){
      const {
        field
      } = rule;
      if(!value){
        callback(new Error('手机号不能为空'))
      } else if(!/^1[123456789]\d{9}$/.test(value)){
        callback(new Error('手机号格式不正确'))
      } else {
        callback();
      }
    },
    _checkString(rule, value, callback){
      const {
        field
      } = rule;
      if(StringUtil.trim(value || '')){
        callback();
      } else {
        callback(new Error(field.message || '值不能为空'));
      }
    },
    _checkArray(rule, value, callback){
      const {
        field
      } = rule;
      if(value.length > 0 && (value[0] || value[0] == 0)){
        callback();
      } else {
        callback(new Error(field.message || '值不能为空'));
      }
    },
    _checkInt(rule, value, callback){
      const {
        field
      } = rule;
      if(Number(value) || value == '0'){
        callback();
      } else {
        callback(new Error(field.message || '请输入正确的值'));
      }
    },
    _checkThanInt(rule, value, callback){
      const {
        field
      } = rule;
      console.log('form规则',Number(value) > 0,value)
      if(Number(value) > 0){
        callback();
      } else {
        callback(new Error(field.message || '请输入正确的值'));
      }
    },
    _checkNativeInt(rule, value, callback){
      const {
        field
      } = rule;
      if(Number(value) > -1){
        callback();
      } else {
        callback(new Error(field.message || '请输入正确的值'));
      }
    },
  }
}

// 
function _checkAfterTimeHandle(value){
  if(value){
   return new Date(value).valueOf() > new Date().valueOf()
  }
}
// 
function _checkBeforeTimeHandle(value){
  if(value){
   return new Date(value).valueOf() < new Date().valueOf()
  }
}