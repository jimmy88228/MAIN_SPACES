<template>
  <div class="problems-detail-area">
    <div class="problems-detail-cont">
      <div class="f-shrink0 detail-item">
        <detailLeftSet :problemsInfo="problemsInfo" @setAllValue="setAllValue"></detailLeftSet>
        <Spin fix v-if="infoLoading"></Spin>
      </div>
      <div class="f-shrink0 detail-item">
        <detailView :operateInfo="operateInfo" :problemsInfo="problemsInfo" :problemsData="problemsData" @importData="importData"></detailView>
        <Spin fix v-if="dataLoading"></Spin>
      </div>
      <div class="f-shrink0 detail-item">
        <detailRightSet ref="detailRightSetRef" :titleLimitNum="titleLimitNum" :optionLimitNum="optionLimitNum" :operateInfo="operateInfo" :problemsInfo="problemsInfo" :itemInfo="currItemInfo" @removeModule="removeModule"></detailRightSet >
      </div>
    </div>
    <!-- <div class="problems-detail-operate">
      <Button type="primary" @click="confirm" :loading="infoLoading || dataLoading">&nbsp;保 存&nbsp;</Button>
    </div> -->
    <importProblem ref="importProblemRef" :titleLimitNum="titleLimitNum" :optionLimitNum="optionLimitNum" :importData="problemsData" @confirm="confirmImport"></importProblem>
  </div>
</template>

<script>
import detailLeftSet from "./widgets/detail-left-set.vue";
import detailView from "./widgets/detail-view.vue";
import detailRightSet from "./widgets/detail-right-set.vue";
import importProblem from "../components/import-problem/index.vue";
export default {
  components: {
    detailLeftSet,
    detailView,
    detailRightSet,
    importProblem
  },
  data(){
    return {
      operateInfo: {
        currIndex: -1
      },
      problemsInfo: {
        testId: 0,
        type: "",
        multi_choice: 0, // 0单选 1多选
        point_setting: "",
        question_count: 0,
        subject_data: []
      },
      problemsData: [],
      OSubjectIds: [],
      OOptionIds: [],
      OFactorIds: {},
      infoLoading: false,
      dataLoading: false,
      //
      titleLimitNum: 120,
      optionLimitNum: 50,
    }
  },
  computed: {
    currItemInfo(){
      let operateInfo = this.operateInfo || {};
      let currItemInfo = {};
      if(operateInfo.currIndex > -1){
        currItemInfo = this.problemsData[operateInfo.currIndex] || {};
      }
      return currItemInfo;
    }
  },
  methods:{
    loadTestData(){
      // let pageQuery = this.pageQuery || {};
      // if(!pageQuery.testId) return Promise.reject();
      // this.infoLoading = true;
      // return this.$MainApi
      //   .scaleSubjectInfo({
      //     data: {
      //       id: pageQuery.id,
      //     },
      //   })
      //   .then((res) => {
      //     if (res.code) {
      //       let data = res.data || {};
      //       this.problemsInfo = data.items || {};
      //     }
      //   }).finally(()=>{
      //     this.infoLoading = false
      //   })
    },
    loadProblemsData(){
      let pageQuery = this.pageQuery || {};
      if(!pageQuery.id) return Promise.reject();
      this.dataLoading = true;
      return this.$MainApi.scaleSubjectInfo({
        data: {
          id: pageQuery.id
        },
      })
      .then((res) => {
        if (res.code) {
          let data = res.data || {};
          let items = data.items || [];
          // 根据sort按小到大排序
          items.sort((a, b)=>{
            return a.sort > b.sort
          })
          items.map((pItem)=>{
            let option_data = pItem.option_data || [];
            option_data.map((item, index)=>{
              let factor_data = item.factor_data || [];
              let value = factor_data[0] ? factor_data[0].points : '';
              let is_positive = factor_data[0] ? factor_data[0].is_positive : 0;
              item.value = parseFloat(value) >= 0 ? parseFloat(value) : '';
              item.is_positive = is_positive;
            })
          })
          this.problemsData = items
          this.getJsonData(JSON.parse(JSON.stringify(items || [])));
        }
      }).finally(()=>{
        this.dataLoading = false;
      })
    },
    importData(){
      this.$refs["importProblemRef"] && this.$refs["importProblemRef"].showModal();
    },
    confirmImport(data){
      if(data && data instanceof Array){
        this.problemsData = this.problemsData.concat(data);
      }
    },
    setAllValue(){
      // 兼容英文，中文;
      let point_setting = this.problemsInfo.point_setting || '';
      point_setting = point_setting.replace(/；/g, ';');
      let points = point_setting.split(";") || [];
      let problemsData = this.problemsData || [];
      problemsData.map((pItem)=>{
        let option_data = pItem.option_data || [];
        option_data.map((item, index)=>{
          if(points[index] || points[index] == 0){
            item.value = points[index]
          }
        })
      })
    },
    getJsonData(data){ // 将数据兑换成 题目id: [optionId,optionId,optionId....]，方便后续对比出删除id
      if(data instanceof Array){
        let OSubjectIds = [], OOptionIds = [], OFactorIds = {};
        data.map((pItem)=>{
          if(pItem.id) OSubjectIds.push(pItem.id);
          let option_data = pItem.option_data || [];
          option_data.map((item, index)=>{
            if(item.id){
              OOptionIds.push(item.id);
            }
            let factor_data = item.factor_data || [];
            factor_data.map((fItem, fIndex)=>{
              if(fItem.dimension_id){
                if(!OFactorIds[item.id]){
                  OFactorIds[item.id] = []
                }
                OFactorIds[item.id].push(fItem.dimension_id)
              }
            })
          })
        })
        this.OFactorIds = OFactorIds || {};
        this.OSubjectIds = OSubjectIds || [];
        this.OOptionIds = OOptionIds || [];
      }
    },
    removeModule(detail){
      if(detail.currIndex || detail.currIndex == 0){
        this.problemsData.splice(detail.currIndex, 1)
        this.operateInfo.currIndex = -1;
      }
    },
    checkConfirm(){
      // 循环题目，找必填，题目删除项，选项删除项
      let problemsInfo = this.problemsInfo || {};
      let problemsData = this.problemsData || [];
      let warnIndex = -1, warnOptionIndex = -1;
      let problemsCount = problemsData.length;
      let OSubjectIds = JSON.parse(JSON.stringify(this.OSubjectIds)) || [];
      let OOptionIds = JSON.parse(JSON.stringify(this.OOptionIds)) || [];
      let OFactorIds = JSON.parse(JSON.stringify(this.OFactorIds)) || {};

      for(let i = 0; i < problemsData.length; i++){
        let pItem = problemsData[i] || {};
        let option_data = pItem.option_data || [];
        if(!pItem.question && !pItem.picture){
          warnIndex = i;
          this.$Message.warning("题目名称不能为空")
          break;
        }
        // 排序， 从1开始
        pItem.sort = Number(i + 1);
        // 剩余题目数
        pItem.rest_questions = problemsCount - pItem.sort;
        // 存在的题目，在OSubjectIds中剔除
        let delSubjectIndex = OSubjectIds.indexOf(pItem.id);
        if(delSubjectIndex != -1){
          OSubjectIds.splice(delSubjectIndex, 1)
        }
        if(!option_data || option_data.length == 0) {
          warnIndex = i;
          this.$Message.warning("请添加选项")
          break;
        }
        for(let j = 0; j < option_data.length; j++){
          let oItem = option_data[j] || {};
          if(!oItem.option_content && !oItem.option_picture){
            warnIndex = i;
            warnOptionIndex = j;
            this.$Message.warning("选项名称不能为空")
            break;
          }
          if(!oItem.value && oItem.value != '0'){
            warnIndex = i;
            warnOptionIndex = j;
            this.$Message.warning(problemsInfo.type == 'dimension' ? "选项类型不能为空" : "选项分值不能为空")
            break;
          }
          // 选项排序, 从1开始
          oItem.sort = j + 1;
          // 结果到达下一题
          oItem.next_question_sort = oItem.sort < problemsCount ? oItem.sort + 1 : 0;
          // 存在的选项，在OOptionIds中剔除
          let delOptionIndex = OOptionIds.indexOf(oItem.id);
          if(delOptionIndex != -1){
            OOptionIds.splice(delOptionIndex, 1)
          }
          // 维度
          let factor_data = oItem.factor_data || [];
          let hasFactor = oItem.id && OFactorIds[oItem.id] && OFactorIds[oItem.id].length > 0;
          for(let f = 0; f < factor_data.length; f++){
            let OFactorIdsIndex = -1;
            if(hasFactor){
              // 存在的维度，在OFactorIds中剔除
              OFactorIdsIndex = OFactorIds[oItem.id].indexOf(factor_data[f].dimension_id);
              if(OFactorIdsIndex != -1){
                try {
                  OFactorIds[oItem.id].splice(OFactorIdsIndex, 1)
                } catch (error) {}
              }
            }
            // 赋值
            factor_data[f].is_edit = OFactorIdsIndex != -1 ? 1 : 0;
            factor_data[f].is_positive = oItem.is_positive;
            factor_data[f].question_sort = pItem.sort;
            factor_data[f].option_sort = oItem.sort;
            factor_data[f].points  = oItem.value;
          }
          if(OFactorIds[oItem.id] && OFactorIds[oItem.id].length == 0){
            delete OFactorIds[oItem.id];
          }
          if(factor_data.length == 0){
            oItem.factor_data = [
              {
                is_edit:  OFactorIdsIndex != -1 ? 1 : 0, //0 是新增，1是编辑
                question_sort: pItem.sort, //问题排序
                option_sort: oItem.sort, //选项的序号
                dimension_id: 0, //维度因子
                is_positive: oItem.is_positive, //是否阳性 0 1
                points: oItem.value //分值
              }
            ]
          }
        }
        if(warnIndex > -1 || warnOptionIndex > -1){
          break;
        }
      }
      return {
        warnOptionIndex,
        warnIndex,
        OSubjectIds,
        OOptionIds,
        OFactorIds
      };
    },
    confirm(){
      if(this.problemsData.length == 0){
        this.$Message.warning("请添加题目");
        return;
      }
      let { warnIndex, OSubjectIds, OOptionIds, OFactorIds, warnOptionIndex } = this.checkConfirm();
      if(warnIndex > -1){
        this.operateInfo.currIndex = warnIndex;
        this.$nextTick(()=>{
          let detailRightSetRef = this.$refs["detailRightSetRef"];
          detailRightSetRef && detailRightSetRef.checkForm().finally(function(){
            if(warnOptionIndex || warnOptionIndex == 0) detailRightSetRef.scrollIntoView(warnOptionIndex);
          })
        })
      } else {
        this.save(OSubjectIds, OOptionIds, OFactorIds);
      }
    },
    save(OSubjectIds, OOptionIds, OFactorIds){
      let problemsData = this.problemsData || [];
      console.log("problemsData", problemsData);
      let reqData = {
        model_id: this.pageQuery.id,
        subject_data: problemsData,
        del_subject_ids: OSubjectIds,
        del_option_ids: OOptionIds,
        del_factor_ids: OFactorIds
      }
      this.infoLoading = true;
      this.dataLoading = true;
      return this.$MainApi.scaleSubjectSave({
        data: reqData,
      })
      .then((res) => {
        if (res.code) {
          this.$Message.success(res.message);
          this.$router.back();
        } else {
          this.$Message.warning(res.message);
        }
      }).finally(()=>{
        setTimeout(()=>{
          this.infoLoading = false;
          this.dataLoading = false;
        }, 350)
      })
    }
  },
  mounted(){
    this.loadTestData();
    this.loadProblemsData();
  }
}
</script>

<style lang="less" scoped>
.problems-detail-area{
  display: flex;
  flex-direction: column;
  height: 100%;
  background-color:#efefef;
  .problems-detail-cont{
    display: flex;
    flex: 1;
    overflow: hidden;
  }
  .detail-item{
    position:relative;
    height:100%;
  }
  .problems-detail-operate{
    // padding: 10px;
    // background-color:#fff;
    padding: 20px;
  }
}
</style>