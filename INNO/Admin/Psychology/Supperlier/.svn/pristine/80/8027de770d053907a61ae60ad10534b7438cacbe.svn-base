<template>
  <hold-layout :isFull="true" class="supervise-page-layout">
    <rewrite-screen :baseData="[{ type: 'search', name: '搜索',  key: 'searchq' }]"></rewrite-screen>
    <searchForm :searchForm="searchForm" @search="loadData()"></searchForm>
    <Table class="no-remove full-table" ref="myTable" :columns="columns" :data="list" border :loading="tableLoading" @on-selection-change="selectDataEvent">

      <template slot="field_way" slot-scope="{ row }">
        {{row.get_field && row.get_field.field_name}}
      </template>
      <template slot="consultant_way" slot-scope="{ row }">
        {{(row.get_consultant_service && row.get_consultant_service.service_name) || '--'}}
      </template>
      <template slot="target" slot-scope="{ row }">
        <div class="target">
          <p class=" text-flow" :class="isShowCustomName(row) ? 'target-name' : ''">{{row.get_target && row.get_target.target_name}}</p>
          <p class="target-customer text-flow" v-if="isShowCustomName(row)">{{row.get_target && row.get_target.get_customer && row.get_target.get_customer.customer_name}}</p>
        </div>
      </template>
      <template slot="handle" slot-scope="{ row }">
        <div class="operate-area">
          <a class="operate" v-hasAction="true" @click="checkSupervise(row)">查看</a>
          <a class="operate" v-hasAction="[(row.handle && row.handle.allocation)]" @click="setHandle(row)">分配督导</a>
          
          <!-- <a class="operate" v-hasAction="true">删除</a> -->
        </div>
      </template>

    </Table>
    <rewrite-page slot="footer" :total="total" :current="page" :page-size="pageSize" :page-size-opts="pageSizeOpts" @on-change="e=>loadData(e)" @on-page-size-change="handlePageSizeChange" show-sizer show-elevator show-total transfer></rewrite-page>
    <checkSupervise ref="checkSuperviseRef" title="预约信息" @handle="setHandle"></checkSupervise>
    <!---->
    <handleSupervise ref="handleSuperviseRef" @success="handleSuccess"></handleSupervise>
  </hold-layout>
</template>

<script>
import ListMixin from "@/helper/mixin/list-mixin";
import searchForm from "./search-form";
import mixins from "./mixins";
import checkSupervise from "./check-supervise/index.vue";
import handleSupervise from "./handle-supervise/index.vue";
export default {
  name: "gaugeIndex",
  mixins: [ListMixin, mixins],
  components: { searchForm, checkSupervise, handleSupervise },
  data() {
    return {
      searchForm: {
        searchq: "",
        customer_id: 0,
        state: -1,
      },
      selectData: [],
    };
  },
  computed: {
    ids() {
      let selectData = this.selectData || [];
      let ids = [];
      if (selectData instanceof Array) {
        for (let i = 0; i < selectData.length; i++) {
          if (selectData[i].appointment_id || selectData[i].appointment_id + "" == 0) {
            ids.push(selectData[i].appointment_id);
          }
        }
      }
      return ids;
    },
  },
  methods: {
    selectDataEvent(selectData) {
      this.selectData = selectData || [];
    },
    isShowCustomName(item){
      let get_target = item.get_target || {};
      let get_customer = get_target.get_customer || {};
      if(get_target.target_name != get_customer.customer_name && get_customer.customer_name){
        return true;
      } else {
        return false;
      }
    },
    onLoadData(page, extraData) {
      return this.$MainApi
        .supervisorList({
          data: {
            ...this.searchForm,
            ...extraData,
          },
          other: {
            isErrorMsg: true
          }
        })
        .then((res) => {
          if (res.code) {
            let data = res.data || {};
            let items = data.items || [];
            items.map((item)=>{
              if(item.consult_result == 1 || (item.handle && !item.handle.dispose)){
                item._disabled = true
              }
            })
            this.data = {
              total: data.total,
              list: data.items,
            };
          }
        });
    },
    checkSupervise(row) {
      this.$refs["checkSuperviseRef"] &&
        this.$refs["checkSuperviseRef"].showDrawer({
          id: row.id
        });
    },
    setHandle(row) {
      this.$refs["handleSuperviseRef"] &&
        this.$refs["handleSuperviseRef"].showModal({superviseInfo: row});
    },
    handleSuccess(detail = {}){
      this.$refs["checkSuperviseRef"] &&
        this.$refs["checkSuperviseRef"].getView(detail.id);
      this.handleUpdate();
    },
  },
  mounted() {
    this.loadData();
  },
};
</script>

<style lang="less" scoped>
.supervise-page-layout {
  .consult {
    .consult-img {
      width: 44px;
      height: 44px;
      position: relative;
      margin-right: 10px;
      background-color: #f2f2f2;
      overflow: hidden;
      img {
        width: 100%;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
      }
    }
  }
  .target {
      .target-name {
        font-size: 16px;
        font-family: PingFangSC-Regular, PingFang SC;
        font-weight: 400;
        color: #171717;
        line-height: 22px;
        margin-bottom: 6px;
      }
      .target-customer {
        font-size: 12px;
        font-family: PingFangSC-Regular, PingFang SC;
        font-weight: 400;
        color: #7f7f7f;
        line-height: 17px;
      }
    }
}
</style>