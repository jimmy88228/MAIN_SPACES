<template>
  <div class="problems-detail-area">
    <div class="problems-detail-cont">
      <div class="f-shrink0 detail-item">
        <detailLeftSet :problemsInfo="problemsInfo" @setAllValue="setAllValue"></detailLeftSet>
        <Spin fix v-if="infoLoading"></Spin>
      </div>
      <div class="f-shrink0 detail-item">
        <detailView @onClearData="onClearData" :operateInfo="operateInfo" :problemsInfo="problemsInfo" :problemsData="problemsData" @importData="importData"></detailView>
        <Spin fix v-if="dataLoading"></Spin>
      </div>
      <div class="f-shrink0 detail-item">
        <detailRightSet ref="detailRightSetRef" :titleLimitNum="titleLimitNum" :optionLimitNum="optionLimitNum" :operateInfo="operateInfo" :problemsInfo="problemsInfo" :itemInfo="currItemInfo" @removeModule="removeModule"></detailRightSet >
      </div>
    </div>
    <!-- <div class="problems-detail-operate">
      <Button type="primary" @click="confirm" :loading="infoLoading || dataLoading">&nbsp;保 存&nbsp;</Button>
    </div> -->
    <importProblem ref="importProblemRef" :titleLimitNum="titleLimitNum" :optionLimitNum="optionLimitNum" :importData="problemsData" @confirm="confirmImport"></importProblem>
  </div>
</template>

<script>
import detailLeftSet from "./widgets/detail-left-set.vue";
import detailView from "./widgets/detail-view.vue";
import detailRightSet from "./widgets/detail-right-set.vue";
import importProblem from "../components/import-problem/index.vue";
export default {
  components: {
    detailLeftSet,
    detailView,
    detailRightSet,
    importProblem
  },
  props: {
    problemsInfo: {
      type: Object,
      default: ()=>({})
    },
  },
  data(){
    return {
      operateInfo: {
        currIndex: -1,
        warnIndex:-1,
        warnOptionIndex:-1,
      },
      // problemsInfo: {
      //   testId: 0,
      //   type: "",
      //   multi_choice: 0, // 0单选 1多选
      //   point_setting: "",
      //   question_count: 0,
      //   subject_data: []
      // },
      problemsData: [],
      OSubjectIds: [],
      OOptionIds: [],
      infoLoading: false,
      dataLoading: false,
      //
      titleLimitNum: 120,
      optionLimitNum: 50,
    }
  },
  computed: {
    currItemInfo(){
      let operateInfo = this.operateInfo || {};
      let currItemInfo = {};
      if(operateInfo.currIndex > -1){
        currItemInfo = this.problemsData[operateInfo.currIndex] || {};
      }
      return currItemInfo;
    }
  },
  methods:{
    init(){
      // this.loadTestData();
      this.loadProblemsData();
    },
    // loadTestData(){
    //   let pageQuery = this.pageQuery || {};
    //   if(!pageQuery.testId) return Promise.reject();
    //   this.infoLoading = true;
    //   return this.$MainApi
    //     .tasteTestInfo({
    //       data: {
    //         id: pageQuery.testId,
    //         type: pageQuery.type
    //       }
    //     })
    //     .then((res) => {
    //       if (res.code) {
    //         let data = res.data || {};
    //         this.problemsInfo = data.items || {};
    //       }
    //     }).finally(()=>{
    //       this.infoLoading = false
    //     })
    // },
    loadProblemsData(){
      let pageQuery = this.pageQuery || {};
      if(!pageQuery.testId) return Promise.reject();
      this.dataLoading = true;
      return this.$MainApi.tasteTestSubjectManagementInfo({
        data: {
          id: pageQuery.testId,
          type: pageQuery.type
        },
        other: {
            isErrorMsg: true
          }
      })
      .then((res) => {
        if (res.code) {
          let data = res.data || {};
          let items = data.items || [];
          // 根据sort按小到大排序
          items.sort((a, b)=>{
            return a.sort > b.sort
          })
          items.map((pItem)=>{
            let option_data = pItem.option_data || [];
            option_data.map((item, index)=>{
              item.value = (parseFloat(item.value) || parseFloat(item.value) == 0) ? parseFloat(item.value) : '';
              delete item.create_time;
              delete item.update_time;
            })
          })
          this.problemsData = items
          this.getJsonData(JSON.parse(JSON.stringify(items || [])));
        }
      }).finally(()=>{
        this.dataLoading = false;
      })
    },
    importData(){
      this.$refs["importProblemRef"] && this.$refs["importProblemRef"].showModal();
    },
    confirmImport(data){
      if(data && data instanceof Array){
        this.problemsData = this.problemsData.concat(data);
      }
    },
    setAllValue(){
      // 兼容英文，中文;
      let point_setting = this.problemsInfo.point_setting || '';
      point_setting = point_setting.replace(/；/g, ';');
      let points = point_setting.split(";") || [];
      let problemsData = this.problemsData || [];
      problemsData.map((pItem)=>{
        let option_data = pItem.option_data || [];
        option_data.map((item, index)=>{
          if(points[index] || points[index] == 0){
            item.value = points[index]
          }
        })
      })
    },
    getJsonData(data){ // 将数据兑换成 题目id: [optionId,optionId,optionId....]，方便后续对比出删除id
      if(data instanceof Array){
        let OSubjectIds = [], OOptionIds = [];
        data.map((pItem)=>{
          if(pItem.id) OSubjectIds.push(pItem.id);
          let option_data = pItem.option_data || [];
          option_data.map((item, index)=>{
            if(item.id){
              OOptionIds.push(item.id);
            }
          })
        })
        this.OSubjectIds = OSubjectIds || [];
        this.OOptionIds = OOptionIds || [];
      }
    },
    removeModule(detail){
      if(detail.currIndex || detail.currIndex == 0){
        this.problemsData.splice(detail.currIndex, 1)
        this.operateInfo.currIndex = -1;
      }
    },
    checkConfirm(){
      // 循环题目，找必填，题目删除项，选项删除项
      let problemsInfo = this.problemsInfo || {};
      let problemsData = this.problemsData || [];
      let warnIndex = -1, warnOptionIndex = -1;
      let problemsCount = problemsData.length;
      let OSubjectIds = JSON.parse(JSON.stringify(this.OSubjectIds)) || [];
      let OOptionIds = JSON.parse(JSON.stringify(this.OOptionIds)) || [];
      for(let i = 0; i < problemsData.length; i++){
        let pItem = problemsData[i] || {};
        let option_data = pItem.option_data || [];
        if(!pItem.question && !pItem.picture){
          warnIndex = i;
          this.$Message.warning("题目名称或者图片不能为空")
          break;
        }
        // 排序， 从1开始
        pItem.sort = Number(i + 1);
        // 剩余题目数
        pItem.rest_questions = problemsCount - pItem.sort;
        // 存在的题目，在OSubjectIds中剔除
        let delSubjectIndex = OSubjectIds.indexOf(pItem.id);
        if(delSubjectIndex != -1){
          OSubjectIds.splice(delSubjectIndex, 1)
        }
        if(!option_data || option_data.length == 0) {
          warnIndex = i;
          this.$Message.warning("请添加选项")
          break;
        }
        for(let j = 0; j < option_data.length; j++){
          let item = option_data[j] || {};
          if(!item.option_content && !item.option_picture){
            warnIndex = i;
            warnOptionIndex = j;
            this.$Message.warning("选项名称或者图片不能为空")
            break;
          }
          if(!item.value && ((problemsInfo.type == 'scoring' && item.value != '0') || (problemsInfo.type == 'dimension'))){
            warnIndex = i;
            warnOptionIndex = j;
            this.$Message.warning(problemsInfo.type == 'dimension' ? "选项类型不能为空" : "选项分值不能为空")
            break;
          }
          // 选项排序, 从1开始
          item.sort = j + 1;
          // 结果到达下一题
          item.next_question_sort = pItem.sort < problemsCount ? pItem.sort + 1 : 0;
          // 存在的选项，在OOptionIds中剔除
          let delOptionIndex = OOptionIds.indexOf(item.id);
          if(delOptionIndex != -1){
            OOptionIds.splice(delOptionIndex, 1)
          }
        }
        if(warnIndex > -1 || warnOptionIndex > -1){
          break;
        }
      }
      return {
        warnOptionIndex,
        warnIndex,
        OSubjectIds,
        OOptionIds
      };
    },
    save(){
      if(this.problemsData.length == 0){
        this.$Message.warning("请添加题目");
        return;
      }
      let { warnIndex, OSubjectIds, OOptionIds, warnOptionIndex } = this.checkConfirm();
      if(warnIndex > -1){
        this.operateInfo.currIndex = warnIndex;
        this.operateInfo.warnIndex = warnIndex;
        this.operateInfo.warnOptionIndex = warnOptionIndex;
        this.$nextTick(()=>{
          let detailRightSetRef = this.$refs["detailRightSetRef"];
          detailRightSetRef && detailRightSetRef.checkForm().finally(function(){
            if(warnOptionIndex || warnOptionIndex == 0) detailRightSetRef.scrollIntoView(warnOptionIndex);
          })
        })
      } else {
        this.saveReq(OSubjectIds, OOptionIds);
      }
    },
    saveReq(OSubjectIds, OOptionIds){
      let problemsInfo = this.problemsInfo || {};
      let problemsData = this.problemsData || [];
      let reqData = {
        testId: problemsInfo.id || this.pageQuery.testId,
        type: problemsInfo.type || this.pageQuery.type,
        multi_choice: problemsInfo.multi_choice,
        point_setting: problemsInfo.point_setting,
        question_count: problemsData.length,
        subject_data: this.problemsData,
        del_subject_ids: OSubjectIds,
        del_option_ids: OOptionIds,
      }
      this.infoLoading = true;
      this.dataLoading = true;
      return this.$MainApi.tasteTestSubjectManagementSave({
        data: reqData,
        other:{
          isMsg:true
        }
      })
      .then((res) => {
        if (res.code) {
          this.init();
        }
      }).finally(()=>{
        setTimeout(()=>{
          this.infoLoading = false;
          this.dataLoading = false;
        }, 350)
      })
    },
    onClearData(){
      this.problemsData = [];
    }
  },
}
</script>

<style lang="less" scoped>
.problems-detail-area{
  display: flex;
  flex-direction: column;
  height: 100%;
  .problems-detail-cont{
    display: flex;
    flex: 1;
    overflow: hidden;
    background: #efefef;
  }
  .detail-item{
    position:relative;
    height:100%;
  }
  .problems-detail-operate{
    // padding: 10px;
    // background-color:#fff;
    padding: 20px;
  }
}
</style>