<template>
<div class="">
  <custom-modal class="choose-problem-modal hold-modal-zindex" ref="modal" :width="620" :closable="true" :isSlotHeader="true" :isSlotFooter="true">
    <div slot="header">选择管理范围</div>
    <div class="choose-problem-cont _choose-problem-cont">
      <searchForm :searchForm="searchForm" :modelId="modelId" @search="loadData()"></searchForm>
      <Table
      ref="myTable"
      class="full-table"
      :columns="columns"
      :data="list"
      :height="300"
      border
      :loading="tableLoading"
      >
        <template slot="dimension" slot-scope="{ row }">
            <div>
              <span v-for="(item, index) in row.dimensionsData" :key="item.id">{{item.name}}<span v-if="index < row.dimensionsData.length - 1">,</span></span>
            </div>
        </template>
        <template slot="handle" slot-scope="{ row }">
          <div class="operate-area">
            <Checkbox :value="ids.indexOf(row.id) != -1" @on-change="changeChoose(row)">{{row.dimension_name}}</Checkbox>
          </div>
        </template>
      </Table>
      <rewrite-page
        slot="footer"
        :total="total"
        :current="page"
        :page-size="pageSize"
        :page-size-opts="pageSizeOpts"
        @on-change="(e) => loadData(e)"
        @on-page-size-change="handlePageSizeChange"
        show-sizer
        show-elevator
        show-total
        transfer
      ></rewrite-page>
    </div>
    <div slot="footer">
      <Button @click="dismiss">取消</Button>
      <Button type="primary" @click="confirm()">保存</Button>
    </div>
    <Spin fix v-if="pageLoading"></Spin>
  </custom-modal>
</div>
</template>

<script>

import ListMixin from "@/helper/mixin/list-mixin";
import mixins from "./mixins.js";
import searchForm from "./search-form.vue";
export default {
  mixins: [ ListMixin, mixins ],
  components: {
    searchForm
  },
  props: {
    modelId: {
      type: Number | String,
      default: 0
    },
    problemsData: {
      type: Array,
      default: ()=>{
        return []
      }
    },
  },
  data(){
    return {
      searchForm: {
        state: 0,
        dimensions: []
      },
      chooseProblem: []
    }
  },
  computed: {
    ids(){
      let chooseProblem = this.chooseProblem || [];
      let ids = []
      chooseProblem.map((item)=>{
        if(item.id){
          ids.push(item.id)
        }
      })
      return ids;
    }
  },
  methods: {
    dismiss() {
      this.$refs.modal.dismiss();
    },
    showModal(){
      this.loadData();
      this.$refs.modal.show();
    },
    onLoadData(page, extraData) {
      return new Promise((rs, rj)=>{
        let page = Number(extraData.page) || 1;
        let pageSize = Number(extraData.pageSize);
        let problemsData = JSON.parse(JSON.stringify(this.problemsData || []));
        let data = [], dataIndex = 0;
        let searchForm = this.searchForm || {};
        let installData = [];
        problemsData.map((item)=>{
          let hasPush = false;
          let iDimensions = item.dimensions || [];
          delete problemsData.option_data;
          if(searchForm.state){
            let sDimensions = searchForm.dimensions || [];
            if(sDimensions.length){
              if(iDimensions.length){
                if((sDimensions.length + iDimensions.length) !== Array.from(new Set([...sDimensions,...iDimensions])).length){
                  hasPush = true;
                }
              }
            } else if(iDimensions.length){
                hasPush = true;
              }
          } else if(!iDimensions.length){
            hasPush = true;
          }
          if(hasPush){
            installData.push(item);
          }
        })
        data = installData.slice((page - 1) * pageSize, page * pageSize)
        this.data = {
          total: installData.length,
          list: data
        };
        return rs();
      })
    },
    changeChoose(row){
      let index = this.ids.indexOf(row.id);
      if(index == -1){
        this.chooseProblem.push(row);
      } else {
        this.chooseProblem.splice(-1, 1);
      }
    },
    confirm(){
      if(!this.chooseProblem.length){
        this.$Message.warning("请选择问题");
        return;
      }
      this.$emit("chooseProblem", this.chooseProblem)
    },
  }
}
</script>

<style lang="less" scoped>
.choose-problem-modal{
  .add-dimension{
    width: 124px;
    height: 40px;
    background: #ECF8FE;
    font-size: 14px;
    font-family: PingFangSC-Regular, PingFang SC;
    font-weight: 400;
    color: #008ACB;
    line-height: 20px;
    margin-bottom: 10px;
  }
  .dimension-item{
    display: inline-block;
    width: 166px;
    margin-right:10px;
    margin-bottom: 18px;
  }
  .choose-problem-cont{
    margin: -10px;
    margin-bottom: -30px;
  }
}
</style>
<style lang="less">
._choose-problem-cont{
  .ivu-form-item-error-tip{
    padding-top: 2px;
  }
}

</style>