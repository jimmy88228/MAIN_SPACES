<template>
	<div class="custom-input-box inline-b" :style='boxStyle'>
		<Input 
		ref="myInput" 
		:value="inputValue" 
		:type='type' 
		:number='number'
		:placeholder='placeholder'
		:clearable='clearable'
		:disabled='disabled'
		:readonly='readonly'
		:maxlength='dfMaxlength'
		:show-word-limit='showWordLimit'
		:icon='icon'
		:size='size'
		:rows='rows'
		:class="[showWordLimit?'showWordLimitClass':'',clearable?'clearableClass':'',customClass]"
		:style="customStyle"
		:search="search"
		@on-change='inputChange'
		@on-focus='inputFocus'
		@on-click='inputClick'
		@on-blur='inputBlur'
		@on-search='inputSearch'
		@on-clear='inputClear'
		></Input>
	</div>
</template>
<script>
	const UnLimitType = /^(textarea)+$|^(url)+$/g;
	export default{
		name: 'customInput',
		model: {
			prop: 'value',
			event: 'on-change'
		},
		props: {
			type: {
				type: String,
				default: 'text'
			},
			value:{
				type: String | Number,
				default(){
					return ''
				}
			},
			placeholder: {
				type: String,
				default: ''
			},
			clearable: {
				type: Boolean,
				default: false
			},
			disabled: {
				type: Boolean,
				default: false
			},
			readonly: {
				type: Boolean,
				default: false
			},
			maxlength: {
				type: Number | String,
				default: ''
			},
			'showWordLimit': {
				type: Boolean,
				default: false
			},
			showWordLimit: {
				type: Boolean,
				default: false
			},
			icon: {
				type: String,
				default: ''
			},
			number: {
				type: Boolean,
				default: false
			},
			size:{
				type: String,
				default(){
					return 'default'
				}
			},
			min: {
				type: Number | String,
				default: ''
			},
			max: {
				type: Number | String,
				default: ''
			},
			rows: {
				type: Number | String,
				default: 2
			},
			beforeChange: {
				type: Function
			},
			isInt: {
				type: Boolean,
				default: false
			},
			'customClass':{
				type: String,
				default(){
					return ''
				}
			},
			'customStyle':{
				type: String,
				default(){
					return ''
				}
			},
			'boxStyle':{
				type: String,
				default(){
					return ''
				}
			},
			'search': {
				type: Boolean,
				default: false
			},
		},
		data(){
			return {
				inputValue: '',
			}
		},
		computed:{
			dfMaxlength(){
				if(this.type && !UnLimitType.test(this.type) && !this.maxlength){ //默认限制100长度
					return 100;
				} else {
					return this.maxlength || '';
				}
			}
		},
		methods:{
			
			inputChange(e){
				if(typeof(this.beforeChange) == 'function'){
					if(this.$util.isPromise(this.beforeChange)){
						this.beforeChange().then(()=>{
							this.changeCallback(e);
						}) .catch(()=>{
							this.holdCallback();
						})
					} else {
						if(this.beforeChange()){
							this.changeCallback(e);
						} else {
							this.holdCallback();
						}
					}
				} else {
					this.changeCallback(e);
				}
			},
			changeCallback(e){
				let target = e.target || {};
				let data = target.value || '';
				if(this.type == 'number' || this.number){
					let min = parseInt(this.min);
					let max = parseInt(this.max);
					if((min || min == 0) && (max || max == 0) && min > max){
						min = max;
					}
					
					if((min || min == 0) && data){
						data = min > data ? min : data;
					}
					if((max || max == 0) && (data || data == 0)){
						data = data > max ? max : data;
					}
					let maxlength = Math.min(8, this.dfMaxlength); //number类型默认限制8位长度
					if(maxlength && String(parseFloat(data||0)).length>maxlength){ //最大长度 (number类型的时候maxlength属性不生效，需要通过逻辑限制)
						data = Number( String(data||0).slice(0,maxlength) ); 
					}
					if(this.isInt){ //整数类型过滤
						data = parseInt(data||min||0);
					}
					if(typeof(data) == 'string' && data.substring(data.length - 2) != '.0'){ // 输入值为不完整小数值时
						if(data.indexOf('.') != -1){ // 包含小数点只读取前两位小数
							data = Number(Number(data).toFixed(2));
						} else {
							data = Number(data);
						}
						
					}
				}
				this.$nextTick(()=>{
					this.setOriginInput(data);
					this.inputValue = data;
					this.$emit('on-change', data);
				})
			},
			holdCallback(){
				this.$nextTick(()=>{
					let value = this.value || '';
					this.setOriginInput(value);
					this.inputValue = value;
					this.$emit('on-change', value);
				})
			},
			inputFocus(){
				this.$emit('on-focus');
			},
			inputClick(){
				this.$emit('on-click')
			},
			inputBlur(){
				this.$emit('on-blur')
			},
			inputSearch(data){
				this.$emit('on-search', data)
			},
			inputClear(){
				this.$emit('on-clear')
			},
			focus(){
				this.$refs['myInput'].focus();
			},
			setOriginInput(value){
				if(this.$refs['myInput'] && this.$refs['myInput'].$refs['input']){
					this.$refs['myInput'].$refs['input'].value = value;
					this.$refs['myInput'].$refs['input']._value = value;
					if(typeof value === 'number'){
						this.$refs['myInput'].$refs['input'].valueAsNumber = value;
					}
					this.$refs['myInput'].$data.currentValue = value;
				}
			}
		},
		mounted(){},
		watch:{
			value:{
				handler(nV) {
					let value = (nV || nV == 0) ? nV : '';
					this.inputValue = value;
				},
				immediate: true
			},
			min: {
				handler(nV){
					if(this.type == 'number' || this.number){
						nV = parseInt(nV);
						// 初始化强制刷新合理值
						// if((nV || nV == 0) && (this.inputValue || this.inputValue === 0)){ 
							// this.inputValue = nV > this.inputValue ? nV : this.inputValue;
							// this.$nextTick(()=>{
							// 	this.setOriginInput(this.inputValue);
							// })
						// }
					}
				},
				immediate: true
			},
			max: {
				handler(nV){
					if(this.type == 'number' || this.number){
						nV = parseInt(nV);
						// 初始化强制刷新合理值
						// if((nV || nV == 0) && (this.inputValue || this.inputValue === 0)){
						// 	this.inputValue = this.inputValue > nV  ? nV : this.inputValue;
						// 	this.$nextTick(()=>{
						// 		this.setOriginInput(this.inputValue);
						// 	})
						// }
					}
				},
				immediate: true
			}
		}
	}
</script>
<style lang="less" scoped>
.custom-input-box{ 
	min-width: 120px;
}
</style>
<style lang="less">
.custom-input-box{
	.showWordLimitClass{
		.ivu-input{
			padding-right: 46px;
		}
	}
	.clearableClass{
		.ivu-input{
			padding-right: 25px;
		}
	}
}
</style>