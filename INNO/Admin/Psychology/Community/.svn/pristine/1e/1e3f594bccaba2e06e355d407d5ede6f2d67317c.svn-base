<template>
  <hold-layout :isFull="true">
    <div class="init-title">
      {{searchForm.activityName || ""}}
    </div>
    <searchForm :searchForm="searchForm" @search="loadData()" :structureArr="structureArr"></searchForm>
    <Table ref="myTable" class="full-table" :columns="columns" :data="list" border :loading="tableLoading"  @on-sort-change="sortChange">
      <template slot="member_name" slot-scope="{ row }">
          <p class="p-t-5 p-b-5" v-if="isUnkown">{{row.name}}</p>
          <p class="p-t-5 p-b-5" v-else>{{row.get_view_member && row.get_view_member.member_name || "--"}}</p>
      </template>
      <template slot="structure_name" slot-scope="{ row }">
        {{isUnkown ? '--' : (row.structure_name || '--')}}
      </template>
      <template slot="state_str" slot-scope="{ row }">
        {{isUnkown ? '未参与' : (row.state_str || '--')}}
      </template>
      <template slot="create_time" slot-scope="{ row }">
          <p class="p-t-5 p-b-5">{{row.record_create_time || "--"}}</p>
      </template>
      <template slot="complete_time" slot-scope="{ row }">
          <p class="p-t-5 p-b-5">{{row.record_complete_time || '--'}}</p>
      </template>
      <template slot="handle" slot-scope="{ row }">
          <div class="operate-area">
            <a class="operate" @click="report(row)" v-hasAction="[(row.handle && row.handle.report)]" >报告</a>
            <a class="operate" @click="answer(row)" v-hasAction="[(row.handle && row.handle.answer)]" >答案</a>
            <p v-if="isUnkown">--</p>
          </div>
      </template>
    </Table>
    <rewrite-page
    slot="footer"
    :total="total"
    :current="page"
    :page-size="pageSize"
    :page-size-opts="pageSizeOpts"
    @on-change="e=>loadData(e)"
    @on-page-size-change="handlePageSizeChange"
    show-sizer
    show-elevator
    show-total
    transfer
    ></rewrite-page>
  </hold-layout>
</template>

<script>
import ListMixin from "@/helper/mixin/list-mixin";
import searchForm from "./search-form.vue";
import mixins from "./mixins";
export default {
  name: "assessResult",
  mixins: [ListMixin, mixins],
  components: { searchForm },
  data(){
    return {
      searchForm: {
          // class_id: 0,
          // school_id: 0,
          // grade_id: 0,
          activityid: 0,
          searchq: "",
          state: -1,
          field: "",
          fieldBy: "desc",
          structure_id:0,
          prent_structure_ids:[],
          activityName:""
      },
      structureArr:[],
      structureName:'',
      inited:false,
      is_view: 1
    }
  },
  computed:{
    isUnkown(){
      return this.is_view == 2;
    }
  },
  methods:{
    onLoadData(page, extraData) {
      let type = this.pageQuery.type;
      this.is_view = this.pageQuery.is_view;
      if(!this.inited){
        this.searchForm.activityid = Number(this.pageQuery.activityId);
        this.searchForm.structure_id = Number(this.pageQuery.structureId) || 0;
        this.searchForm.prent_structure_ids = this.pageParams.prentStructureIds || [];
        this.searchForm.activityName = this.pageQuery.activityName || "";
        this.structureName = this.pageQuery.structureName || ''
        this.inited = true;
      }
      // is_view == 2时跳转未知组织人员列表
      let req = this.is_view == 2 ? "unknownStructureList" : "appraisalScheduleResult";
      return this.$MainApi[req]({
          data: {
              ...this.searchForm,
              ...extraData,
          },
      })
      .then((res) => {
          if (res.code) {
              let data = res.data || {};
              this.data = {
                  total: data.total,
                  list: data.items,
              };
          }
      });
    },
    sortChange(detail){
      this.searchForm.field = detail.key || "";
      this.searchForm.fieldBy = detail.order || "desc";
      this.loadData();
    },
    report(row){
      this.$router.push({
        name: "assessReport",
        query: {
          type: this.pageQuery.type,
          modelId: Number(row.model_id),
          recordId: row.id || row.record_id,
          userId: Number(row.user_id)
        }
      })
    },
    answer(row){
      this.$router.push({
        name: "assessAnswer",
        query: {
          modelName: this.pageQuery.modelName,
          type: this.pageQuery.type,
          modelId: Number(row.model_id),
          recordId: row.id || row.record_id,
        }
      })
    }
  },
  mounted() {
      this.loadData();
  },
}
</script>

<style>
  .init-title{
    font-size: 22px;
    font-family: PingFangSC-Semibold, PingFang SC;
    font-weight: 600;
    color: #171717;
    line-height: 30px;
    margin-bottom: 23px;
  }
</style>