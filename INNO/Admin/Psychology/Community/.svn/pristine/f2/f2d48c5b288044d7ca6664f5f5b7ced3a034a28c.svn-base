<template>
    <div class="linkage-select-area">
        <div class="flex-c-c">
            <FormItem label="组织" v-if="(_structureLimit(['structure']) && checkIsShow('structure'))" :label-width="50">
                <data-cascader ref="organizeCascader" class="base-320 organize" type="organize" v-model="searchForm.prent_structure_ids" valueKey="id" labelKey="structure_name" @change="changeOrganize" @dismiss="dismiss"></data-cascader>
            </FormItem>
            <FormItem label="量表" v-if="isShowGauge" :label-width="50">
                <data-select v-model="searchForm.model_id" :params="{ model_id:  searchForm.model_id}" :isShowAll="false" class="screen-item" type="gauge" valueKey="model_id" nameKey="model_name" ref="gaugeSelectRef" @change="changeSelect('gauge',false)"></data-select>
            </FormItem>
            <FormItem label="得分状态" v-if="isShowGauge" :label-width="100">
                <data-select v-model="searchForm.range_id" :isShowAll="false" :customData="customData.range" class="screen-item" type="range" valueKey="id" nameKey="range_name" ref="rangeSelectRef" @change="changeSelect('range',false)"></data-select>
            </FormItem>
        </div>
    </div>
</template>

<script>
export default {
    name: "linkage-select",
    props: {
        searchForm: {
            type: Object,
            default: () => {
                return {};
            },
        },
        hideSelect: {
            // 手动限制显示
            type: Array,
            default: () => {
                return []
            },
        },
        isShowGauge:Boolean,
    },
    data() {
        return {
            area_id: 0,
            timer: null,
            customData:{range:[]}
        };
    },
    methods: {
        initData() {
            let _structureType = this._structureType;
            if (_structureType) {
                switch (_structureType) {
                    case "structure":
                        this.$set(
                            this.searchForm,
                            "structure_id",
                            0
                        );
                        break;
                    case "gauge":
                        console.log('initData gauge')
                        this.$set(
                            this.searchForm,
                            "model_id",
                            0
                        );
                        this.changeSelect("gauge", true);
                        break;
                    case "range":
                        console.log('initData range')
                        this.$set(
                            this.searchForm,
                            "range_id",
                            0
                        );
                        break;
                }
            }
        },
        checkIsShow(type){
            if(this.hideSelect.length > 0){
               return this.hideSelect.indexOf(type) == -1
            } else { return true }
        },
        changeSelect(type, isInit) { // 初始化时不初始化传进来的值
            console.log("changeSelect", type,isInit);
            this.$nextTick(() => {
                switch (type) {
                    case "gauge":
                        this.$set(this.searchForm, "range_id", 0);
                        this.$set(this.searchForm, "min_value", 0);
                        this.$set(this.searchForm, "max_value", 0);
                        if(this.searchForm.model_id){
                            let curGauge = this.$refs["gaugeSelectRef"] && this.$refs["gaugeSelectRef"].getCurData() || [];
                            this.customData.range = (curGauge.find(item=>item.model_id == this.searchForm.model_id)||{}).range_data||[];
                            console.log('curGauge',this.customData.range,this.searchForm.model_id,this.searchForm)
                            this.$nextTick(() => {
                                this.$refs["rangeSelectRef"] && this.$refs["rangeSelectRef"].getData()
                            });
                        }else{
                            this.customData.range = [];
                        }
                        break;
                    case "range":
                        if(this.searchForm.range_id){
                            let curRange = this.customData.range.find(item=>item.id == this.searchForm.range_id)||{}
                            console.log('rangerange',this.searchForm.range_id,curRange,this.customData.range);
                            this.$set(this.searchForm, "min_value", curRange.min_value||0);
                            this.$set(this.searchForm, "max_value", curRange.max_value||0);
                            break;
                        }else{ 
                            this.$set(this.searchForm, "min_value", 0);
                            this.$set(this.searchForm, "max_value", 0);
                            this.customData.range = [];
                        }
                    default:
                        break;
                }
                if(!isInit){
                    if(this.timer){
                        clearTimeout(this.timer);
                        this.timer = null;
                    }
                    this.$nextTick(() => {
                        this.timer = setTimeout(()=>{
                            this.$emit("on-change", this.searchForm);
                            this.timer = null;
                        }, 300);
                    })
                }
            });
        },
        changeOrganize(data) {
            if(data instanceof Array){
                let id = data.slice(-1)[0] || 0;
                this.$set(this.searchForm, "structure_id", id)
                console.log('changeOrganize',id,data,this.searchForm);
                this.timer = setTimeout(()=>{
                    this.$emit("on-change", this.searchForm);
                    this.timer = null;
                }, 300);
            }
        },
        dismiss(){
            console.log('link dismiss',this.searchForm)
            this.$emit("dismiss", this.searchForm);
        },
    },
    mounted() {
        this.initData();
    },
};
</script>

<style lang="less" scoped>
.linkage-select-area {
    display: inline-block;
    vertical-align: middle;
    .screen-item {
        width: 150px;
    }
    .organize{
        // min-width: 300px;
    }
}
</style>